theory WireGuard
begin


builtins: hashing, diffie-hellman

functions: aead/4, decrypt/3, extract/1, verify/4, true/0, kdf1/1, kdf2/1, kdf3/1

equations: decrypt(k, n, aead(k, n, p, a)) = p

equations: verify(k, n, a, aead(k, n, p, a)) = true

equations: extract(aead(k, n, p, a)) = a



/* -------------------- */
/*   Environment rules  */
/* -------------------- */

rule LtKGen:
   [ Fr(~k) ] --> [ !LtK($A, ~k), !LtpK($A, 'g'^~k), Out(<$A,'g'^~k>) ]

rule PsKGen:
   [ ] --> [ !PsK($A, $B, '00') ]

//rule PsKGenFr:
//   [ Fr(~k) ] --> [ !PsK($A, $B, ~k) ]

rule MessageGen:
   [ In(p) ] --> [ Message(p) ] 

//rule MessageGenFr:
//   [ Fr(~p) ] --> [ Message(~p) ] 

rule TimestampGen:
   [ In(t) ] --> [ Timestamp(t) ]
   
rule MACGen:
   [ Fr(~m) ] --> [ MAC(~m) ]

rule CounterGen:
   [ ] --> [ Counter($x) ]
   
rule InitGen:
   [ Fr(~sidI) ] --> [ Init_0(~sidI, $A, $B, 'p', 'i') ]

rule RespGen:
   [ Fr(~sidR) ] --> [ Resp_0(~sidR, $A, $B, 'p', 'i') ]

rule Corrupt:
   [ !LtK($A,k) ] --[ Corrupted($A) ]-> [ Out(k) ]



/* ----------------------------- */
/*   Protocol rules: Initiator   */
/* ----------------------------- */

rule Handshake_Init_1:
  let
    pkI = 'g'^~kI   // long-term private key
    epkI = 'g'^~ekI // ephemeral public key
    c0 = h(info)
    h0 = h(<c0, prologue>)
    h1 = h(<h0, pkR>)
    c1 = kdf1(<c0, epkI>)
    h2 = h(<h1, epkI>)
    c2 = kdf1(<c1, pkR^~ekI>)
    k1 = kdf2(<c1, pkR^~ekI>)
    cpkI = aead(k1, '0', pkI, h2)
    h3 = h(<h2, cpkI>)
    c3 = kdf1(<c2, pkR^~kI>)
    k2 = kdf2(<c2, pkR^~kI>)
    cts = aead(k2, '0', timestamp, h3)
    h4 = h(<h3, cts>)
    mI = <'1', ~sidI, epkI, cpkI, cts, mac1I, mac2I>
  in 
  [ Init_0(~sidI, a, b, prologue, info), // program parameters, sid = session id,
                                  //   a, b = identities, prologue = protocol data
    !LtK(a, ~kI),                 // long-term private key of a
    !LtpK(b, pkR),                // long-term public key of b
    !PsK(a, b, psk),              // pre-shared key between a and b
    Fr(~ekI),                     // ephemeral private key
    Timestamp(timestamp),         // timestamps and macs to use in the first message;
    MAC(mac1I),                   //  their values are not useful here so we just
    MAC(mac2I)                    //  receive some value from the environment
  ]
  --[ SendSIDI(~sidI) ]->
  [ Init_1(~sidI, a, b, prologue, info, ~kI, pkR, ~ekI, psk, c3, h4),
    Out(mI)
  ]


rule Handshake_Init_2:
  let
    pkI = 'g'^~kI   // long-term private key
    epkI = 'g'^~ekI // ephemeral public key
    // recompute the expected response
    c4 = kdf1(<c3,epkR>)
    h5 = h(<h4,epkR>)
    c5 = kdf1(<c4, epkR^~ekI>)
    c6 = kdf1(<c5, epkR^~kI>)
    c7 = kdf1(<c6, psk>)
    pi = kdf2(<c6, psk>)
    k3 = kdf3(<c6, psk>)
    h6 = h(<h5, pi>)
    cempty = aead(k3, '0', 'e', h6)
    mR = <'2', sidR, ~sidI, epkR, cempty, mac1R, mac2R>
    // and the keys
    kIR = kdf1(c7)
    kRI = kdf2(c7)
  in 
  [
    Init_1(~sidI, a, b, prologue, info, ~kI, pkR, ~ekI, psk, c3, h4),
    In(mR)           // B's response
  ]
  --[ Commit('Init', 'Resp', <a, b, kIR, kRI>), Secret(a, b, <kIR, kRI>) ]->
  [
    Init_2(~sidI, a, b, prologue, info, sidR, kIR, kRI)
  ]


rule Send_First_Init:
  [
    Init_2(~sidI, a, b, prologue, info, sidR, kIR, kRI),
    Message(p) //arbitrary message to send
  ]
  --[ SentFirstInit(~sidI, sidR, a, b, kIR, kRI, p), Running('Resp', 'Init', <a, b, kIR, kRI>) ]->
  [
    Init_3(~sidI, a, b, prologue, info, sidR, kIR, kRI),
    Out(<'4', sidR, '0', aead(kIR, '0', p, 'e')>)
  ]


rule Send_Init_Loop:
//  let nIR = succ(pnIR) in
  [ 
    Init_3(~sidI, a, b, prologue, info, sidR, kIR, kRI),
    Counter(nIR),
    Message(p) //arbitrary message to send
  ]
  --[ SentInitLoop(~sidI, sidR, a, b, kIR, kRI), AlreadyKnownSIDR(sidR) ]->
  [
    Init_3(~sidI, a, b, prologue, info, sidR, kIR, kRI),
    Out(<'4', sidR, nIR, aead(kIR, nIR, p, 'e')>)
  ]


rule Receive_Init_Loop:
  [
    Init_3(~sidI, a, b, prologue, info, sidR, kIR, kRI),
    In(<'4', x, nRI, aead(kRI, nRI, p, 'e')>)
  ]
  --[ ReceivedInitLoop(~sidI, sidR, a, b, kIR, kRI), AlreadyKnownSIDR(sidR) ]->
  [
    Init_3(~sidI, a, b, prologue, info, sidR, kIR, kRI)
  ]




/* ----------------------------- */
/*   Protocol rules: Responder   */
/* ----------------------------- */

rule Handshake_Resp_1:
  let
    pkR = 'g'^~kR   // long-term private key
    // first, recompute the expected message from A
    c0 = h(info)
    h0 = h(<c0, prologue>)
    h1 = h(<h0, pkR>)
    c1 = kdf1(<c0, epkI>)
    h2 = h(<h1, epkI>)
    c2 = kdf1(<c1, epkI^~kR>)
    k1 = kdf2(<c1, epkI^~kR>)
    cpkI = aead(k1, '0', pkI, h2)
    h3 = h(<h2, cpkI>)
    c3 = kdf1(<c2, pkI^~kR>)
    k2 = kdf2(<c2, pkI^~kR>)
    cts = aead(k2, '0', timestamp, h3)
    h4 = h(<h3, cts>)
    mI = <'1', sidI, epkI, cpkI, cts, mac1I, mac2I>
  in
  [ Resp_0(~sidR, a, b, prologue, info),      // program parameters, sid = session id,
                                        //   a, b = identities, prologue = protocol data
    !LtK(b, ~kR),                       // long-term private key of b
    !LtpK(a, pkI),                      // long-term public key of a
    !PsK(a, b, psk),                     // pre-shared key between a and b
    In(mI)
  ]
  -->
  [
    Resp_1(~sidR, a, b, prologue, info, pkI, ~kR, epkI, psk, c3, h4, sidI)
  ]


rule Handshake_Resp_2:
  let
    pkR = 'g'^~kR   // long-term private key
    epkR = 'g'^~ekR // ephemeral public key
    c4 = kdf1(<c3,epkR>)
    h5 = h(<h4,epkR>)
    c5 = kdf1(<c4, epkI^~ekR>)
    c6 = kdf1(<c5, pkI^~ekR>)
    c7 = kdf1(<c6, psk>)
    pi = kdf2(<c6, psk>)
    k3 = kdf3(<c6, psk>)
    h6 = h(<h5, pi>)
    cempty = aead(k3, '0', 'e', h6)
    mR = <'2', ~sidR, sidI, epkR, cempty, mac1R, mac2R>
    // and the keys
    kIR = kdf1(c7)
    kRI = kdf2(c7)
  in 
  [ Resp_1(~sidR, a, b, prologue, info, pkI, ~kR, epkI, psk, c3, h4, sidI),
    Fr(~ekR),                           // ephemeral private key
    MAC(mac1R),                         // macs to use in the first message;
    MAC(mac2R)                         //  their values are not useful here so we just
                                        //  receive some value from the environment
  ]
  --[ Running('Init', 'Resp', <a, b, kIR, kRI>), SendSIDR(~sidR) ]->
  [ Resp_2(~sidR, a, b, prologue, info, sidI, kIR, kRI),
    Out(mR)
  ]


rule Receive_First_Resp:
  [
    Resp_2(~sidR, a, b, prologue, info, sidI, kIR, kRI),
    In(<'4', x, n, aead(kIR, n, p, 'e')>)
  ]
  --[ ReceivedFirstResp(~sidR, sidI, a, b, kIR, kRI, p), Commit('Resp', 'Init', <a, b, kIR, kRI>), Secret(a, b, <kIR, kRI>) ]->
  [
    Resp_3(~sidR, a, b, prologue, info, sidI, kIR, kRI)
  ]


rule Send_Resp_Loop:
  [
    Resp_3(~sidR, a, b, prologue, info, sidI, kIR, kRI),
    Counter(nRI),
    Message(p) //arbitrary message to send
  ]
  --[ SentRespLoop(~sidR, sidI, a, b, kIR, kRI), AlreadyKnownSIDI(sidI) ]->
  [
    Resp_3(~sidR, a, b, prologue, info, sidI, kIR, kRI),
    Out(<'4', sidI, nRI, aead(kRI, nRI, p, 'e')>)
  ]


rule Receive_Resp_Loop:
  [
    Resp_3(~sidR, a, b, prologue, info, sidI, kIR, kRI),
    In(<'4', x, nIR, aead(kIR, nIR, p, 'e')>)
  ]
  --[ ReceivedRespLoop(~sidR, sidI, a, b, kIR, kRI), AlreadyKnownSIDI(sidI) ]->
  [
    Resp_3(~sidR, a, b, prologue, info, sidI, kIR, kRI)
  ]



/* ------------------------- */
/*   Lemmas and properties   */
/* ------------------------- */

/* Source Lemmas for SIDs */
lemma sources_sidR [sources]:
  "All sidR #i. AlreadyKnownSIDR(sidR)@i ==> (Ex #j. SendSIDR(sidR)@j) | (Ex #k. KU(sidR)@k & k < i)"


lemma sources_sidI [sources]:
  "All sidI #i. AlreadyKnownSIDI(sidI)@i ==> (Ex #j. SendSIDI(sidI)@j) | (Ex #k. KU(sidI)@k & k < i)"



/* Auxiliary lemmas to escape the loop in the transport phase */
lemma loop_induction_resp [use_induction, reuse]:
  "(All #i sidI sidR a b kIR kRI.
    (SentRespLoop(sidR,sidI,a,b,kIR,kRI)@i ==> (Ex #j pp. ReceivedFirstResp(sidR,sidI,a,b,kIR,kRI,pp)@j & j < i))) &
   (All #i sidI sidR a b kIR kRI.
    (ReceivedRespLoop(sidR,sidI,a,b,kIR,kRI)@i ==> (Ex #j pp. ReceivedFirstResp(sidR,sidI,a,b,kIR,kRI,pp)@j & j < i)))"


lemma loop_induction_init [use_induction, reuse]:
  "(All #i sidI sidR a b kIR kRI.
     (SentInitLoop(sidI,sidR,a,b,kIR, kRI)@i ==> (Ex #j pp. SentFirstInit(sidI,sidR,a,b,kIR,kRI,pp)@j & j < i))) &
   (All #i sidI sidR a b kIR kRI.
     (ReceivedInitLoop(sidI,sidR,a,b,kIR,kRI)@i ==> (Ex #j pp. SentFirstInit(sidI,sidR,a,b,kIR,kRI,pp)@j & j < i)))"


/* Executability check: possible to start the transport phase */
lemma first_message_exec:
  exists-trace
  "Ex #i #j sidI sidR a b k kk p.
    SentFirstInit(sidI, sidR, a, b, k, kk, p)@i &
    ReceivedFirstResp(sidR, sidI, a, b, k, kk, p)@j &
    i < j &
    (not (Ex #l. Corrupted(a)@l)) &
    (not (Ex #l. Corrupted(b)@l))"


/* Authentication: mutual agreement on the keys */
lemma auth_resp:
  "All #i a b k kk.
    Commit('Resp', 'Init', <a,b,k,kk>)@i
    ==>
    ((Ex #j. Running('Resp', 'Init', <a,b,k,kk>)@j & j < i)
   | (Ex #j. Corrupted(a)@j)
   | (Ex #j. Corrupted(b)@j))"


lemma auth_init:
  "All #i a b k kk.
    Commit('Init', 'Resp', <a,b,k,kk>)@i
    ==>
    ((Ex #j. Running('Init', 'Resp', <a,b,k,kk>)@j & j < i)
   | (Ex #j. Corrupted(a)@j)
   | (Ex #j. Corrupted(b)@j))"


/* Forward secrecy of the keys */
lemma forward_secrecy:
  "All #i a b m.
    Secret(a, b, m)@i
    ==>
    ((not (Ex #j. K(m)@j))
   | (Ex #j. Corrupted(a)@j & j < i)
   | (Ex #j. Corrupted(b)@j & j < i))"
   

end