theory KCL07_UK1_attack begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) setup:
   [ Fr( ~k1 ), Fr( ~k2 ), Fr( ~id1 ), Fr( ~id2 ) ]
  --[ OnlyOnce( 'setup' ), Create( ~k1 ), Create( ~k2 ) ]->
   [ TagRun( ~k1, ~id1 ), TagRun( diff(~k1, ~k2), diff(~id1, ~id2) ) ]

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), TagRun( ~k, ~id ) ]
  --[ Response( ~k, 'Tag' ) ]->
   [ Out( <(~id⊕~r2), (~r2⊕h(<r1, ~k>))> ) ]

rule (modulo E) reader2:
   [ Initiated( ~r1 ), ReaderRun( ~k, ~id ), In( xoredhash ) ]
  --[ Alive( ~k, 'Tag' ), Eq( xoredhash, (~id⊕h(<~r1, ~k>)) ) ]->
   [ ]

restriction onylOnce [right]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

restriction onylOnce [left]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

restriction equality [right]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction equality [left]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma recentalive_tag [right]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_tag [left]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma executable [right]:
  exists-trace
  "∃ x #i #j.
    (((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
     (∀ #k. (Alive( x, 'Tag' ) @ #k) ⇒ (#i = #k))) ∧
    (∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
 ∧
  (∀ #k. (Alive( x, 'Tag' ) @ #k) ⇒ #i = #k) ∧
  (∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ #j = #k)"
*/
by sorry

lemma executable [left]:
  exists-trace
  "∃ x #i #j.
    (((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
     (∀ #k. (Alive( x, 'Tag' ) @ #k) ⇒ (#i = #k))) ∧
    (∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
 ∧
  (∀ #k. (Alive( x, 'Tag' ) @ #k) ⇒ #i = #k) ∧
  (∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ #j = #k)"
*/
by sorry

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_fst
  by sorry
next
  case Rule_Destrd_0_snd
  by sorry
next
  case Rule_Destrd_union
  by sorry
next
  case Rule_Destrd_xor
  by sorry
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( TagRun( ~k, ~id ) ▶₂ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case Xor
              step( solve( !KU( (~id⊕~r2) ) @ #vk ) )
                case coerce
                step( solve( !KD( (~id⊕~r2) ) ▶₀ #vk ) )
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                    case d_0_fst
                    step( solve( TagRun( ~k.1, ~id.1 ) ▶₂ #vr.3 ) )
                      case setup_case_2
                      step( solve( splitEqs(2) ) )
                        case split
                        step( solve( (#vr.4, 0) ~~> (#vk, 0) ) )
                          case d_xor_case_1
                          step( solve( (#vr.5, 0) ~~> (#vk, 0) ) )
                            case Xor
                            step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                              case coerce
                              step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.1 ) )
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                                  case d_0_snd
                                  step( solve( (#vr.7, 0) ~~> (#vk.1, 0) ) )
                                    case d_xor_case_1
                                    step( solve( (#vr.8, 0) ~~> (#vk.1, 0) ) )
                                      case Xor_case_1
                                      step( solve( !KU( (~r2⊕h(<r1.1, ~k>)) ) @ #vk.4 ) )
                                        case coerce
                                        step( solve( !KD( (~r2⊕h(<r1.1, ~k>)) ) ▶₀ #vk.2 ) )
                                          case tag1
                                          step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                                            case d_0_snd
                                            step( solve( (#vr.9, 0) ~~> (#vk.2, 0) ) )
                                              case Xor
                                              step( solve( !KU( r1 ) @ #vk.3 ) )
                                                case c_fst
                                                step( solve( !KU( fst(x) ) @ #vk.3 ) )
                                                  case c_fst
                                                  step( solve( !KU( x ) @ #vk.4 ) )
                                                    case c_fst
                                                    step( solve( !KU( fst(x) ) @ #vk.4 ) )
                                                      case c_fst
                                                      step( solve( !KU( x ) @ #vk.5 ) )
                                                        case c_fst
                                                        step( solve( !KU( fst(x) ) @ #vk.5 ) )
                                                          case c_fst
                                                          step( solve( !KU( x ) @ #vk.6 ) )
                                                            case c_fst
                                                            step( solve( !KU( fst(x) ) @ #vk.6 ) )
                                                              case c_fst
                                                              step( solve( !KU( x ) @ #vk.7 ) )
                                                                case c_zero
                                                                step( solve( !KU( zero ) @ #vk.7 ) )
                                                                  case c_zero
                                                                  by ATTACK // trace found
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    by sorry
  qed
next
  case Rule_Send
  by sorry
next
  case Rule_reader1
  by sorry
next
  case Rule_reader2
  by sorry
next
  case Rule_setup
  by sorry
next
  case Rule_tag1
  by sorry
qed

end