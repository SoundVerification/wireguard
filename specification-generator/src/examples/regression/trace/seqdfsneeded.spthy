theory seqdfsneeded begin
functions: h/1

lemma slow: exists-trace "Ex #t. End()@t"
// End is created by Foo(h(h(~x)))
rule finish:
[ Foo(h(h(h(~x)))) ] --[ End() ]-> [ End() ]
// to hash Foo(x):
rule AAA_hash:
[ Foo(x) ] --> [ Foo(h(x)) ]
// (this rule is always the first case because of AAA_)

// So at depth ~4 we get to Foo(~x)
// 2 sources:
// a high depth Foo(<~x, ~x>)
rule step_2:
let
h17 = h(h(h(h(h(h(h(h(h(h(h(h(h(h(h(h(h(h(<~x, ~x>))))))))))))))))))
in
[ Foo(h17) ] --> [ Foo(~x) ]
rule gen:
[ In(~x) ] --> [ Foo(<~x, ~x>) ]
// Or Bar('a')
rule decoy:
[ Fr(x), Bar('a')[no_precomp,-] ] --> [ Foo(h(x)) ]
// and there are 3 sources of Bar(x) per depth level
rule amplify_decoy_case1:
[ Bar(y), In('a'), In(x) ] --> [ Bar(x) ]
rule amplify_decoy_case2:
[ Bar(y), In('b'), In(x) ] --> [ Bar(x) ]
rule amplify_decoy_case3:
[ Bar(y), In('c'), In(x) ] --> [ Bar(x) ]

/*
so iterative deepening (or bfs) will explore 3^{current depth} before
stopping on the trace found in rule gen
whereas sequential dfs finds it just fine.
*/

end
