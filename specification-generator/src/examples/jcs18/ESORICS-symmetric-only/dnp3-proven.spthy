theory DNP3_proven begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, hmac/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

/*
looping facts with injective instances:
  L_OutSentKeyStatus/2, L_OutstationState/7, L_UserState/6
*/


restriction InEq_testing:
  "∀ x y #i. (InEq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

restriction Unique_Pairings_id:
  "∀ x #i #j. ((Unique( x ) @ #i) ∧ (Unique( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction USR_and_OutstationID_distinct:
  "∀ x y #i.
    (Distinct( x, y ) @ #i) ⇒
    ((¬(∃ #j z. Distinct( y, z ) @ #j)) ∧
     (¬(∃ #j z. Distinct( z, x ) @ #j)))"
  // safety formula

rule (modulo E) Update_key_reveal:
   [ !F_UpdateKey( ~linkid, k ) ]
  --[ UpdateKeyReveal( k ), AdversaryRule( 'Update_key_reveal' ) ]->
   [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) cdsk_reveal:
   [ !CDSKToReveal( k1 ) ]
  --[ CDSKReveal( k1 ), AdversaryRule( 'Update_key_reveal' ) ]->
   [ Out( k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) mdsk_reveal:
   [ !MDSKToReveal( k1 ) ]
  --[ MDSKReveal( k1 ), AdversaryRule( 'Update_key_reveal' ) ]->
   [ Out( k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) authority_key_reveal:
   [ !F_AuthorityKey( k1 ) ]
  --[ AuthorityKeyReveal( k1 ), AdversaryRule( 'Update_key_reveal' )
  ]->
   [ Out( k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Authority_Key:
   [ Fr( ~AK ) ]
  --[ AuthorityCertKey( ~AK ) ]->
   [ !F_AuthorityKey( ~AK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CountUp:
   [ L_Counter( ~id, val ) ]
  --[ NewCounterValue( ~id, h(val) ) ]->
   [
   L_Counter( ~id, h(val) ), L_CounterValue( ~id, h(val) ),
   Out( h(val) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A2_C_AC_Authentication_Challenge:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>, mCS,
                      'SecurityIdle'
   ),
   L_CounterValue( ~oid, h(cCSQ) ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   Fr( ~CD )
   ]
  --[ CSQ( ~oid, h(cCSQ) ) ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>, mCS,
                      <'WaitForReply', h(cCSQ), h(cCSQ), $USR, ~CD>
   ),
   F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>, mCS,
                      <h(cCSQ), h(cCSQ), $USR, ~CD>
   ),
   !F_OutCCSInvariant( ~oid, ~os, <h(cCSQ), $USR, ~CD> ),
   Out( <h(cCSQ), $USR, ~CD> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A2_M_AC_Authentication_Challenge:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, 'SecurityIdle' ),
   L_CounterValue( ~uid, h(mCSQ) ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ), Fr( ~CD )
   ]
  --[ CSQ( ~uid, h(mCSQ) ) ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                <'WaitForReply', h(mCSQ), h(mCSQ), $USR, ~CD>
   ),
   F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                       <h(mCSQ), h(mCSQ), $USR, ~CD>
   ),
   !F_UserMCSInvariant( ~uid, ~us, <h(mCSQ), $USR, ~CD> ),
   Out( <h(mCSQ), $USR, ~CD> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S3_SKC_session_key_change:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SessionKeyChange' ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ),
   !UserUpdateKey( ~uid, ~uu, UK_i_USR_O ), Fr( ~CDSK_j_USR_O ),
   Fr( ~MDSK_j_USR_O ), Fr( ~newus ),
   In( <KSQ, $USR, keystatus, CD_j> )
   ]
  --[
  SessKeys( ~CDSK_j_USR_O, ~MDSK_j_USR_O, $USR ),
  NewSKs( ~linkid, UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O ),
  Sourced_UpdateKey( ~linkid, UK_i_USR_O ),
  UpdateKeyUsedForSKs( ~linkid, UK_i_USR_O, ~CDSK_j_USR_O,
                       ~MDSK_j_USR_O
  )
  ]->
   [
   L_UserState( ~uid, ~uu, ~newus, cCS, mCS,
                <'WaitForKeyChangeConfirmation', 
                 <KSQ, $USR, 
                  senc(<~CDSK_j_USR_O, ~MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
                       UK_i_USR_O)
                 >, 
                 ~CDSK_j_USR_O, ~MDSK_j_USR_O>
   ),
   !F_UserSessKeys( ~uid, ~newus, 'OK', ~CDSK_j_USR_O, ~MDSK_j_USR_O
   ),
   !CDSKToReveal( ~CDSK_j_USR_O ), !MDSKToReveal( ~MDSK_j_USR_O ),
   Out( <KSQ, $USR, 
         senc(<~CDSK_j_USR_O, ~MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
              UK_i_USR_O)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S4_SKS_session_key_status:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>,
                      <mCSQ, mChal>, 'SecurityIdle'
   ),
   L_CounterValue( ~oid, h(cCSQ) ),
   L_OutSentKeyStatus( ~oid, <KSQ, $USR, keystatus, CD_j> ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   !OutUpdateKey( ~oid, ~ou, UK_i_USR_O ), Fr( ~CD_j_plus_1 ),
   Fr( ~newos ),
   In( <KSQ, $USR, 
        senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
             UK_i_USR_O)
       >
   )
   ]
  --[
  GotSessKeysOutSt( CDSK_j_USR_O, MDSK_j_USR_O, $USR ),
  CSQ( ~oid, h(cCSQ) ), Sourced_UpdateKey( ~linkid, UK_i_USR_O ),
  Sourced_SKs( ~linkid, UK_i_USR_O, CDSK_j_USR_O, MDSK_j_USR_O ),
  UpdateKeyUsedForSKs( ~linkid, UK_i_USR_O, CDSK_j_USR_O,
                       MDSK_j_USR_O
  )
  ]->
   [
   L_OutstationState( ~oid, h(KSQ), ~ou, ~newos, <h(cCSQ), 'none'>,
                      <h(mCSQ), 'none'>, 'SecurityIdle'
   ),
   L_OutSentKeyStatus( ~oid,
                       <h(KSQ), $USR, 'OK', ~CD_j_plus_1, 
                        hmac(<KSQ, $USR, 
                              senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
                                   UK_i_USR_O)
                             >,
                             MDSK_j_USR_O)
                       >
   ),
   !F_OutSessKeys( ~oid, ~newos, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   Out( <h(KSQ), $USR, 'OK', ~CD_j_plus_1, 
         hmac(<KSQ, $USR, 
               senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
                    UK_i_USR_O)
              >,
              MDSK_j_USR_O)
        >
   )
   ]

  // loop breakers: [0,2]
  /* has exactly the trivial AC variant */

rule (modulo E) U2_UKCRp_Key_Change_Reply:
   [
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   Fr( ~CD_b )
   ]
  -->
   [ OutUpdateKeyChallenge( ~oid, ~CD_b ), Out( <$USR, ~CD_b> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) U3_U4_U5_new_update_key:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SecurityIdle' ),
   !F_UserInvariants( ~uid, ~AK, $USR, $OSID, ~linkid ),
   !F_AuthorityKey( ~AK ), Fr( ~CD_a ), Fr( ~UK_i_USR_O ),
   In( <KSQ, $USR, CD_b> )
   ]
  --[ NewUpdateKey( ~linkid, ~UK_i_USR_O ) ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS,
                <'WaitForKCC', hmac(<$OSID, ~CD_a, CD_b, KSQ>, ~UK_i_USR_O)>
   ),
   F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                 hmac(<$OSID, ~CD_a, CD_b, KSQ>, ~UK_i_USR_O)
   ),
   !F_UpdateKey( ~linkid, ~UK_i_USR_O ),
   Out( <~CD_a, <KSQ, $USR, senc(<$USR, ~UK_i_USR_O, CD_b>, ~AK)>, 
         hmac(<$OSID, ~CD_a, CD_b, KSQ>, ~UK_i_USR_O)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S5_receive_SKS_confirmation:
   [
   L_UserState( ~uid, ~uu, ~us, <cCSQ, cChal>, <mCSQ, cChal>,
                <'WaitForKeyChangeConfirmation', SKCM_j, CDSK_j_USR_O, MDSK_j_USR_O
                >
   ),
   L_CounterValue( ~uid, h(mCSQ) ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ), Fr( ~cid ),
   In( <KSQ, $USR, 'OK', CD_j_plus_1, hmac(SKCM_j, MDSK_j_USR_O)> )
   ]
  --[
  GotSessKeysUser( CDSK_j_USR_O, MDSK_j_USR_O, $USR ),
  CSQ( ~uid, h(mCSQ) )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, <h(cCSQ), 'none'>, <h(mCSQ), 'none'>,
                'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Initial_key_pre_distribution:
   [
   !F_AuthorityKey( ~AK ), Fr( ~UK_i_USR_O ), Fr( ~uid ), Fr( ~oid ),
   Fr( ~uu ), Fr( ~ou ), Fr( ~us ), Fr( ~os ), Fr( ~linkid )
   ]
  --[
  Unique( <~AK, $USR, $OUTSTATION> ),
  Unique( <~AK, $OUTSTATION, $USR> ), Distinct( $USR, $OUTSTATION ),
  AuthorityCertKey( ~AK ), NewCounterValue( ~uid, '0' ),
  NewCounterValue( ~oid, '0' ), NewUpdateKey( ~linkid, ~UK_i_USR_O )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, <'0', 'none'>, <'0', 'none'>, 'Init'
   ),
   L_OutstationState( ~oid, '0', ~ou, ~os, <'0', 'none'>,
                      <'0', 'none'>, 'SecurityIdle'
   ),
   !F_UserInvariants( ~uid, ~AK, $USR, $OUTSTATION, ~linkid ),
   !F_OutstationInvariants( ~oid, ~AK, $USR, $OUTSTATION, ~linkid ),
   !UserUpdateKey( ~uid, ~uu, ~UK_i_USR_O ),
   !OutUpdateKey( ~oid, ~ou, ~UK_i_USR_O ),
   !F_UserSessKeys( ~uid, ~us, 'NOT_INIT', 'undefined', 'undefined' ),
   !F_OutSessKeys( ~oid, ~os, 'NOT_INIT', 'undefined', 'undefined' ),
   L_OutSentKeyStatus( ~oid, 'none' ), L_Counter( ~uid, '0' ),
   L_Counter( ~oid, '0' ), !F_UpdateKey( ~linkid, ~UK_i_USR_O )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S1_SKSR_session_key_status_request:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, anystate ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid )
   ]
  -->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SessionKeyChange' ),
   Out( $USR )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S2_SKS_session_key_status:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>,
                      <mCSQ, mChal>, 'SecurityIdle'
   ),
   L_OutSentKeyStatus( ~oid, lastkeystatus ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   !F_OutSessKeys( ~oid, ~os, keystatus, CDSK, MDSK ), Fr( ~CD_j ),
   In( $USR )
   ]
  -->
   [
   L_OutstationState( ~oid, h(KSQ), ~ou, ~os, <cCSQ, cChal>,
                      <mCSQ, mChal>, 'SecurityIdle'
   ),
   L_OutSentKeyStatus( ~oid, <h(KSQ), $USR, keystatus, ~CD_j> ),
   Out( <h(KSQ), $USR, keystatus, ~CD_j> )
   ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) A3_C_AR_Authentication_Reply:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SecurityIdle' ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   Fr( ~cinvar ), In( <CSQ, $USR, CD> )
   ]
  --[
  SentASDU( ~linkid,
            <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)>,
            'normal', 'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O ),
  AuthReply( <CSQ, $USR, CD>, $ASDU, CDSK_j_USR_O )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, <CSQ, ~cinvar, CSQ, $USR, CD>, mCS,
                'SecurityIdle'
   ),
   !UserCCSInvariant( ~uid, ~us, ~cinvar, <CSQ, $USR, CD> ),
   Out( <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A3_C_AR_Authentication_Aggressive:
   [
   L_UserState( ~uid, ~uu, ~us, <cCSQ, ~cinv, cChal>, mCS,
                'SecurityIdle'
   ),
   !UserCCSInvariant( ~uid, ~us, ~cinv, cChal ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O )
   ]
  --[
  SentASDU( ~linkid,
            <h(cCSQ), $USR, 
             hmac(<'amode', h(cCSQ), cChal, $ASDU>, CDSK_j_USR_O)>,
            'aggressive', 'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O ),
  AuthReply( cChal, $ASDU, CDSK_j_USR_O )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, <h(cCSQ), ~cinv, cChal>, mCS,
                'SecurityIdle'
   ),
   Out( <h(cCSQ), $USR, 
         hmac(<'amode', h(cCSQ), cChal, $ASDU>, CDSK_j_USR_O)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A4_receive_C_AC_of_ASDU:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                      <'WaitForReply', CSQ, CSQ, $USR, CD>
   ),
   F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                      <CSQ, CSQ, $USR, CD>
   ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   In( <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)>
   )
   ]
  --[
  AuthASDU( ~linkid,
            <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)>,
            'normal', 'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <CSQ, CSQ, $USR, CD>, mCS,
                      'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A4_idle_receive_C_AC_aggressive:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <CSQ, AC>, mCS,
                      'SecurityIdle'
   ),
   L_CounterValue( ~oid, h(CSQ) ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   !F_OutCCSInvariant( ~oid, ~os, AC ),
   In( <h(CSQ), $USR, hmac(<'amode', h(CSQ), AC, $ASDU>, CDSK_j_USR_O)
       >
   )
   ]
  --[
  AuthASDU( ~linkid,
            <h(CSQ), $USR, hmac(<'amode', h(CSQ), AC, $ASDU>, CDSK_j_USR_O)>,
            'aggressive', 'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O ), CSQ( ~oid, h(CSQ) ),
  InEq( AC, 'none' )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <h(CSQ), AC>, mCS,
                      'SecurityIdle'
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A4_waiting_receive_C_AC_aggressive:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <CSQ, h(CSQ), $USR, CD>,
                      mCS, <'WaitForReply', newChal>
   ),
   F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, <CSQ, h(CSQ), $USR, CD>,
                      mCS, newChal
   ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ),
   In( <h(CSQ), $USR, 
        hmac(<'amode', h(CSQ), <h(CSQ), $USR, CD>, $ASDU>, CDSK_j_USR_O)>
   )
   ]
  --[
  AuthASDU( ~linkid,
            <h(CSQ), $USR, 
             hmac(<'amode', h(CSQ), <h(CSQ), $USR, CD>, $ASDU>, CDSK_j_USR_O)>,
            'aggressive', 'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O ),
  InEq( <h(CSQ), $USR, CD>, 'none' )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <h(CSQ), h(CSQ), $USR, CD>,
                      mCS, 'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_OutstationWaitForReply_TimeoutorError:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                      <'WaitForReply', newChal>
   ),
   F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS, newChal )
   ]
  -->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, newChal, mCS,
                      'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A3_M_AR_Authentication_Reply:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS, 'SecurityIdle' ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   Fr( ~cinv ), In( <CSQ, $USR, CD> )
   ]
  --[
  SentASDU( ~linkid,
            <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)>,
            'normal', 'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O ),
  AuthReply( <CSQ, $USR, CD>, $ASDU, MDSK_j_USR_O )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS,
                      <CSQ, ~cinv, CSQ, $USR, CD>, 'SecurityIdle'
   ),
   !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ),
   Out( <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A3_M_AR_Authentication_Aggressive:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, <mCSQ, ~cinv, mChal>,
                      'SecurityIdle'
   ),
   !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O )
   ]
  --[
  SentASDU( ~linkid,
            <h(mCSQ), $USR, 
             hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>,
            'aggressive', 'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O ),
  AuthReply( mChal, $ASDU, MDSK_j_USR_O )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS,
                      <h(mCSQ), ~cinv, mChal>, 'SecurityIdle'
   ),
   Out( <h(mCSQ), $USR, 
         hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A4_receive_M_AC_of_ASDU:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                <'WaitForReply', CSQ, CSQ, $USR, CD>
   ),
   F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                       <CSQ, CSQ, $USR, CD>
   ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   In( <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)>
   )
   ]
  --[
  AuthASDU( ~linkid,
            <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)>,
            'normal', 'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <CSQ, CSQ, $USR, CD>,
                'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A4_idle_receive_M_AC_aggressive:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, 'SecurityIdle' ),
   L_CounterValue( ~uid, h(mCSQ) ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   !F_UserMCSInvariant( ~uid, ~us, AC ),
   In( <h(mCSQ), $USR, 
        hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>
   )
   ]
  --[
  AuthASDU( ~linkid,
            <h(mCSQ), $USR, 
             hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>,
            'aggressive', 'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O ), CSQ( ~uid, h(mCSQ) ),
  InEq( mChal, 'none' )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <h(mCSQ), mChal>, 'SecurityIdle'
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A4_waiting_receive_M_AC_aggressive:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                <'WaitForReply', newChal>
   ),
   F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, newChal ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O ),
   !F_UserMCSInvariant( ~uid, ~us, AC ),
   In( <h(mCSQ), $USR, 
        hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>
   )
   ]
  --[
  AuthASDU( ~linkid,
            <h(mCSQ), $USR, 
             hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>,
            'aggressive', 'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O ), InEq( mChal, 'none' )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <h(mCSQ), mChal>, 'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_UserWaitForReply_Timeout:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, <'WaitForReply', newChal> ),
   F_UserWaitForReply( ~uid, ~uu, ~us, cCS, mCS, newChal )
   ]
  -->
   [ L_UserState( ~uid, ~uu, ~us, cCS, newChal, 'SecurityIdle' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) U6_UKCC_Update_Key_Change_Confirmation:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS, 'SecurityIdle' ),
   OutUpdateKeyChallenge( ~oid, CD_b ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid ),
   Fr( ~newou ), In( CD_a ),
   In( <<h(KSQ), $USR, senc(<$USR, UK_i_USR_O, CD_b>, AK)>, 
        hmac(<$OSID, CD_a, CD_b, h(KSQ)>, UK_i_USR_O)>
   )
   ]
  --[
  OutstationUpdateKeySession( ~oid,
                              hmac(<$OSID, CD_a, CD_b, h(KSQ)>, UK_i_USR_O),
                              hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O)
  ),
  Sourced_UpdateKey( ~linkid, UK_i_USR_O )
  ]->
   [
   L_OutstationState( ~oid, h(KSQ), ~newou, ~os, cCS, mCS,
                      'SecurityIdle'
   ),
   !OutUpdateKey( ~oid, ~newou, UK_i_USR_O ),
   Out( hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) U7_receive_UKCC_from_Outstation:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS,
                <'WaitForKCC', hmac(<$OSID, CD_a, CD_b, KSQ>, UK_i_USR_O)>
   ),
   F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                 hmac(<$OSID, CD_a, CD_b, KSQ>, UK_i_USR_O)
   ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ), Fr( ~newuu ),
   In( hmac(<$USR, CD_b, CD_a, KSQ>, UK_i_USR_O) )
   ]
  --[
  UserUpdateKeySession( ~uid,
                        hmac(<$OSID, CD_a, CD_b, KSQ>, UK_i_USR_O),
                        hmac(<$USR, CD_b, CD_a, KSQ>, UK_i_USR_O)
  ),
  Sourced_UpdateKey( ~linkid, UK_i_USR_O )
  ]->
   [
   L_UserState( ~uid, ~newuu, ~us, cCS, mCS, 'SecurityIdle' ),
   !UserUpdateKey( ~uid, ~newuu, UK_i_USR_O )
   ]

  /* has exactly the trivial AC variant */

lemma countervalue_uniqueness [reuse, use_induction]:
  all-traces
  "∀ id x #i #j.
    ((NewCounterValue( id, x ) @ #i) ∧
     (NewCounterValue( id, x ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ id x #i #j.
  (NewCounterValue( id, x ) @ #i) ∧ (NewCounterValue( id, x ) @ #j)
 ∧
  ¬(#i = #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (#i < #j)  ∥ (#j < #i) )
    case case_1
    solve( NewCounterValue( id, x ) @ #i )
      case CountUp
      solve( NewCounterValue( ~id, h(val) ) @ #j )
        case CountUp
        solve( L_Counter( ~id, val ) ▶₀ #i )
          case CountUp
          solve( L_Counter( ~id, h(val) ) ▶₀ #j )
            case CountUp
            by contradiction /* cyclic */
          qed
        next
          case Initial_key_pre_distribution_case_1
          solve( L_Counter( ~id, '0' ) ▶₀ #j )
            case Initial_key_pre_distribution
            by contradiction /* cyclic */
          qed
        next
          case Initial_key_pre_distribution_case_2
          solve( L_Counter( ~id, '0' ) ▶₀ #j )
            case Initial_key_pre_distribution
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Initial_key_pre_distribution_case_1
      solve( !F_AuthorityKey( ~AK ) ▶₀ #i )
        case Authority_Key
        solve( NewCounterValue( ~uid, '0' ) @ #j )
          case Initial_key_pre_distribution
          by contradiction /* cyclic */
        qed
      qed
    next
      case Initial_key_pre_distribution_case_2
      solve( !F_AuthorityKey( ~AK ) ▶₀ #i )
        case Authority_Key
        solve( NewCounterValue( ~oid, '0' ) @ #j )
          case Initial_key_pre_distribution
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case case_2
    solve( NewCounterValue( id, x ) @ #i )
      case CountUp
      solve( NewCounterValue( ~id, h(val) ) @ #j )
        case CountUp
        solve( L_Counter( ~id, val ) ▶₀ #i )
          case CountUp
          solve( L_Counter( ~id, h(val) ) ▶₀ #j )
            case CountUp
            by contradiction /* cyclic */
          qed
        next
          case Initial_key_pre_distribution_case_1
          solve( L_Counter( ~id, '0' ) ▶₀ #j )
            case Initial_key_pre_distribution
            by contradiction /* cyclic */
          qed
        next
          case Initial_key_pre_distribution_case_2
          solve( L_Counter( ~id, '0' ) ▶₀ #j )
            case Initial_key_pre_distribution
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Initial_key_pre_distribution_case_1
      solve( !F_AuthorityKey( ~AK ) ▶₀ #i )
        case Authority_Key
        solve( NewCounterValue( ~uid, '0' ) @ #j )
          case Initial_key_pre_distribution
          by contradiction /* cyclic */
        qed
      qed
    next
      case Initial_key_pre_distribution_case_2
      solve( !F_AuthorityKey( ~AK ) ▶₀ #i )
        case Authority_Key
        solve( NewCounterValue( ~oid, '0' ) @ #j )
          case Initial_key_pre_distribution
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
qed

lemma CSQ_Uniqueness [reuse, use_induction]:
  all-traces
  "∀ id csq #i #j.
    ((CSQ( id, csq ) @ #i) ∧ (CSQ( id, csq ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ id csq #i #j.
  (CSQ( id, csq ) @ #i) ∧ (CSQ( id, csq ) @ #j) ∧ ¬(#i = #j)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( CSQ( id, csq ) @ #i )
    case A2_C_AC_Authentication_Challenge
    solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~oid, h(cCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      qed
    qed
  next
    case A2_M_AC_Authentication_Challenge
    solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~uid, h(mCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      qed
    qed
  next
    case A4_idle_receive_C_AC_aggressive
    solve( L_CounterValue( ~oid, h(CSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~oid, h(CSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_CounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_CounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        solve( L_CounterValue( ~oid, h(CSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_CounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        by solve( L_CounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        by solve( L_CounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      qed
    qed
  next
    case A4_idle_receive_M_AC_aggressive
    solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~uid, h(mCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case S4_SKS_session_key_status
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      qed
    qed
  next
    case S4_SKS_session_key_status
    solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~oid, h(cCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case S5_receive_SKS_confirmation
        by solve( L_CounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      qed
    qed
  next
    case S5_receive_SKS_confirmation
    solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~uid, h(mCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        by solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        solve( L_CounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      qed
    qed
  qed
qed

lemma authed_sessions_unique [reuse]:
  all-traces
  "∀ id ar mode mode2 direction #i #j.
    ((AuthASDU( id, ar, mode, direction ) @ #i) ∧
     (AuthASDU( id, ar, mode2, direction ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ id ar mode mode2 direction #i #j.
  (AuthASDU( id, ar, mode, direction ) @ #i) ∧
  (AuthASDU( id, ar, mode2, direction ) @ #j)
 ∧
  ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( AuthASDU( id, ar, mode, direction ) @ #i )
    case A4_idle_receive_C_AC_aggressive
    solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
           ) ▶₂ #i )
      case S4_SKS_session_key_status_case_1
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, 'control'
                 ) @ #j )
            case A4_idle_receive_C_AC_aggressive
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O,
                                   MDSK_j_USR_O.1
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                              ~linkid
                     ) ▶₃ #j )
                case Initial_key_pre_distribution
                by contradiction /* cyclic */
              qed
            next
              case S4_SKS_session_key_status_case_2
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                 ~linkid
                        ) ▶₃ #j )
            qed
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status_case_2
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, 'control'
                 ) @ #j )
            case A4_idle_receive_C_AC_aggressive
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O,
                                   MDSK_j_USR_O.1
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                 ~linkid
                        ) ▶₃ #j )
            next
              case S4_SKS_session_key_status_case_2
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                              ~linkid
                     ) ▶₃ #j )
                case Initial_key_pre_distribution
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_idle_receive_M_AC_aggressive
    solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_idle_receive_M_AC_aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by contradiction /* cyclic */
            qed
          next
            case A4_waiting_receive_M_AC_aggressive
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                       <mCSQ, mChal>, newChal
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                        ) ▶₂ #j )
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_idle_receive_M_AC_aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by contradiction /* cyclic */
            qed
          next
            case A4_waiting_receive_M_AC_aggressive
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                       <mCSQ, mChal>, newChal
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                        ) ▶₂ #j )
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_C_AC_of_ASDU
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                              <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( AuthASDU( ~linkid,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, 'control'
                 ) @ #j )
            case A4_receive_C_AC_of_ASDU
            solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1, cCS, mCS.1,
                                      <h(cCSQ), h(cCSQ), $USR, ~CD>
                   ) ▶₁ #j )
              case A2_C_AC_Authentication_Challenge
              by contradiction /* cyclic */
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( AuthASDU( ~linkid,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, 'control'
                 ) @ #j )
            case A4_receive_C_AC_of_ASDU
            solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1, cCS, mCS.1,
                                      <h(cCSQ), h(cCSQ), $USR, ~CD>
                   ) ▶₁ #j )
              case A2_C_AC_Authentication_Challenge
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_M_AC_of_ASDU
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_receive_M_AC_of_ASDU
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                       <mCSQ.1, mChal.1>, <h(mCSQ), h(mCSQ), $USR, ~CD>
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              by contradiction /* cyclic */
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_receive_M_AC_of_ASDU
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                       <mCSQ.1, mChal.1>, <h(mCSQ), h(mCSQ), $USR, ~CD>
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_C_AC_aggressive
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os,
                              <CSQ, h(CSQ), $USR, CD>, mCS, newChal
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( AuthASDU( ~linkid,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, 'control'
                   ) @ #j )
              case A4_idle_receive_C_AC_aggressive
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O,
                                     MDSK_j_USR_O.1
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                   ~linkid
                          ) ▶₃ #j )
              next
                case S4_SKS_session_key_status_case_2
                by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                   ~linkid
                          ) ▶₃ #j )
              qed
            next
              case A4_waiting_receive_C_AC_aggressive
              solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1,
                                        <CSQ, h(CSQ), $USR, ~CD>, mCS.1, newChal
                     ) ▶₁ #j )
                case A2_C_AC_Authentication_Challenge
                solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                ~linkid
                       ) ▶₂ #j )
                  case Initial_key_pre_distribution
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( AuthASDU( ~linkid,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, 'control'
                   ) @ #j )
              case A4_idle_receive_C_AC_aggressive
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O,
                                     MDSK_j_USR_O.1
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                   ~linkid
                          ) ▶₃ #j )
              next
                case S4_SKS_session_key_status_case_2
                by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                   ~linkid
                          ) ▶₃ #j )
              qed
            next
              case A4_waiting_receive_C_AC_aggressive
              solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1,
                                        <CSQ, h(CSQ), $USR, ~CD>, mCS.1, newChal
                     ) ▶₁ #j )
                case A2_C_AC_Authentication_Challenge
                solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                ~linkid
                       ) ▶₂ #j )
                  case Initial_key_pre_distribution
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_M_AC_aggressive
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               newChal
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( AuthASDU( ~linkid,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, 'monitor'
                   ) @ #j )
              case A4_idle_receive_M_AC_aggressive
              by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                        ) ▶₂ #j )
            next
              case A4_waiting_receive_M_AC_aggressive
              solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                         <mCSQ, mChal>, newChal
                     ) ▶₁ #j )
                case A2_M_AC_Authentication_Challenge
                solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                       ) ▶₂ #j )
                  case Initial_key_pre_distribution
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( AuthASDU( ~linkid,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, 'monitor'
                   ) @ #j )
              case A4_idle_receive_M_AC_aggressive
              by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                        ) ▶₂ #j )
            next
              case A4_waiting_receive_M_AC_aggressive
              solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                         <mCSQ, mChal>, newChal
                     ) ▶₁ #j )
                case A2_M_AC_Authentication_Challenge
                solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                       ) ▶₂ #j )
                  case Initial_key_pre_distribution
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( AuthASDU( id, ar, mode, direction ) @ #i )
    case A4_idle_receive_C_AC_aggressive
    solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
           ) ▶₂ #i )
      case S4_SKS_session_key_status_case_1
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, 'control'
                 ) @ #j )
            case A4_idle_receive_C_AC_aggressive
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O,
                                   MDSK_j_USR_O.1
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                              ~linkid
                     ) ▶₃ #j )
                case Initial_key_pre_distribution
                by contradiction /* cyclic */
              qed
            next
              case S4_SKS_session_key_status_case_2
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                 ~linkid
                        ) ▶₃ #j )
            qed
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status_case_2
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, 'control'
                 ) @ #j )
            case A4_idle_receive_C_AC_aggressive
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O,
                                   MDSK_j_USR_O.1
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                 ~linkid
                        ) ▶₃ #j )
            next
              case S4_SKS_session_key_status_case_2
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                              ~linkid
                     ) ▶₃ #j )
                case Initial_key_pre_distribution
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_idle_receive_M_AC_aggressive
    solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_idle_receive_M_AC_aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by contradiction /* cyclic */
            qed
          next
            case A4_waiting_receive_M_AC_aggressive
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                       <mCSQ, mChal>, newChal
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                        ) ▶₂ #j )
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_idle_receive_M_AC_aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by contradiction /* cyclic */
            qed
          next
            case A4_waiting_receive_M_AC_aggressive
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                       <mCSQ, mChal>, newChal
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                        ) ▶₂ #j )
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_C_AC_of_ASDU
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                              <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( AuthASDU( ~linkid,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, 'control'
                 ) @ #j )
            case A4_receive_C_AC_of_ASDU
            solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1, cCS, mCS.1,
                                      <h(cCSQ), h(cCSQ), $USR, ~CD>
                   ) ▶₁ #j )
              case A2_C_AC_Authentication_Challenge
              by contradiction /* cyclic */
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( AuthASDU( ~linkid,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, 'control'
                 ) @ #j )
            case A4_receive_C_AC_of_ASDU
            solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1, cCS, mCS.1,
                                      <h(cCSQ), h(cCSQ), $USR, ~CD>
                   ) ▶₁ #j )
              case A2_C_AC_Authentication_Challenge
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_M_AC_of_ASDU
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_receive_M_AC_of_ASDU
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                       <mCSQ.1, mChal.1>, <h(mCSQ), h(mCSQ), $USR, ~CD>
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              by contradiction /* cyclic */
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_receive_M_AC_of_ASDU
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                       <mCSQ.1, mChal.1>, <h(mCSQ), h(mCSQ), $USR, ~CD>
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_C_AC_aggressive
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os,
                              <CSQ, h(CSQ), $USR, CD>, mCS, newChal
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( AuthASDU( ~linkid,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, 'control'
                   ) @ #j )
              case A4_idle_receive_C_AC_aggressive
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O,
                                     MDSK_j_USR_O.1
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                   ~linkid
                          ) ▶₃ #j )
              next
                case S4_SKS_session_key_status_case_2
                by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                   ~linkid
                          ) ▶₃ #j )
              qed
            next
              case A4_waiting_receive_C_AC_aggressive
              solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1,
                                        <CSQ, h(CSQ), $USR, ~CD>, mCS.1, newChal
                     ) ▶₁ #j )
                case A2_C_AC_Authentication_Challenge
                solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                ~linkid
                       ) ▶₂ #j )
                  case Initial_key_pre_distribution
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( AuthASDU( ~linkid,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, 'control'
                   ) @ #j )
              case A4_idle_receive_C_AC_aggressive
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O,
                                     MDSK_j_USR_O.1
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                   ~linkid
                          ) ▶₃ #j )
              next
                case S4_SKS_session_key_status_case_2
                by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                   ~linkid
                          ) ▶₃ #j )
              qed
            next
              case A4_waiting_receive_C_AC_aggressive
              solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1,
                                        <CSQ, h(CSQ), $USR, ~CD>, mCS.1, newChal
                     ) ▶₁ #j )
                case A2_C_AC_Authentication_Challenge
                solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                                ~linkid
                       ) ▶₂ #j )
                  case Initial_key_pre_distribution
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_M_AC_aggressive
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               newChal
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( AuthASDU( ~linkid,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, 'monitor'
                   ) @ #j )
              case A4_idle_receive_M_AC_aggressive
              by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                        ) ▶₂ #j )
            next
              case A4_waiting_receive_M_AC_aggressive
              solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                         <mCSQ, mChal>, newChal
                     ) ▶₁ #j )
                case A2_M_AC_Authentication_Challenge
                solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                       ) ▶₂ #j )
                  case Initial_key_pre_distribution
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( AuthASDU( ~linkid,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, 'monitor'
                   ) @ #j )
              case A4_idle_receive_M_AC_aggressive
              by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                        ) ▶₂ #j )
            next
              case A4_waiting_receive_M_AC_aggressive
              solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                         <mCSQ, mChal>, newChal
                     ) ▶₁ #j )
                case A2_M_AC_Authentication_Challenge
                solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid
                       ) ▶₂ #j )
                  case Initial_key_pre_distribution
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma update_key_sourced [reuse, use_induction]:
  all-traces
  "(¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ⇒
   (∀ id uk #i.
     ((¬(∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (#r < #i))) ∧
      (Sourced_UpdateKey( id, uk ) @ #i)) ⇒
     (∃ #j. (#j < #i) ∧ (NewUpdateKey( id, uk ) @ #j)))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∃ id uk #i.
   (Sourced_UpdateKey( id, uk ) @ #i)
  ∧
   (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
   (∀ #j. (NewUpdateKey( id, uk ) @ #j) ⇒ ¬(#j < #i)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
         (∀ id uk #i.
           (Sourced_UpdateKey( id, uk ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i)) ∨
            (∃ #j.
              (NewUpdateKey( id, uk ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)))) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
           (∃ #j. (NewUpdateKey( id, uk ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( Sourced_UpdateKey( id, uk ) @ #i )
        case S3_SKC_session_key_change
        solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₁ #i )
          case Initial_key_pre_distribution
          solve( !UserUpdateKey( ~uid, ~uu, uk ) ▶₂ #i )
            case Initial_key_pre_distribution
            by contradiction /* from formulas */
          next
            case U7_receive_UKCC_from_Outstation
            by contradiction /* from formulas */
          qed
        qed
      next
        case S4_SKS_session_key_status
        solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
               ) ▶₃ #i )
          case Initial_key_pre_distribution
          solve( !OutUpdateKey( ~oid, ~ou, uk ) ▶₄ #i )
            case Initial_key_pre_distribution
            by contradiction /* from formulas */
          next
            case U6_UKCC_Update_Key_Change_Confirmation
            solve( (∃ #r.
                     (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #vr.2))  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, uk ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case U6_UKCC_Update_Key_Change_Confirmation
        solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
               ) ▶₂ #i )
          case Initial_key_pre_distribution
          solve( OutUpdateKeyChallenge( ~oid, CD_b ) ▶₁ #i )
            case U2_UKCRp_Key_Change_Reply
            solve( !KU( senc(<$USR, uk, ~CD_b>, ~AK) ) @ #vk.6 )
              case U3_U4_U5_new_update_key
              solve( !KU( hmac(<$OSID, CD_a, ~CD_b, h(KSQ)>, ~UK_i_USR_O)
                     ) @ #vk.8 )
                case U3_U4_U5_new_update_key
                by contradiction /* from formulas */
              next
                case U6_UKCC_Update_Key_Change_Confirmation
                by contradiction /* from formulas */
              next
                case c_hmac
                solve( !KU( ~UK_i_USR_O ) @ #vk.15 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( ~AK ) @ #vk.17 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_senc
              solve( !KU( ~AK ) @ #vk.9 )
                case authority_key_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case U7_receive_UKCC_from_Outstation
        solve( F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                             hmac(<$OSID, CD_a, CD_b, KSQ>, uk)
               ) ▶₁ #i )
          case U3_U4_U5_new_update_key
          solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
            case Initial_key_pre_distribution
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma update_key_secrecy:
  all-traces
  "(¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ⇒
   (∀ id uk #i.
     ((¬(∃ #r. UpdateKeyReveal( uk ) @ #r)) ∧
      (NewUpdateKey( id, uk ) @ #i)) ⇒
     (¬(∃ #j. K( uk ) @ #j)))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∃ id uk #i.
   (NewUpdateKey( id, uk ) @ #i)
  ∧
   (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧ (∃ #j. (K( uk ) @ #j)))"
*/
simplify
solve( NewUpdateKey( id, uk ) @ #i )
  case Initial_key_pre_distribution
  solve( !F_AuthorityKey( ~AK ) ▶₀ #i )
    case Authority_Key
    solve( !KU( ~UK_i_USR_O ) @ #vk )
      case Update_key_reveal
      by contradiction /* from formulas */
    qed
  qed
next
  case U3_U4_U5_new_update_key
  solve( !F_UserInvariants( ~uid, ~AK, $USR, $OSID, ~linkid ) ▶₁ #i )
    case Initial_key_pre_distribution
    solve( !F_AuthorityKey( ~AK ) ▶₂ #i )
      case Authority_Key
      solve( !KU( ~UK_i_USR_O ) @ #vk )
        case U3_U4_U5_new_update_key
        solve( !KU( ~AK ) @ #vk.6 )
          case authority_key_reveal
          by contradiction /* from formulas */
        qed
      next
        case Update_key_reveal
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma sessionkey_secrecy_outst:
  all-traces
  "(¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ⇒
   (∀ id uk CDSK MDSK #i.
     ((((¬(∃ #r. UpdateKeyReveal( uk ) @ #r)) ∧
        (¬(∃ #r. CDSKReveal( CDSK ) @ #r))) ∧
       (¬(∃ #r. MDSKReveal( MDSK ) @ #r))) ∧
      (Sourced_SKs( id, uk, CDSK, MDSK ) @ #i)) ⇒
     ((¬(∃ #j. K( CDSK ) @ #j)) ∧ (¬(∃ #j. K( MDSK ) @ #j))))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∃ id uk CDSK MDSK #i.
   (Sourced_SKs( id, uk, CDSK, MDSK ) @ #i)
  ∧
   (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
   (∀ #r. (CDSKReveal( CDSK ) @ #r) ⇒ ⊥) ∧
   (∀ #r. (MDSKReveal( MDSK ) @ #r) ⇒ ⊥) ∧
   (((∃ #j. (K( CDSK ) @ #j)) ∨ (∃ #j. (K( MDSK ) @ #j)))))"
*/
simplify
solve( (∃ #j. (K( CDSK ) @ #j))  ∥ (∃ #j. (K( MDSK ) @ #j)) )
  case case_1
  solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
         ) ▶₃ #i )
    case Initial_key_pre_distribution
    solve( !OutUpdateKey( ~oid, ~ou, uk ) ▶₄ #i )
      case Initial_key_pre_distribution
      solve( !KU( senc(<CDSK, MDSK, KSQ, $USR, keystatus, CD_j>,
                       ~UK_i_USR_O)
             ) @ #vk.4 )
        case S3_SKC_session_key_change
        solve( !KU( ~CDSK_j_USR_O ) @ #vk.7 )
          case S3_SKC_session_key_change
          solve( !KU( ~UK_i_USR_O ) @ #vk.11 )
            case Update_key_reveal
            by contradiction /* from formulas */
          qed
        next
          case cdsk_reveal
          by contradiction /* from formulas */
        qed
      next
        case c_senc
        solve( !KU( ~UK_i_USR_O ) @ #vk.9 )
          case Update_key_reveal
          by contradiction /* from formulas */
        qed
      qed
    next
      case U6_UKCC_Update_Key_Change_Confirmation
      solve( !KU( senc(<$USR, uk, ~CD_b>, ~AK) ) @ #vk.11 )
        case U3_U4_U5_new_update_key
        solve( !KU( senc(<CDSK, MDSK, KSQ, $USR, keystatus, CD_j>,
                         ~UK_i_USR_O)
               ) @ #vk.8 )
          case S3_SKC_session_key_change
          solve( !KU( ~CDSK_j_USR_O ) @ #vk.13 )
            case S3_SKC_session_key_change
            solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
              case U3_U4_U5_new_update_key
              solve( !KU( ~AK ) @ #vk.24 )
                case authority_key_reveal
                by contradiction /* from formulas */
              qed
            next
              case Update_key_reveal
              by contradiction /* from formulas */
            qed
          next
            case cdsk_reveal
            by contradiction /* from formulas */
          qed
        next
          case c_senc
          solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
            case U3_U4_U5_new_update_key
            solve( !KU( ~AK ) @ #vk.26 )
              case authority_key_reveal
              by contradiction /* from formulas */
            qed
          next
            case Update_key_reveal
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~AK ) @ #vk.14 )
          case authority_key_reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case case_2
  solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
         ) ▶₃ #i )
    case Initial_key_pre_distribution
    solve( !OutUpdateKey( ~oid, ~ou, uk ) ▶₄ #i )
      case Initial_key_pre_distribution
      solve( !KU( senc(<CDSK, MDSK, KSQ, $USR, keystatus, CD_j>,
                       ~UK_i_USR_O)
             ) @ #vk.4 )
        case S3_SKC_session_key_change
        solve( !KU( ~MDSK_j_USR_O ) @ #vk.7 )
          case S3_SKC_session_key_change
          solve( !KU( ~UK_i_USR_O ) @ #vk.11 )
            case Update_key_reveal
            by contradiction /* from formulas */
          qed
        next
          case mdsk_reveal
          by contradiction /* from formulas */
        qed
      next
        case c_senc
        solve( !KU( ~UK_i_USR_O ) @ #vk.10 )
          case Update_key_reveal
          by contradiction /* from formulas */
        qed
      qed
    next
      case U6_UKCC_Update_Key_Change_Confirmation
      solve( !KU( senc(<$USR, uk, ~CD_b>, ~AK) ) @ #vk.11 )
        case U3_U4_U5_new_update_key
        solve( !KU( senc(<CDSK, MDSK, KSQ, $USR, keystatus, CD_j>,
                         ~UK_i_USR_O)
               ) @ #vk.8 )
          case S3_SKC_session_key_change
          solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
            case S3_SKC_session_key_change
            solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
              case U3_U4_U5_new_update_key
              solve( !KU( ~AK ) @ #vk.24 )
                case authority_key_reveal
                by contradiction /* from formulas */
              qed
            next
              case Update_key_reveal
              by contradiction /* from formulas */
            qed
          next
            case mdsk_reveal
            by contradiction /* from formulas */
          qed
        next
          case c_senc
          solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
            case U3_U4_U5_new_update_key
            solve( !KU( ~AK ) @ #vk.26 )
              case authority_key_reveal
              by contradiction /* from formulas */
            qed
          next
            case Update_key_reveal
            by contradiction /* from formulas */
          qed
        qed
      next
        case c_senc
        solve( !KU( ~AK ) @ #vk.14 )
          case authority_key_reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma sessionkeys_sourced [reuse, use_induction]:
  all-traces
  "(¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ⇒
   (∀ linkid uk CDSK MDSK #i.
     ((¬(∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (#kr < #i))) ∧
      (Sourced_SKs( linkid, uk, CDSK, MDSK ) @ #i)) ⇒
     (∃ #j MDSK2.
       (#j < #i) ∧ (NewSKs( linkid, uk, CDSK, MDSK2 ) @ #j)))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∃ linkid uk CDSK MDSK #i.
   (Sourced_SKs( linkid, uk, CDSK, MDSK ) @ #i)
  ∧
   (∀ #kr. (UpdateKeyReveal( uk ) @ #kr) ⇒ ¬(#kr < #i)) ∧
   (∀ #j MDSK2.
     (NewSKs( linkid, uk, CDSK, MDSK2 ) @ #j) ⇒ ¬(#j < #i)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
         (∀ linkid uk CDSK MDSK #i.
           (Sourced_SKs( linkid, uk, CDSK, MDSK ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #kr.
              (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)) ∨
            (∃ #j MDSK2.
              (NewSKs( linkid, uk, CDSK, MDSK2 ) @ #j)
             ∧
              (¬(last(#j))) ∧ (#j < #i)))) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #kr.
             (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))  ∥
           (∃ #j MDSK2.
             (NewSKs( ~linkid, uk, CDSK, MDSK2 ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !OutUpdateKey( ~oid, ~ou, uk ) ▶₄ #i )
          case Initial_key_pre_distribution
          solve( !KU( senc(<CDSK, MDSK, KSQ, $USR, keystatus, CD_j>,
                           ~UK_i_USR_O)
                 ) @ #vk.4 )
            case S3_SKC_session_key_change
            by contradiction /* from formulas */
          next
            case c_senc
            solve( !KU( ~UK_i_USR_O ) @ #vk.8 )
              case Update_key_reveal
              by contradiction /* from formulas */
            qed
          qed
        next
          case U6_UKCC_Update_Key_Change_Confirmation
          solve( !KU( senc(<$USR, uk, ~CD_b>, ~AK) ) @ #vk.10 )
            case U3_U4_U5_new_update_key
            solve( !KU( senc(<CDSK, MDSK, KSQ, $USR, keystatus, CD_j>,
                             ~UK_i_USR_O)
                   ) @ #vk.8 )
              case S3_SKC_session_key_change
              solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.2)>, ~UK_i_USR_O)
                     ) @ #vk.15 )
                case U3_U4_U5_new_update_key
                by contradiction /* from formulas */
              next
                case U6_UKCC_Update_Key_Change_Confirmation
                by contradiction /* from formulas */
              next
                case c_hmac
                solve( !KU( ~UK_i_USR_O ) @ #vk.25 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( ~AK ) @ #vk.27 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_senc
              solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                case U3_U4_U5_new_update_key
                solve( !KU( ~AK ) @ #vk.26 )
                  case authority_key_reveal
                  by contradiction /* from formulas */
                qed
              next
                case Update_key_reveal
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_senc
            solve( !KU( ~AK ) @ #vk.13 )
              case authority_key_reveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma asdu_agreement_implies_mode_agreement [reuse]:
  all-traces
  "(¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ⇒
   (∀ linkid ar mode direction linkid2 mode2 direction2 #i #j.
     ((((∀ cdsk mdsk.
          (UsingSessKeys( cdsk, mdsk ) @ #i) ⇒
          (((∀ uk #k.
              (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k) ⇒
              (¬(∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (#kr < #i)))) ∧
            ((direction = 'control') ⇒
             (¬(∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (#skr < #i))))) ∧
           ((direction = 'monitor') ⇒
            (¬(∃ #skr. (MDSKReveal( mdsk ) @ #skr) ∧ (#skr < #i)))))) ∧
        (AuthASDU( linkid, ar, mode, direction ) @ #i)) ∧
       (SentASDU( linkid2, ar, mode2, direction2 ) @ #j)) ∧
      (#j < #i)) ⇒
     (((mode = mode2) ∧ (direction = direction2)) ∧
      (linkid = linkid2)))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∃ linkid ar mode direction linkid2 mode2 direction2 #i #j.
   (AuthASDU( linkid, ar, mode, direction ) @ #i) ∧
   (SentASDU( linkid2, ar, mode2, direction2 ) @ #j)
  ∧
   (∀ cdsk mdsk.
     (UsingSessKeys( cdsk, mdsk ) @ #i)
    ⇒
     (∀ uk #k.
       (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k)
      ⇒
       ∀ #kr. (UpdateKeyReveal( uk ) @ #kr) ⇒ ¬(#kr < #i)) ∧
     (((¬(direction = 'control')) ∨
       (∀ #skr. (CDSKReveal( cdsk ) @ #skr) ⇒ ¬(#skr < #i)))) ∧
     (((¬(direction = 'monitor')) ∨
       (∀ #skr. (MDSKReveal( mdsk ) @ #skr) ⇒ ¬(#skr < #i))))) ∧
   (#j < #i) ∧
   (((¬(mode = mode2)) ∨
     (¬(direction = direction2)) ∨
     (¬(linkid = linkid2)))))"
*/
simplify
solve( (¬(mode = mode2))  ∥ (¬(direction = direction2))  ∥
       (¬(linkid = linkid2)) )
  case case_1
  solve( AuthASDU( linkid, ar, mode, direction ) @ #i )
    case A4_idle_receive_C_AC_aggressive
    solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
           ) ▶₂ #i )
      case S4_SKS_session_key_status_case_1
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status_case_2
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case A4_idle_receive_M_AC_aggressive
    solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case A4_receive_C_AC_of_ASDU
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                              <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( SentASDU( linkid2,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Reply
            by contradiction /* from formulas */
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( SentASDU( linkid2,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Reply
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case A4_receive_M_AC_of_ASDU
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Reply
            by contradiction /* from formulas */
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Reply
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_C_AC_aggressive
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os,
                              <CSQ, h(CSQ), $USR, CD>, mCS, newChal
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            next
              case A3_M_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            next
              case A3_M_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_M_AC_aggressive
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               newChal
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            next
              case A3_M_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            next
              case A3_M_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( AuthASDU( linkid, ar, mode, direction ) @ #i )
    case A4_idle_receive_C_AC_aggressive
    solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
           ) ▶₂ #i )
      case S4_SKS_session_key_status_case_1
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                     CDSK_j_USR_O
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.16 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.25 )
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.28 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.13 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.19 )
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status_case_2
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                     CDSK_j_USR_O
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.17 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                             ) @ #vk.23 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.2)
                               ) @ #vk.25 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                                case U3_U4_U5_new_update_key
                                solve( !KU( ~AK ) @ #vk.44 )
                                  case authority_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.39 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.25 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.19 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.20 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                             ) @ #vk.26 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         UK_i_USR_O.3)
                               ) @ #vk.28 )
                          case c_senc
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.51 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.44 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.32 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_idle_receive_M_AC_aggressive
    solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1
                        ) ▶₃ #j )
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1
                        ) ▶₃ #j )
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case A4_receive_C_AC_of_ASDU
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                              <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( SentASDU( linkid2,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Reply
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                     CDSK_j_USR_O
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.17 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.12 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.2)
                         ) @ #vk.20 )
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( SentASDU( linkid2,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            by contradiction /* from formulas */
          next
            case A3_M_AR_Authentication_Reply
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                     CDSK_j_USR_O
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                           ) @ #vk.23 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.26 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.43 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.37 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.24 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.19 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                           ) @ #vk.26 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.3)
                             ) @ #vk.29 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.50 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.44 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.31 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_M_AC_of_ASDU
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1
                        ) ▶₂ #j )
            qed
          next
            case A3_M_AR_Authentication_Reply
            by contradiction /* from formulas */
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1
                        ) ▶₂ #j )
            qed
          next
            case A3_M_AR_Authentication_Reply
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_C_AC_aggressive
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os,
                              <CSQ, h(CSQ), $USR, CD>, mCS, newChal
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            next
              case A3_M_AR_Authentication_Aggressive
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                              ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                       CDSK_j_USR_O
                       ) ▶₃ #j )
                  case S4_SKS_session_key_status_case_1
                  solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.12 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.16 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case S4_SKS_session_key_status_case_2
                  solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.14 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.2)
                             ) @ #vk.19 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            next
              case A3_M_AR_Authentication_Aggressive
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                              ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                       CDSK_j_USR_O
                       ) ▶₃ #j )
                  case S4_SKS_session_key_status_case_1
                  solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                        keystatus, CD_j>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.17 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                               ) @ #vk.23 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                            keystatus.1, CD_j.1>,
                                           ~UK_i_USR_O.2)
                                 ) @ #vk.25 )
                            case c_senc
                            solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                              case Update_key_reveal
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                                  case U3_U4_U5_new_update_key
                                  solve( !KU( ~AK ) @ #vk.43 )
                                    case authority_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case Update_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.38 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.37 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.24 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case S4_SKS_session_key_status_case_2
                  solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.20 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                        keystatus, CD_j>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.20 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                               ) @ #vk.26 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                            keystatus.1, CD_j.1>,
                                           UK_i_USR_O.3)
                                 ) @ #vk.28 )
                            case c_senc
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                                case U3_U4_U5_new_update_key
                                solve( !KU( ~AK ) @ #vk.50 )
                                  case authority_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.44 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.31 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_M_AC_aggressive
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               newChal
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                           MDSK_j_USR_O.1
                          ) ▶₃ #j )
              qed
            next
              case A3_M_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                           MDSK_j_USR_O.1
                          ) ▶₃ #j )
              qed
            next
              case A3_M_AR_Authentication_Aggressive
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_3
  solve( AuthASDU( linkid, ar, mode, direction ) @ #i )
    case A4_idle_receive_C_AC_aggressive
    solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
           ) ▶₂ #i )
      case S4_SKS_session_key_status_case_1
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O,
                                      MDSK_j_USR_O.1
                     ) ▶₃ #j )
                case S3_SKC_session_key_change_case_1
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.22 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_2
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.13 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                     CDSK_j_USR_O
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.16 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.25 )
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.28 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.13 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.19 )
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status_case_2
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                           >,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O,
                                      MDSK_j_USR_O.1
                     ) ▶₃ #j )
                case S3_SKC_session_key_change_case_1
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   UK_i_USR_O)
                         ) @ #vk.14 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.18 )
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.26 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.30 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.41 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.39 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_2
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   UK_i_USR_O)
                         ) @ #vk.16 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.20 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( hmac(<$OSID, CD_a, ~CD_b, h(KSQ.2)>, ~UK_i_USR_O)
                             ) @ #vk.21 )
                        case U3_U4_U5_new_update_key
                        by contradiction /* from formulas */
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.35 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.31 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.3 ) @ #vk.41 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK.1 ) @ #vk.42 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.46 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.44 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                     CDSK_j_USR_O
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.17 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                             ) @ #vk.23 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.2)
                               ) @ #vk.25 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                                case U3_U4_U5_new_update_key
                                solve( !KU( ~AK ) @ #vk.44 )
                                  case authority_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.39 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.25 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.19 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.20 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                             ) @ #vk.26 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         UK_i_USR_O.3)
                               ) @ #vk.28 )
                          case c_senc
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.51 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.44 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.32 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_idle_receive_M_AC_aggressive
    solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1
                        ) ▶₃ #j )
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1,
                                     ~MDSK_j_USR_O
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.22 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.25 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.29 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.2)
                         ) @ #vk.18 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK.1) ) @ #vk.21 )
                      case c_senc
                      solve( !KU( ~AK.1 ) @ #vk.26 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.32 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.36 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1
                        ) ▶₃ #j )
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1,
                                     ~MDSK_j_USR_O
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O.1)
                         ) @ #vk.16 )
                    case U3_U4_U5_new_update_key
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.2)
                           ) @ #vk.23 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.33 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.40 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.41 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.27 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.29 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O.1)
                         ) @ #vk.18 )
                    case U3_U4_U5_new_update_key
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.3)
                           ) @ #vk.26 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b.1>, ~AK.1) ) @ #vk.29 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( hmac(<$OSID.1, ~CD_a, ~CD_b, h(KSQ.1)>, ~UK_i_USR_O)
                               ) @ #vk.26 )
                          case U3_U4_U5_new_update_key
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.34 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK.1 ) @ #vk.37 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.43 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.48 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.34 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.36 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_C_AC_of_ASDU
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                              <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( SentASDU( linkid2,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O,
                                      MDSK_j_USR_O.1
                     ) ▶₂ #j )
                case S3_SKC_session_key_change_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.12 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A3_M_AR_Authentication_Reply
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                     CDSK_j_USR_O
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.17 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.12 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.2)
                         ) @ #vk.20 )
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( SentASDU( linkid2,
                           <h(cCSQ), $USR, 
                            hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O,
                                      MDSK_j_USR_O.1
                     ) ▶₂ #j )
                case S3_SKC_session_key_change_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 UK_i_USR_O.1)
                       ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.25 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.29 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.40 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 UK_i_USR_O.1)
                       ) @ #vk.15 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.20 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( hmac(<$OSID, CD_a, ~CD_b, h(KSQ.2)>, ~UK_i_USR_O)
                           ) @ #vk.21 )
                      case U3_U4_U5_new_update_key
                      by contradiction /* from formulas */
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.34 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.30 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.3 ) @ #vk.40 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK.1 ) @ #vk.41 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.45 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.43 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A3_M_AR_Authentication_Reply
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                     CDSK_j_USR_O
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                           ) @ #vk.23 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.26 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.43 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.37 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.24 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.19 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                           ) @ #vk.26 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.3)
                             ) @ #vk.29 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.50 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.44 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.31 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_M_AC_of_ASDU
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1
                        ) ▶₂ #j )
            qed
          next
            case A3_M_AR_Authentication_Reply
            solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1,
                                     ~MDSK_j_USR_O
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 ~UK_i_USR_O.1)
                       ) @ #vk.17 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.21 )
                    case Update_key_reveal
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.24 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.28 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 UK_i_USR_O.2)
                       ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK.1) ) @ #vk.22 )
                    case c_senc
                    solve( !KU( ~AK.1 ) @ #vk.25 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.31 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, 
                            hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Reply
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1
                        ) ▶₂ #j )
            qed
          next
            case A3_M_AR_Authentication_Reply
            solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1,
                                            ~linkid.1
                   ) ▶₁ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1,
                                     ~MDSK_j_USR_O
                     ) ▶₂ #j )
                case S4_SKS_session_key_status_case_1
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O.1)
                       ) @ #vk.16 )
                  case U3_U4_U5_new_update_key
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.2)
                         ) @ #vk.24 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.32 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.40 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.26 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( ~AK ) @ #vk.28 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O.1)
                       ) @ #vk.17 )
                  case U3_U4_U5_new_update_key
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.3)
                         ) @ #vk.27 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b.1>, ~AK.1) ) @ #vk.30 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( hmac(<$OSID.1, ~CD_a, ~CD_b, h(KSQ.1)>, ~UK_i_USR_O)
                             ) @ #vk.27 )
                        case U3_U4_U5_new_update_key
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.33 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK.1 ) @ #vk.36 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.42 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.46 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.47 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.33 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( ~AK ) @ #vk.35 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_C_AC_aggressive
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os,
                              <CSQ, h(CSQ), $USR, CD>, mCS, newChal
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O,
                                        MDSK_j_USR_O.1
                       ) ▶₃ #j )
                  case S3_SKC_session_key_change_case_1
                  solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_C_AR_Authentication_Reply
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.12 )
                      case S3_SKC_session_key_change
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case S3_SKC_session_key_change_case_2
                  solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_C_AR_Authentication_Reply
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.14 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case A3_M_AR_Authentication_Aggressive
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                              ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                       CDSK_j_USR_O
                       ) ▶₃ #j )
                  case S4_SKS_session_key_status_case_1
                  solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.12 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.16 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case S4_SKS_session_key_status_case_2
                  solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.14 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.2)
                             ) @ #vk.19 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(CSQ), $USR, 
                              hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O,
                                        MDSK_j_USR_O.1
                       ) ▶₃ #j )
                  case S3_SKC_session_key_change_case_1
                  solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_C_AR_Authentication_Reply
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                      keystatus, CD_j>,
                                     UK_i_USR_O.1)
                           ) @ #vk.15 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.25 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.29 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                          case Update_key_reveal
                          solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.40 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case c_senc
                            solve( !KU( ~AK ) @ #vk.38 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case S3_SKC_session_key_change_case_2
                  solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_C_AR_Authentication_Reply
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                      keystatus, CD_j>,
                                     UK_i_USR_O.1)
                           ) @ #vk.17 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.20 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( hmac(<$OSID, CD_a, ~CD_b, h(KSQ.2)>, ~UK_i_USR_O)
                               ) @ #vk.21 )
                          case U3_U4_U5_new_update_key
                          by contradiction /* from formulas */
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.34 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.30 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O.3 ) @ #vk.40 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK.1 ) @ #vk.41 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.45 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case c_senc
                            solve( !KU( ~AK ) @ #vk.43 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case A3_M_AR_Authentication_Aggressive
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1,
                                              ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1,
                                       CDSK_j_USR_O
                       ) ▶₃ #j )
                  case S4_SKS_session_key_status_case_1
                  solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                        keystatus, CD_j>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.17 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                               ) @ #vk.23 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                            keystatus.1, CD_j.1>,
                                           ~UK_i_USR_O.2)
                                 ) @ #vk.25 )
                            case c_senc
                            solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                              case Update_key_reveal
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                                  case U3_U4_U5_new_update_key
                                  solve( !KU( ~AK ) @ #vk.43 )
                                    case authority_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case Update_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.38 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.37 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.24 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case S4_SKS_session_key_status_case_2
                  solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                         ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.20 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, 
                                        keystatus, CD_j>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.20 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                               ) @ #vk.26 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                            keystatus.1, CD_j.1>,
                                           UK_i_USR_O.3)
                                 ) @ #vk.28 )
                            case c_senc
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                                case U3_U4_U5_new_update_key
                                solve( !KU( ~AK ) @ #vk.50 )
                                  case authority_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.44 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.31 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_M_AC_aggressive
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               newChal
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                           MDSK_j_USR_O.1
                          ) ▶₃ #j )
              qed
            next
              case A3_M_AR_Authentication_Aggressive
              solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1,
                                              ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1,
                                       ~MDSK_j_USR_O
                       ) ▶₃ #j )
                  case S4_SKS_session_key_status_case_1
                  solve( !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.15 )
                      case S3_SKC_session_key_change
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.22 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.25 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O.1 ) @ #vk.29 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case S4_SKS_session_key_status_case_2
                  solve( !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.18 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK.1) ) @ #vk.21 )
                        case c_senc
                        solve( !KU( ~AK.1 ) @ #vk.26 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.32 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.36 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( SentASDU( linkid2,
                             <h(mCSQ), $USR, 
                              hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                             mode2, direction2
                   ) @ #j )
              case A3_C_AR_Authentication_Aggressive
              solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                           MDSK_j_USR_O.1
                          ) ▶₃ #j )
              qed
            next
              case A3_M_AR_Authentication_Aggressive
              solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1,
                                              ~linkid.1
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1,
                                       ~MDSK_j_USR_O
                       ) ▶₃ #j )
                  case S4_SKS_session_key_status_case_1
                  solve( !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O.1)
                           ) @ #vk.16 )
                      case U3_U4_U5_new_update_key
                      by contradiction /* from formulas */
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.23 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.33 )
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.40 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.41 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.27 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.29 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case S4_SKS_session_key_status_case_2
                  solve( !OutMCSInvariant( ~oid, ~os, ~cinv, mChal ) ▶₁ #j )
                    case A3_M_AR_Authentication_Reply
                    solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O.1)
                           ) @ #vk.18 )
                      case U3_U4_U5_new_update_key
                      by contradiction /* from formulas */
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.3)
                             ) @ #vk.26 )
                        case S3_SKC_session_key_change
                        solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b.1>, ~AK.1) ) @ #vk.29 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( hmac(<$OSID.1, ~CD_a, ~CD_b, h(KSQ.1)>, ~UK_i_USR_O)
                                 ) @ #vk.26 )
                            case U3_U4_U5_new_update_key
                            by contradiction /* from formulas */
                          next
                            case c_hmac
                            solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.34 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK.1 ) @ #vk.37 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.43 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.48 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.34 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.36 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma asdu_aliveness [use_induction,
                      hide_lemma=update_key_sourced]:
  all-traces
  "(¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ⇒
   (∀ linkid ar mode direction #i.
     ((∀ cdsk mdsk.
        (UsingSessKeys( cdsk, mdsk ) @ #i) ⇒
        (((∀ uk #k.
            (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k) ⇒
            (¬(∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (#kr < #i)))) ∧
          ((direction = 'control') ⇒
           (¬(∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (#skr < #i))))) ∧
         ((direction = 'monitor') ⇒
          (¬(∃ #skr. (MDSKReveal( mdsk ) @ #skr) ∧ (#skr < #i)))))) ∧
      (AuthASDU( linkid, ar, mode, direction ) @ #i)) ⇒
     (∃ #j.
       (SentASDU( linkid, ar, mode, direction ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∃ linkid ar mode direction #i.
   (AuthASDU( linkid, ar, mode, direction ) @ #i)
  ∧
   (∀ cdsk mdsk.
     (UsingSessKeys( cdsk, mdsk ) @ #i)
    ⇒
     (∀ uk #k.
       (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k)
      ⇒
       ∀ #kr. (UpdateKeyReveal( uk ) @ #kr) ⇒ ¬(#kr < #i)) ∧
     (((¬(direction = 'control')) ∨
       (∀ #skr. (CDSKReveal( cdsk ) @ #skr) ⇒ ¬(#skr < #i)))) ∧
     (((¬(direction = 'monitor')) ∨
       (∀ #skr. (MDSKReveal( mdsk ) @ #skr) ⇒ ¬(#skr < #i))))) ∧
   (∀ #j.
     (SentASDU( linkid, ar, mode, direction ) @ #j) ⇒ ¬(#j < #i)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
         (∀ linkid ar mode direction #i.
           (AuthASDU( linkid, ar, mode, direction ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ cdsk mdsk.
              (UsingSessKeys( cdsk, mdsk ) @ #i)
             ∧
              ((∃ uk #k.
                 (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k)
                ∧
                 (¬(last(#k))) ∧
                 (∃ #kr.
                   (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
               ((direction = 'control') ∧
                (∃ #skr.
                  (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
               ((direction = 'monitor') ∧
                (∃ #skr.
                  (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
            (∃ #j.
              (SentASDU( linkid, ar, mode, direction ) @ #j)
             ∧
              (¬(last(#j))) ∧ (#j < #i)))) )
    case case_1
    by contradiction /* from formulas */
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ cdsk mdsk.
             (UsingSessKeys( cdsk, mdsk ) @ #i)
            ∧
             ((∃ uk #k.
                (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k)
               ∧
                (¬(last(#k))) ∧
                (∃ #kr.
                  (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
              ((direction = 'control') ∧
               (∃ #skr.
                 (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
              ((direction = 'monitor') ∧
               (∃ #skr.
                 (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
           (∃ #j.
             (SentASDU( linkid, ar, mode, direction ) @ #j)
            ∧
             (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( AuthASDU( linkid, ar, mode, direction ) @ #i )
        case A4_idle_receive_C_AC_aggressive
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
               ) ▶₂ #i )
          case S4_SKS_session_key_status_case_1
          solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
                 ) ▶₃ #i )
            case Initial_key_pre_distribution
            solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
              case A2_C_AC_Authentication_Challenge
              solve( !KU( hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>,
                               CDSK_j_USR_O)
                     ) @ #vk.6 )
                case A3_C_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.10 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.22 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.10 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.18 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.25 )
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.28 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.2)
                         ) @ #vk.21 )
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.10 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.24 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.22 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
                 ) ▶₃ #i )
            case Initial_key_pre_distribution
            solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
              case A2_C_AC_Authentication_Challenge
              solve( !KU( hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>,
                               CDSK_j_USR_O)
                     ) @ #vk.8 )
                case A3_C_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.13 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.18 )
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.26 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.30 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.41 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.39 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.20 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( hmac(<$OSID, CD_a, ~CD_b, h(KSQ.2)>, ~UK_i_USR_O)
                           ) @ #vk.21 )
                      case U3_U4_U5_new_update_key
                      by contradiction /* from formulas */
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.35 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.31 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.3 ) @ #vk.41 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK.1 ) @ #vk.42 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.44 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.16 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                           ) @ #vk.23 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.27 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.44 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.39 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.38 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.25 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.19 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                           ) @ #vk.26 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.3)
                             ) @ #vk.30 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.51 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.44 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.46 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.45 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.32 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.16 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.25 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.37 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.39 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.27 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case A4_idle_receive_M_AC_aggressive
        solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
          case Initial_key_pre_distribution
          solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
                 ) ▶₃ #i )
            case S3_SKC_session_key_change_case_1
            solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
              case A2_M_AC_Authentication_Challenge
              solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                     ) @ #vk.6 )
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                  keystatus.1, CD_j.1>,
                                 ~UK_i_USR_O.1)
                       ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.23 )
                    case Update_key_reveal
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.26 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                  keystatus.1, CD_j.1>,
                                 UK_i_USR_O.2)
                       ) @ #vk.21 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK.1) ) @ #vk.23 )
                    case c_senc
                    solve( !KU( ~AK.1 ) @ #vk.26 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.33 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.18 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case S3_SKC_session_key_change_case_2
            solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
              case A2_M_AC_Authentication_Challenge
              solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                     ) @ #vk.8 )
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O.1)
                       ) @ #vk.13 )
                  case U3_U4_U5_new_update_key
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.2)
                         ) @ #vk.26 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.34 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.41 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.42 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.28 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( ~AK ) @ #vk.30 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O.1)
                       ) @ #vk.13 )
                  case U3_U4_U5_new_update_key
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.3)
                         ) @ #vk.29 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b.1>, ~AK.1)
                           ) @ #vk.31 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( hmac(<$OSID.1, ~CD_a, ~CD_b, h(KSQ)>, ~UK_i_USR_O.1)
                             ) @ #vk.28 )
                        case U3_U4_U5_new_update_key
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.32 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.34 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK.1 ) @ #vk.37 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.44 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.48 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.49 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( ~AK ) @ #vk.37 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.18 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.23 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( ~AK ) @ #vk.24 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case A4_receive_C_AC_of_ASDU
        solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                                  <CSQ, CSQ, $USR, CD>
               ) ▶₁ #i )
          case A2_C_AC_Authentication_Challenge
          solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
                 ) ▶₂ #i )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
                   ) ▶₃ #i )
              case S4_SKS_session_key_status_case_1
              solve( !KU( hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>,
                               CDSK_j_USR_O)
                     ) @ #vk.5 )
                case A3_C_AR_Authentication_Reply_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Reply_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.12 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.17 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.12 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.2)
                         ) @ #vk.20 )
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !KU( hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>,
                               CDSK_j_USR_O)
                     ) @ #vk.6 )
                case A3_C_AR_Authentication_Reply_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 UK_i_USR_O.1)
                       ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.25 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.29 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.40 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Reply_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                  keystatus, CD_j>,
                                 UK_i_USR_O.1)
                       ) @ #vk.15 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.20 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( hmac(<$OSID, CD_a, ~CD_b, h(KSQ.2)>, ~UK_i_USR_O)
                           ) @ #vk.21 )
                      case U3_U4_U5_new_update_key
                      by contradiction /* from formulas */
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.34 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.30 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.3 ) @ #vk.40 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK.1 ) @ #vk.41 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.45 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.43 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                           ) @ #vk.23 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.26 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.43 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.37 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.24 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.19 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                           ) @ #vk.26 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.3)
                             ) @ #vk.29 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.50 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.44 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.31 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.24 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.34 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.36 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.24 )
                    case authority_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case A4_receive_M_AC_of_ASDU
        solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                                   <CSQ, CSQ, $USR, CD>
               ) ▶₁ #i )
          case A2_M_AC_Authentication_Challenge
          solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid ) ▶₂ #i )
            case Initial_key_pre_distribution
            solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
                   ) ▶₃ #i )
              case S3_SKC_session_key_change_case_1
              solve( !KU( hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>,
                               ~MDSK_j_USR_O)
                     ) @ #vk.5 )
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 ~UK_i_USR_O.1)
                       ) @ #vk.17 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.21 )
                    case Update_key_reveal
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.24 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.28 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 UK_i_USR_O.2)
                       ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK.1) ) @ #vk.22 )
                    case c_senc
                    solve( !KU( ~AK.1 ) @ #vk.25 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.31 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.18 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S3_SKC_session_key_change_case_2
              solve( !KU( hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>,
                               ~MDSK_j_USR_O)
                     ) @ #vk.6 )
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O.1)
                       ) @ #vk.16 )
                  case U3_U4_U5_new_update_key
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.2)
                         ) @ #vk.24 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.32 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.40 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.26 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( ~AK ) @ #vk.28 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O.1)
                       ) @ #vk.17 )
                  case U3_U4_U5_new_update_key
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.3)
                         ) @ #vk.27 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b.1>, ~AK.1) ) @ #vk.30 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( hmac(<$OSID.1, ~CD_a, ~CD_b, h(KSQ)>, ~UK_i_USR_O)
                             ) @ #vk.27 )
                        case U3_U4_U5_new_update_key
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.33 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK.1 ) @ #vk.36 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.42 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.46 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.47 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.33 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( ~AK ) @ #vk.35 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.23 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( ~AK ) @ #vk.24 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case A4_waiting_receive_C_AC_aggressive
        solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os,
                                  <CSQ, h(CSQ), $USR, CD>, mCS, newChal
               ) ▶₁ #i )
          case A2_C_AC_Authentication_Challenge
          solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid
                 ) ▶₂ #i )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
                   ) ▶₃ #i )
              case S4_SKS_session_key_status_case_1
              solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
                case A2_C_AC_Authentication_Challenge
                solve( !KU( hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>,
                                 CDSK_j_USR_O)
                       ) @ #vk.6 )
                  case A3_C_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.12 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.17 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.12 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.20 )
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.16 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
                case A2_C_AC_Authentication_Challenge
                solve( !KU( hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>,
                                 CDSK_j_USR_O)
                       ) @ #vk.8 )
                  case A3_C_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   UK_i_USR_O.1)
                         ) @ #vk.14 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.25 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.29 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.40 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.38 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                    keystatus, CD_j>,
                                   UK_i_USR_O.1)
                         ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.20 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( hmac(<$OSID, CD_a, ~CD_b, h(KSQ.2)>, ~UK_i_USR_O)
                             ) @ #vk.21 )
                        case U3_U4_U5_new_update_key
                        by contradiction /* from formulas */
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.34 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.30 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.3 ) @ #vk.40 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK.1 ) @ #vk.41 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.43 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.17 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.17 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                             ) @ #vk.23 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.2)
                               ) @ #vk.26 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                                case U3_U4_U5_new_update_key
                                solve( !KU( ~AK ) @ #vk.43 )
                                  case authority_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.38 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.37 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.24 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.18 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.19 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                             ) @ #vk.26 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         UK_i_USR_O.3)
                               ) @ #vk.29 )
                          case c_senc
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                              case U3_U4_U5_new_update_key
                              solve( !KU( ~AK ) @ #vk.50 )
                                case authority_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.45 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.44 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.31 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( senc(<$USR, UK_i_USR_O.1, ~CD_b>, ~AK) ) @ #vk.17 )
                    case U3_U4_U5_new_update_key
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, 
                                      keystatus, CD_j>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.18 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.25 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.35 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.36 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.26 )
                      case authority_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case A4_waiting_receive_M_AC_aggressive
        solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                                   newChal
               ) ▶₁ #i )
          case A2_M_AC_Authentication_Challenge
          solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid
                 ) ▶₂ #i )
            case Initial_key_pre_distribution
            solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O
                   ) ▶₃ #i )
              case S3_SKC_session_key_change_case_1
              solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
                case A2_M_AC_Authentication_Challenge
                solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                       ) @ #vk.6 )
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.19 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.23 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.26 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.30 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.2)
                         ) @ #vk.21 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b>, ~AK.1) ) @ #vk.23 )
                      case c_senc
                      solve( !KU( ~AK.1 ) @ #vk.26 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.33 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.37 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.18 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S3_SKC_session_key_change_case_2
              solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
                case A2_M_AC_Authentication_Challenge
                solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                       ) @ #vk.8 )
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O.1)
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.2)
                           ) @ #vk.26 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.34 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.42 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.28 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.30 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O.1)
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.3)
                           ) @ #vk.29 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<$USR, ~UK_i_USR_O, ~CD_b.1>, ~AK.1) ) @ #vk.31 )
                        case U3_U4_U5_new_update_key
                        solve( !KU( hmac(<$OSID.1, ~CD_a, ~CD_b, h(KSQ)>, ~UK_i_USR_O)
                               ) @ #vk.28 )
                          case U3_U4_U5_new_update_key
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                            case U3_U4_U5_new_update_key
                            solve( !KU( ~AK ) @ #vk.34 )
                              case authority_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK.1 ) @ #vk.37 )
                          case authority_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.44 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.48 )
                          case U3_U4_U5_new_update_key
                          solve( !KU( ~AK ) @ #vk.49 )
                            case authority_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.37 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.18 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.23 )
                      case U3_U4_U5_new_update_key
                      solve( !KU( ~AK ) @ #vk.24 )
                        case authority_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( (∃ uk #k.
               (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k)
              ∧
               (¬(last(#k))) ∧
               (∃ #kr.
                 (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
             ((direction = 'control') ∧
              (∃ #skr.
                (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))  ∥
             ((direction = 'monitor') ∧
              (∃ #skr.
                (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      qed
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma asdu_injective_agreement:
  all-traces
  "(¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ⇒
   (∀ linkid ar mode direction #i #j.
     ((((∀ cdsk mdsk.
          (UsingSessKeys( cdsk, mdsk ) @ #i) ⇒
          (((∀ uk #k.
              (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k) ⇒
              (¬(∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (#kr < #i)))) ∧
            ((direction = 'control') ⇒
             (¬(∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (#skr < #i))))) ∧
           ((direction = 'monitor') ⇒
            (¬(∃ #skr. (MDSKReveal( mdsk ) @ #skr) ∧ (#skr < #i)))))) ∧
        (AuthASDU( linkid, ar, mode, direction ) @ #i)) ∧
       (SentASDU( linkid, ar, mode, direction ) @ #j)) ∧
      (#j < #i)) ⇒
     (¬(∃ #k.
         (AuthASDU( linkid, ar, mode, direction ) @ #k) ∧ (¬(#k = #i)))))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∃ linkid ar mode direction #i #j.
   (AuthASDU( linkid, ar, mode, direction ) @ #i) ∧
   (SentASDU( linkid, ar, mode, direction ) @ #j)
  ∧
   (∀ cdsk mdsk.
     (UsingSessKeys( cdsk, mdsk ) @ #i)
    ⇒
     (∀ uk #k.
       (UpdateKeyUsedForSKs( linkid, uk, cdsk, mdsk ) @ #k)
      ⇒
       ∀ #kr. (UpdateKeyReveal( uk ) @ #kr) ⇒ ¬(#kr < #i)) ∧
     (((¬(direction = 'control')) ∨
       (∀ #skr. (CDSKReveal( cdsk ) @ #skr) ⇒ ¬(#skr < #i)))) ∧
     (((¬(direction = 'monitor')) ∨
       (∀ #skr. (MDSKReveal( mdsk ) @ #skr) ⇒ ¬(#skr < #i))))) ∧
   (#j < #i) ∧
   (∃ #k.
     (AuthASDU( linkid, ar, mode, direction ) @ #k) ∧ ¬(#k = #i)))"
*/
simplify
by contradiction /* from formulas */

/* All well-formedness checks were successful. */

end