theory DNP3AsymmProven begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, h/1, hmac/2, pair/2, pk/1, sdec/2,
           senc/2, sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

/*
looping facts with injective instances:
  L_OutSentKeyStatus/2, L_OutstationState/7, L_UserState/6
*/

restriction Eq_testing:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction InEq_testing:
  "∀ x y #i. (InEq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

restriction Unique_Pairings_id:
  "∀ x #i #j. ((Unique( x ) @ #i) ∧ (Unique( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction USR_and_OutstationID_distinct:
  "∀ x y #i.
    (Distinct( x, y ) @ #i) ⇒
    ((¬(∃ #j z. Distinct( y, z ) @ #j)) ∧
     (¬(∃ #j z. Distinct( z, x ) @ #j)))"
  // safety formula

rule (modulo E) Update_key_reveal:
   [ !F_UpdateKey( ~linkid, k ) ] --[ UpdateKeyReveal( k ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) cdsk_reveal:
   [ !CDSKToReveal( k1 ) ] --[ CDSKReveal( k1 ) ]-> [ Out( k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) mdsk_reveal:
   [ !MDSKToReveal( k1 ) ] --[ MDSKReveal( k1 ) ]-> [ Out( k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) authority_symm_key_reveal:
   [ !F_AuthorityKey( k1 ) ] --[ AuthorityKeyReveal( k1 ) ]-> [ Out( k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) user_asymm_priv_key_reveal:
   [ !UserPrivateKey( k1 ) ]
  --[ UserPrivateKeyReveal( k1 ) ]->
   [ Out( k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) outstation_asymm_priv_key_reveal:
   [ !OutstationPrivateKey( k1 ) ]
  --[ OutstationPrivateKeyReveal( k1 ) ]->
   [ Out( k1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Authority_Symm_Key:
   [ Fr( ~AK ) ] --[ AuthorityCertKey( ~AK ) ]-> [ !F_AuthorityKey( ~AK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CountUp:
   [ L_Counter( ~id, val ) ]
  --[ NewCounterValue( ~id, h(val) ) ]->
   [ L_Counter( ~id, h(val) ), L_XCounterValue( ~id, h(val) ), Out( h(val) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A2_C_AC_Authentication_Challenge:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>, mCS,
                      'SecurityIdle'
   ),
   L_XCounterValue( ~oid, h(cCSQ) ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~CD )
   ]
  --[
  CSQ( ~oid, h(cCSQ) ), A2_nonaggressive( ~oid, 'control', ~CD ),
  A2_trace( ~oid )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>, mCS,
                      <'WaitForReply', h(cCSQ), h(cCSQ), $USR, ~CD>
   ),
   F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>, mCS,
                      <h(cCSQ), h(cCSQ), $USR, ~CD>
   ),
   !F_OutCCSInvariant( ~oid, ~os, <h(cCSQ), $USR, ~CD> ),
   Out( <h(cCSQ), $USR, ~CD> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A2_M_AC_Authentication_Challenge:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, 'SecurityIdle' ),
   L_XCounterValue( ~uid, h(mCSQ) ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~CD )
   ]
  --[
  CSQ( ~uid, h(mCSQ) ), A2_nonaggressive( ~uid, 'monitor', ~CD ),
  A2_M_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                <'WaitForReply', h(mCSQ), h(mCSQ), $USR, ~CD>
   ),
   F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                       <h(mCSQ), h(mCSQ), $USR, ~CD>
   ),
   !F_UserMCSInvariant( ~uid, ~us, <h(mCSQ), $USR, ~CD> ),
   Out( <h(mCSQ), $USR, ~CD> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S3_SKC_session_key_change:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SessionKeyChange' ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !UserUpdateKey( ~uid, ~uu, UK_i_USR_O, update_key_method, auth_keys_used
   ),
   Fr( ~CDSK_j_USR_O ), Fr( ~MDSK_j_USR_O ), Fr( ~newus ),
   In( <KSQ, $USR, keystatus, CD_j> )
   ]
  --[
  SessKeys( ~CDSK_j_USR_O, ~MDSK_j_USR_O, $USR ),
  NewSKs( ~linkid, UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
          update_key_method, auth_keys_used
  ),
  Sourced_UpdateKey( ~linkid, UK_i_USR_O, update_key_method, auth_keys_used
  ),
  Sourced_UpdateKey_S3_for_new_lemma( ~linkid, UK_i_USR_O,
                                      update_key_method, auth_keys_used
  ),
  UpdateKeyUsedForSKs( ~linkid, UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                       update_key_method, auth_keys_used
  ),
  S3( ~uid, ~CDSK_j_USR_O, ~MDSK_j_USR_O ), S3_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~newus, cCS, mCS,
                <'WaitForKeyChangeConfirmation', 
                 <KSQ, $USR, 
                  senc(<~CDSK_j_USR_O, ~MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
                       UK_i_USR_O)
                 >, 
                 ~CDSK_j_USR_O, ~MDSK_j_USR_O>
   ),
   !F_UserSessKeys( ~uid, ~newus, 'OK', ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                    UK_i_USR_O, update_key_method, auth_keys_used
   ),
   !CDSKToReveal( ~CDSK_j_USR_O ), !MDSKToReveal( ~MDSK_j_USR_O ),
   Out( <KSQ, $USR, 
         senc(<~CDSK_j_USR_O, ~MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
              UK_i_USR_O)
        >
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S4_SKS_session_key_status:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>, <mCSQ, mChal>,
                      'SecurityIdle'
   ),
   L_XCounterValue( ~oid, h(cCSQ) ),
   L_OutSentKeyStatus( ~oid, <KSQ, $USR, keystatus, CD_j> ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !OutUpdateKey( ~oid, ~ou, UK_i_USR_O, update_key_method, auth_keys_used
   ),
   Fr( ~CD_j_plus_1 ), Fr( ~newos ),
   In( <KSQ, $USR, 
        senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
             UK_i_USR_O)
       >
   )
   ]
  --[
  GotSessKeysOutSt( ~linkid, CDSK_j_USR_O, MDSK_j_USR_O, $USR ),
  CSQ( ~oid, h(cCSQ) ),
  Sourced_UpdateKey( ~linkid, UK_i_USR_O, update_key_method, auth_keys_used
  ),
  Sourced_SKs( ~linkid, UK_i_USR_O, CDSK_j_USR_O, MDSK_j_USR_O,
               update_key_method, auth_keys_used
  ),
  UpdateKeyUsedForSKs( ~linkid, UK_i_USR_O, CDSK_j_USR_O, MDSK_j_USR_O,
                       update_key_method, auth_keys_used
  ),
  S4_trace( ~oid )
  ]->
   [
   L_OutstationState( ~oid, h(KSQ), ~ou, ~newos, <h(cCSQ), 'none'>,
                      <h(mCSQ), 'none'>, 'SecurityIdle'
   ),
   L_OutSentKeyStatus( ~oid,
                       <h(KSQ), $USR, 'OK', ~CD_j_plus_1, 
                        hmac(<KSQ, $USR, 
                              senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
                                   UK_i_USR_O)
                             >,
                             MDSK_j_USR_O)
                       >
   ),
   !F_OutSessKeys( ~oid, ~newos, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                   UK_i_USR_O, update_key_method, auth_keys_used
   ),
   Out( <h(KSQ), $USR, 'OK', ~CD_j_plus_1, 
         hmac(<KSQ, $USR, 
               senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ, $USR, keystatus, CD_j>,
                    UK_i_USR_O)
              >,
              MDSK_j_USR_O)
        >
   )
   ]

  // loop breakers: [0,2]
  /* has exactly the trivial AC variant */

rule (modulo E) U2_UKCRp_Key_Change_Reply:
   [
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~CD_b )
   ]
  --[
  OutUpdateKeyChallengeActionFact( ~oid, ~linkid, ~CD_b ), U2_trace( ~oid )
  ]->
   [ OutUpdateKeyChallenge( ~oid, ~CD_b ), Out( <$USR, ~CD_b> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) U3_U4_U5_new_update_key_symmetric_mode:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SecurityIdle' ),
   !F_UserInvariants( ~uid, ~AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_AuthorityKey( ~AK ), Fr( ~CD_a ), Fr( ~UK_i_USR_O ),
   In( <KSQ, $USR, CD_b> )
   ]
  --[
  NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ),
  U345_symm_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS,
                <'WaitForKCC', hmac(<$OSID, ~CD_a, CD_b, KSQ>, ~UK_i_USR_O)>
   ),
   F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                 hmac(<$OSID, ~CD_a, CD_b, KSQ>, ~UK_i_USR_O)
   ),
   !F_UpdateKey( ~linkid, ~UK_i_USR_O ),
   Out( <~CD_a, <KSQ, $USR, senc(<$USR, ~UK_i_USR_O, CD_b>, ~AK)>, 
         hmac(<$OSID, ~CD_a, CD_b, KSQ>, ~UK_i_USR_O)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) U3_U4_U5_new_update_key_asymmetric_mode:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SecurityIdle' ),
   !F_UserInvariants( ~uid, ~AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~CD_a ), Fr( ~UK_i_USR_O ), In( <KSQ, $USR, CD_b> )
   ]
  --[
  NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Asymmetric',
                <~outstation_priv_key, ~user_priv_key>
  ),
  LinkAndOutstationPrivKey( ~linkid, ~outstation_priv_key ),
  U345_asymm_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS,
                <'WaitForKCC', 
                 sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
                       aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
                      ~user_priv_key)
                >
   ),
   F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                 sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
                       aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
                      ~user_priv_key)
   ),
   !F_UpdateKey( ~linkid, ~UK_i_USR_O ),
   Out( <~CD_a, 
         <KSQ, $USR, aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>, 
         sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
               aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
              ~user_priv_key)
        >
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S5_receive_SKS_confirmation:
   [
   L_UserState( ~uid, ~uu, ~us, <cCSQ, cChal>, <mCSQ, cChal>,
                <'WaitForKeyChangeConfirmation', SKCM_j, CDSK_j_USR_O, MDSK_j_USR_O>
   ),
   L_XCounterValue( ~uid, h(mCSQ) ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~cid ),
   In( <KSQ, $USR, 'OK', CD_j_plus_1, hmac(SKCM_j, MDSK_j_USR_O)> )
   ]
  --[
  GotSessKeysUser( ~linkid, CDSK_j_USR_O, MDSK_j_USR_O, $USR ),
  CSQ( ~uid, h(mCSQ) ), S5( ~uid, 'control', CDSK_j_USR_O, MDSK_j_USR_O ),
  S5_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, <h(cCSQ), 'none'>, <h(mCSQ), 'none'>,
                'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Initial_key_pre_distribution:
   [
   !F_AuthorityKey( ~AK ), Fr( ~UK_i_USR_O ), Fr( ~uid ), Fr( ~oid ),
   Fr( ~uu ), Fr( ~ou ), Fr( ~us ), Fr( ~os ), Fr( ~linkid ),
   Fr( ~user_priv_key ), Fr( ~outstation_priv_key )
   ]
  --[
  Unique( <~AK, $USR, $OUTSTATION> ), Unique( <~AK, $OUTSTATION, $USR> ),
  Distinct( $USR, $OUTSTATION ), AuthorityCertKey( ~AK ),
  NewCounterValue( ~uid, '0' ), NewCounterValue( ~oid, '0' ),
  NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Initial', 'usb_stick' ),
  InitialA3( ~uid ), InitialA3( ~oid ),
  Sourced_UpdateKey_for_skiup_lemma( ~linkid, ~UK_i_USR_O, 'Initial',
                                     'usb_stick'
  ),
  Initial( ~oid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, <'0', 'none'>, <'0', 'none'>, 'Init' ),
   L_OutstationState( ~oid, '0', ~ou, ~os, <'0', 'none'>, <'0', 'none'>,
                      'SecurityIdle'
   ),
   !F_UserInvariants( ~uid, ~AK, $USR, $OUTSTATION, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_OutstationInvariants( ~oid, ~AK, $USR, $OUTSTATION, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !UserUpdateKey( ~uid, ~uu, ~UK_i_USR_O, 'Initial', 'usb_stick' ),
   !OutUpdateKey( ~oid, ~ou, ~UK_i_USR_O, 'Initial', 'usb_stick' ),
   !F_UserSessKeys( ~uid, ~us, 'NOT_INIT', 'undefined', 'undefined',
                    ~UK_i_USR_O, 'Initial', 'usb_stick'
   ),
   !F_OutSessKeys( ~oid, ~os, 'NOT_INIT', 'undefined', 'undefined',
                   ~UK_i_USR_O, 'Initial', 'usb_stick'
   ),
   L_OutSentKeyStatus( ~oid, 'none' ), L_Counter( ~uid, '0' ),
   L_Counter( ~oid, '0' ), !F_UpdateKey( ~linkid, ~UK_i_USR_O ),
   !UserPrivateKey( ~user_priv_key ),
   !OutstationPrivateKey( ~outstation_priv_key )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) S1_SKSR_session_key_status_request:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, anystate ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   )
   ]
  --[ S1_trace( ~uid ) ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SessionKeyChange' ), Out( $USR )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) S2_SKS_session_key_status:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <cCSQ, cChal>, <mCSQ, mChal>,
                      'SecurityIdle'
   ),
   L_OutSentKeyStatus( ~oid, lastkeystatus ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_OutSessKeys( ~oid, ~os, keystatus, CDSK, MDSK, UK_i_USR_O,
                   update_key_method, auth_keys_used
   ),
   Fr( ~CD_j ), In( $USR )
   ]
  --[ S2_trace( ~oid ) ]->
   [
   L_OutstationState( ~oid, h(KSQ), ~ou, ~os, <cCSQ, cChal>, <mCSQ, mChal>,
                      'SecurityIdle'
   ),
   L_OutSentKeyStatus( ~oid, <h(KSQ), $USR, keystatus, ~CD_j> ),
   Out( <h(KSQ), $USR, keystatus, ~CD_j> )
   ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) A3_C_AR_Authentication_Reply:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, 'SecurityIdle' ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                    update_key_method, auth_keys_used
   ),
   Fr( ~cinvar ), In( <CSQ, $USR, CD> )
   ]
  --[
  SentASDU( ~linkid,
            <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)>, 'normal',
            'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  A3_session_keys( ~linkid, CDSK_j_USR_O, MDSK_j_USR_O, update_key_method,
                   auth_keys_used
  ),
  AuthReply( <CSQ, $USR, CD>, $ASDU, CDSK_j_USR_O ),
  A3( ~uid, 'control', CDSK_j_USR_O, MDSK_j_USR_O ),
  A3_nonaggressive( ~uid, 'control', CDSK_j_USR_O, MDSK_j_USR_O, CD ),
  A3_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, <CSQ, ~cinvar, CSQ, $USR, CD>, mCS,
                'SecurityIdle'
   ),
   !UserCCSInvariant( ~uid, ~us, ~cinvar, <CSQ, $USR, CD> ),
   Out( <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A3_C_AR_Authentication_Aggressive:
   [
   L_UserState( ~uid, ~uu, ~us, <cCSQ, ~cinv, CSQ, $USR, CD>, mCS,
                'SecurityIdle'
   ),
   !UserCCSInvariant( ~uid, ~us, ~cinv, <CSQ, $USR, CD> ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                    update_key_method, auth_keys_used
   )
   ]
  --[
  SentASDU( ~linkid,
            <h(cCSQ), $USR, 
             hmac(<'amode', h(cCSQ), <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)>,
            'aggressive', 'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  AuthReply( <CSQ, $USR, CD>, $ASDU, CDSK_j_USR_O ),
  A3( ~uid, 'control', CDSK_j_USR_O, MDSK_j_USR_O ),
  A3_aggressive( ~uid, 'control', CDSK_j_USR_O, MDSK_j_USR_O, CD ),
  A3_Aggr_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, <h(cCSQ), ~cinv, CSQ, $USR, CD>, mCS,
                'SecurityIdle'
   ),
   Out( <h(cCSQ), $USR, 
         hmac(<'amode', h(cCSQ), <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A4_receive_C_AC_of_ASDU:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                      <'WaitForReply', CSQ, CSQ, $USR, CD>
   ),
   F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS, <CSQ, CSQ, $USR, CD> ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                   update_key_method, auth_keys_used
   ),
   In( <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)> )
   ]
  --[
  AuthASDU( ~linkid,
            <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, CDSK_j_USR_O)>, 'normal',
            'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  A4_C_FINISH( ), A4_trace( ~oid )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <CSQ, CSQ, $USR, CD>, mCS,
                      'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A4_idle_receive_C_AC_aggressive:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <CSQ, AC>, mCS, 'SecurityIdle' ),
   L_XCounterValue( ~oid, h(CSQ) ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                   update_key_method, auth_keys_used
   ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_OutCCSInvariant( ~oid, ~os, AC ),
   In( <h(CSQ), $USR, hmac(<'amode', h(CSQ), AC, $ASDU>, CDSK_j_USR_O)> )
   ]
  --[
  AuthASDU( ~linkid,
            <h(CSQ), $USR, hmac(<'amode', h(CSQ), AC, $ASDU>, CDSK_j_USR_O)>,
            'aggressive', 'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  CSQ( ~oid, h(CSQ) ), InEq( AC, 'none' ), A4_idle_aggr_receive( ~oid )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <h(CSQ), AC>, mCS, 'SecurityIdle'
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A4_waiting_receive_C_AC_aggressive:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <CSQ, h(CSQ), $USR, CD>, mCS,
                      <'WaitForReply', newChal>
   ),
   F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, <CSQ, h(CSQ), $USR, CD>, mCS,
                      newChal
   ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                   update_key_method, auth_keys_used
   ),
   !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ),
   In( <h(CSQ), $USR, 
        hmac(<'amode', h(CSQ), <h(CSQ), $USR, CD>, $ASDU>, CDSK_j_USR_O)>
   )
   ]
  --[
  AuthASDU( ~linkid,
            <h(CSQ), $USR, 
             hmac(<'amode', h(CSQ), <h(CSQ), $USR, CD>, $ASDU>, CDSK_j_USR_O)>,
            'aggressive', 'control'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  InEq( <h(CSQ), $USR, CD>, 'none' ), A4_waiting_aggr_receive( ~oid )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, <h(CSQ), h(CSQ), $USR, CD>, mCS,
                      'SecurityIdle'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_OutstationWaitForReply_TimeoutorError:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                      <'WaitForReply', newChal>
   ),
   F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS, newChal )
   ]
  -->
   [ L_OutstationState( ~oid, KSQ, ~ou, ~os, newChal, mCS, 'SecurityIdle' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A3_M_AR_Authentication_Reply:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS, 'SecurityIdle' ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                   update_key_method, auth_keys_used
   ),
   Fr( ~cinv ), In( <CSQ, $USR, CD> )
   ]
  --[
  SentASDU( ~linkid,
            <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)>, 'normal',
            'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  AuthReply( <CSQ, $USR, CD>, $ASDU, MDSK_j_USR_O ),
  A3( ~oid, 'monitor', CDSK_j_USR_O, MDSK_j_USR_O ),
  A3_nonaggressive( ~oid, 'monitor', CDSK_j_USR_O, MDSK_j_USR_O, CD ),
  A3_M_trace( ~oid )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, <CSQ, ~cinv, CSQ, $USR, CD>,
                      'SecurityIdle'
   ),
   !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ),
   Out( <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A3_M_AR_Authentication_Aggressive:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS,
                      <mCSQ, ~cinv, CSQ, $USR, CD>, 'SecurityIdle'
   ),
   !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                   update_key_method, auth_keys_used
   )
   ]
  --[
  SentASDU( ~linkid,
            <h(mCSQ), $USR, 
             hmac(<'amode', h(mCSQ), <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)>,
            'aggressive', 'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  AuthReply( <CSQ, $USR, CD>, $ASDU, MDSK_j_USR_O ),
  A3( ~oid, 'monitor', CDSK_j_USR_O, MDSK_j_USR_O ),
  A3_aggressive( ~oid, 'monitor', CDSK_j_USR_O, MDSK_j_USR_O, CD ),
  A3_M_Aggr_trace( ~oid )
  ]->
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS,
                      <h(mCSQ), ~cinv, CSQ, $USR, CD>, 'SecurityIdle'
   ),
   Out( <h(mCSQ), $USR, 
         hmac(<'amode', h(mCSQ), <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A4_receive_M_AC_of_ASDU:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                <'WaitForReply', CSQ, CSQ, $USR, CD>
   ),
   F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                       <CSQ, CSQ, $USR, CD>
   ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                    update_key_method, auth_keys_used
   ),
   In( <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)> )
   ]
  --[
  AuthASDU( ~linkid,
            <CSQ, $USR, hmac(<CSQ, <CSQ, $USR, CD>, $ASDU>, MDSK_j_USR_O)>, 'normal',
            'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  A4_M_FINISH( ), A4_M_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <CSQ, CSQ, $USR, CD>, 'SecurityIdle' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) A4_idle_receive_M_AC_aggressive:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, 'SecurityIdle' ),
   L_XCounterValue( ~uid, h(mCSQ) ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                    update_key_method, auth_keys_used
   ),
   !F_UserMCSInvariant( ~uid, ~us, AC ),
   In( <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>
   )
   ]
  --[
  AuthASDU( ~linkid,
            <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>,
            'aggressive', 'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  CSQ( ~uid, h(mCSQ) ), InEq( mChal, 'none' ),
  A4_M_idle_aggr_receive( ~uid )
  ]->
   [ L_UserState( ~uid, ~uu, ~us, cCS, <h(mCSQ), mChal>, 'SecurityIdle' ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) A4_waiting_receive_M_AC_aggressive:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                <'WaitForReply', newChal>
   ),
   F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, newChal ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O,
                    update_key_method, auth_keys_used
   ),
   !F_UserMCSInvariant( ~uid, ~us, AC ),
   In( <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>
   )
   ]
  --[
  AuthASDU( ~linkid,
            <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, MDSK_j_USR_O)>,
            'aggressive', 'monitor'
  ),
  UsingSessKeys( CDSK_j_USR_O, MDSK_j_USR_O, UK_i_USR_O, update_key_method,
                 auth_keys_used
  ),
  InEq( mChal, 'none' ), A4_M_waiting_aggr_receive( ~uid )
  ]->
   [ L_UserState( ~uid, ~uu, ~us, cCS, <h(mCSQ), mChal>, 'SecurityIdle' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_UserWaitForReply_Timeout:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS, <'WaitForReply', newChal> ),
   F_UserWaitForReply( ~uid, ~uu, ~us, cCS, mCS, newChal )
   ]
  -->
   [ L_UserState( ~uid, ~uu, ~us, cCS, newChal, 'SecurityIdle' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) U6_UKCC_Update_Key_Change_Confirmation:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS, 'SecurityIdle' ),
   OutUpdateKeyChallenge( ~oid, CD_b ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~newou ), In( CD_a ),
   In( <<h(KSQ), $USR, senc(<$USR, UK_i_USR_O, CD_b>, AK)>, 
        hmac(<$OSID, CD_a, CD_b, h(KSQ)>, UK_i_USR_O)>
   )
   ]
  --[
  OutstationUpdateKeySession( ~oid,
                              hmac(<$OSID, CD_a, CD_b, h(KSQ)>, UK_i_USR_O),
                              hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O)
  ),
  Sourced_UpdateKey( ~linkid, UK_i_USR_O, 'Symmetric', AK ),
  Sourced_UpdateKey_for_skiup_lemma_U6( ~linkid, UK_i_USR_O, 'Symmetric',
                                        AK
  ),
  U6_symm_trace( ~oid )
  ]->
   [
   L_OutstationState( ~oid, h(KSQ), ~newou, ~os, cCS, mCS, 'SecurityIdle' ),
   !OutUpdateKey( ~oid, ~newou, UK_i_USR_O, 'Symmetric', AK ),
   Out( hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O) )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) U7_receive_UKCC_from_Outstation:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS,
                <'WaitForKCC', hmac(<$OSID, CD_a, CD_b, KSQ>, UK_i_USR_O)>
   ),
   F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                 hmac(<$OSID, CD_a, CD_b, KSQ>, UK_i_USR_O)
   ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~newuu ), In( hmac(<$USR, CD_b, CD_a, KSQ>, UK_i_USR_O) )
   ]
  --[
  UserUpdateKeySession( ~uid, hmac(<$OSID, CD_a, CD_b, KSQ>, UK_i_USR_O),
                        hmac(<$USR, CD_b, CD_a, KSQ>, UK_i_USR_O)
  ),
  Sourced_UpdateKey( ~linkid, UK_i_USR_O, 'Symmetric', AK ),
  Sourced_UpdateKey_for_skiup_lemma( ~linkid, UK_i_USR_O, 'Symmetric', AK
  ),
  U7_symm_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~newuu, ~us, cCS, mCS, 'SecurityIdle' ),
   !UserUpdateKey( ~uid, ~newuu, UK_i_USR_O, 'Symmetric', AK )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) U6_UKCS_Update_Key_Change_Signature:
   [
   L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS, 'SecurityIdle' ),
   OutUpdateKeyChallenge( ~oid, CD_b ),
   !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                            ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~newou ), In( CD_a ),
   In( <
        <h(KSQ), $USR, aenc(<$USR, UK_i_USR_O, CD_b>, pk(~outstation_priv_key))
        >, 
        ukcsu1>
   )
   ]
  --[
  Eq( verify(ukcsu1,
             <<$OSID, CD_a, CD_b, KSQ>, 
              aenc(<$USR, UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
             pk(~user_priv_key)),
      true
  ),
  Sourced_UpdateKey( ~linkid, UK_i_USR_O, 'Asymmetric',
                     <~outstation_priv_key, ~user_priv_key>
  ),
  Sourced_UpdateKey_for_skiup_lemma_U6( ~linkid, UK_i_USR_O, 'Asymmetric',
                                        <~outstation_priv_key, ~user_priv_key>
  ),
  OutstationUpdateKeySession( ~oid, ukcsu1,
                              hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O)
  ),
  AsymmU6Finish( ~oid, ukcsu1, hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O)
  ),
  LinkAndUserPrivKey( ~linkid, ~user_priv_key ),
  LinkAndOutstationPrivKey( ~linkid, ~outstation_priv_key ),
  U6_asymm_trace( ~oid )
  ]->
   [
   L_OutstationState( ~oid, h(KSQ), ~newou, ~os, cCS, mCS, 'SecurityIdle' ),
   !OutUpdateKey( ~oid, ~newou, UK_i_USR_O, 'Asymmetric',
                  ~outstation_priv_key
   ),
   Out( hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O) )
   ]

  // loop breaker: [0]
  /*
  rule (modulo AC) U6_UKCS_Update_Key_Change_Signature:
     [
     L_OutstationState( ~oid, KSQ, ~ou, ~os, cCS, mCS, 'SecurityIdle' ),
     OutUpdateKeyChallenge( ~oid, CD_b ),
     !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                              ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
     ),
     Fr( ~newou ), In( CD_a ),
     In( <
          <h(KSQ), $USR, aenc(<$USR, UK_i_USR_O, CD_b>, pk(~outstation_priv_key))
          >, 
          ukcsu1>
     )
     ]
    --[
    Eq( z, true ),
    Sourced_UpdateKey( ~linkid, UK_i_USR_O, 'Asymmetric',
                       <~outstation_priv_key, ~user_priv_key>
    ),
    Sourced_UpdateKey_for_skiup_lemma_U6( ~linkid, UK_i_USR_O, 'Asymmetric',
                                          <~outstation_priv_key, ~user_priv_key>
    ),
    OutstationUpdateKeySession( ~oid, ukcsu1,
                                hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O)
    ),
    AsymmU6Finish( ~oid, ukcsu1, hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O)
    ),
    LinkAndUserPrivKey( ~linkid, ~user_priv_key ),
    LinkAndOutstationPrivKey( ~linkid, ~outstation_priv_key ),
    U6_asymm_trace( ~oid )
    ]->
     [
     L_OutstationState( ~oid, h(KSQ), ~newou, ~os, cCS, mCS, 'SecurityIdle' ),
     !OutUpdateKey( ~oid, ~newou, UK_i_USR_O, 'Asymmetric',
                    ~outstation_priv_key
     ),
     Out( hmac(<$USR, CD_b, CD_a, h(KSQ)>, UK_i_USR_O) )
     ]
    variants (modulo AC)
    1. $OSID = $OSID.35
       $USR  = $USR.36
       ~outstation_priv_key
             = ~outstation_priv_key.42
       ~user_priv_key
             = ~user_priv_key.43
       CD_a  = CD_a.45
       CD_b  = CD_b.46
       KSQ   = KSQ.47
       UK_i_USR_O
             = UK_i_USR_O.48
       ukcsu1
             = sign(<<$OSID.35, CD_a.45, CD_b.46, KSQ.47>, 
                     aenc(<$USR.36, UK_i_USR_O.48, CD_b.46>, pk(~outstation_priv_key.42))>,
                    ~user_priv_key.43)
       z     = true
    
    2. $OSID = $OSID.38
       $USR  = $USR.39
       ~outstation_priv_key
             = ~outstation_priv_key.45
       ~user_priv_key
             = ~user_priv_key.46
       CD_a  = CD_a.48
       CD_b  = CD_b.49
       KSQ   = KSQ.50
       UK_i_USR_O
             = UK_i_USR_O.51
       ukcsu1
             = ukcsu1.54
       z     = verify(ukcsu1.54,
                      <<$OSID.38, CD_a.48, CD_b.49, KSQ.50>, 
                       aenc(<$USR.39, UK_i_USR_O.51, CD_b.49>, pk(~outstation_priv_key.45))>,
                      pk(~user_priv_key.46))
    // loop breaker: [0]
  */

rule (modulo E) U7_receive_UKCC_from_Outstation_asymm:
   [
   L_UserState( ~uid, ~uu, ~us, cCS, mCS,
                <'WaitForKCC', 
                 sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
                       aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
                      ~user_priv_key)
                >
   ),
   F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                 sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
                       aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
                      ~user_priv_key)
   ),
   !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                      pk(~outstation_priv_key), pk(~user_priv_key)
   ),
   Fr( ~newuu ), In( hmac(<$USR, CD_b, ~CD_a, h(KSQ)>, ~UK_i_USR_O) )
   ]
  --[
  UserUpdateKeySession( ~uid,
                        sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
                              aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
                             ~user_priv_key),
                        hmac(<$USR, CD_b, ~CD_a, h(KSQ)>, ~UK_i_USR_O)
  ),
  Sourced_UpdateKey( ~linkid, ~UK_i_USR_O, 'Asymmetric',
                     <~outstation_priv_key, ~user_priv_key>
  ),
  Sourced_UpdateKey_for_skiup_lemma( ~linkid, ~UK_i_USR_O, 'Asymmetric',
                                     ~outstation_priv_key
  ),
  AsymmU7Finish( ~uid, ~linkid,
                 sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
                       aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
                      ~user_priv_key),
                 hmac(<$USR, CD_b, ~CD_a, h(KSQ)>, ~UK_i_USR_O)
  ),
  LinkAndUserPrivKey( ~linkid, ~user_priv_key ),
  LinkAndOutstationPrivKey( ~linkid, ~outstation_priv_key ),
  U7_asymm_trace( ~uid )
  ]->
   [
   L_UserState( ~uid, ~newuu, ~us, cCS, mCS, 'SecurityIdle' ),
   !UserUpdateKey( ~uid, ~newuu, ~UK_i_USR_O, 'Asymmetric',
                   ~outstation_priv_key
   )
   ]

  /* has exactly the trivial AC variant */

lemma countervalue_uniqueness [reuse, use_induction]:
  all-traces
  "∀ id x #i #j.
    ((NewCounterValue( id, x ) @ #i) ∧ (NewCounterValue( id, x ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ id x #i #j.
  (NewCounterValue( id, x ) @ #i) ∧ (NewCounterValue( id, x ) @ #j)
 ∧
  ¬(#i = #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( NewCounterValue( id, x ) @ #i )
    case CountUp
    solve( NewCounterValue( ~id, h(val) ) @ #j )
      case CountUp
      solve( (#i < #j)  ∥ (#j < #i) )
        case case_1
        solve( L_Counter( ~id, val ) ▶₀ #i )
          case CountUp
          solve( L_Counter( ~id, h(val) ) ▶₀ #j )
            case CountUp
            by contradiction /* cyclic */
          qed
        next
          case Initial_key_pre_distribution_case_1
          solve( L_Counter( ~id, '0' ) ▶₀ #j )
            case Initial_key_pre_distribution
            by contradiction /* cyclic */
          qed
        next
          case Initial_key_pre_distribution_case_2
          solve( L_Counter( ~id, '0' ) ▶₀ #j )
            case Initial_key_pre_distribution
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( L_Counter( ~id, val ) ▶₀ #i )
          case CountUp
          solve( L_Counter( ~id, h(val) ) ▶₀ #j )
            case CountUp
            by contradiction /* cyclic */
          qed
        next
          case Initial_key_pre_distribution_case_1
          solve( L_Counter( ~id, '0' ) ▶₀ #j )
            case Initial_key_pre_distribution
            by contradiction /* cyclic */
          qed
        next
          case Initial_key_pre_distribution_case_2
          solve( L_Counter( ~id, '0' ) ▶₀ #j )
            case Initial_key_pre_distribution
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case Initial_key_pre_distribution_case_1
    solve( !F_AuthorityKey( ~AK ) ▶₀ #i )
      case Authority_Symm_Key
      solve( NewCounterValue( ~uid, '0' ) @ #j )
        case Initial_key_pre_distribution
        by contradiction /* from formulas */
      qed
    qed
  next
    case Initial_key_pre_distribution_case_2
    solve( !F_AuthorityKey( ~AK ) ▶₀ #i )
      case Authority_Symm_Key
      solve( NewCounterValue( ~oid, '0' ) @ #j )
        case Initial_key_pre_distribution
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma CSQ_Uniqueness [reuse, use_induction]:
  all-traces
  "∀ id csq #i #j.
    ((CSQ( id, csq ) @ #i) ∧ (CSQ( id, csq ) @ #j)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ id csq #i #j.
  (CSQ( id, csq ) @ #i) ∧ (CSQ( id, csq ) @ #j) ∧ ¬(#i = #j)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( CSQ( id, csq ) @ #i )
    case A2_C_AC_Authentication_Challenge
    solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~oid, h(cCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      qed
    qed
  next
    case A2_M_AC_Authentication_Challenge
    solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~uid, h(mCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      qed
    qed
  next
    case A4_idle_receive_C_AC_aggressive
    solve( L_XCounterValue( ~oid, h(CSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~oid, h(CSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        solve( L_XCounterValue( ~oid, h(CSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_XCounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        by solve( L_XCounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        by solve( L_XCounterValue( ~oid, h(CSQ) ) ▶₁ #j )
      qed
    qed
  next
    case A4_idle_receive_M_AC_aggressive
    solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~uid, h(mCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case S4_SKS_session_key_status
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      qed
    qed
  next
    case S4_SKS_session_key_status
    solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~oid, h(cCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      next
        case S5_receive_SKS_confirmation
        by solve( L_XCounterValue( ~oid, h(cCSQ) ) ▶₁ #j )
      qed
    qed
  next
    case S5_receive_SKS_confirmation
    solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #i )
      case CountUp
      solve( CSQ( ~uid, h(mCSQ) ) @ #j )
        case A2_C_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A2_M_AC_Authentication_Challenge
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_C_AC_aggressive
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case A4_idle_receive_M_AC_aggressive
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S4_SKS_session_key_status
        by solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
      next
        case S5_receive_SKS_confirmation
        solve( L_XCounterValue( ~uid, h(mCSQ) ) ▶₁ #j )
          case CountUp
          by contradiction
        qed
      qed
    qed
  qed
qed

lemma sessions_unique [reuse]:
  all-traces
  "∀ id ar mode mode2 direction #i #j.
    ((AuthASDU( id, ar, mode, direction ) @ #i) ∧
     (AuthASDU( id, ar, mode2, direction ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ id ar mode mode2 direction #i #j.
  (AuthASDU( id, ar, mode, direction ) @ #i) ∧
  (AuthASDU( id, ar, mode2, direction ) @ #j)
 ∧
  ¬(#i = #j)"
*/
simplify
solve( AuthASDU( id, ar, mode, direction ) @ #i )
  case A4_idle_receive_C_AC_aggressive
  solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                         UK_i_USR_O, update_key_method, auth_keys_used
         ) ▶₂ #i )
    case S4_SKS_session_key_status_case_1
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
        case A2_C_AC_Authentication_Challenge
        solve( AuthASDU( ~linkid,
                         <h(CSQ), $USR, 
                          hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, 'control'
               ) @ #j )
          case A4_idle_receive_C_AC_aggressive
          solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                 UK_i_USR_O.1, update_key_method, auth_keys_used
                 ) ▶₂ #j )
            case S4_SKS_session_key_status_case_1
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                            ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                            pk(~user_priv_key.1)
                   ) ▶₃ #j )
              case Initial_key_pre_distribution
              by contradiction /* from formulas */
            qed
          next
            case S4_SKS_session_key_status_case_2
            by solve( !F_OutstationInvariants( ~oid.1, AK.2, $USR, $OSID.1, ~linkid,
                                               ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                               pk(~user_priv_key.1)
                      ) ▶₃ #j )
          next
            case S4_SKS_session_key_status_case_3
            by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                               ~outstation_priv_key.2, pk(~outstation_priv_key.2),
                                               pk(~user_priv_key.1)
                      ) ▶₃ #j )
          qed
        qed
      qed
    qed
  next
    case S4_SKS_session_key_status_case_2
    solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
        case A2_C_AC_Authentication_Challenge
        solve( AuthASDU( ~linkid,
                         <h(CSQ), $USR, 
                          hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, 'control'
               ) @ #j )
          case A4_idle_receive_C_AC_aggressive
          solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                 UK_i_USR_O.1, update_key_method, auth_keys_used
                 ) ▶₂ #j )
            case S4_SKS_session_key_status_case_1
            by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                               ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                               pk(~user_priv_key.1)
                      ) ▶₃ #j )
          next
            case S4_SKS_session_key_status_case_2
            solve( !F_OutstationInvariants( ~oid.1, AK.2, $USR, $OSID.1, ~linkid,
                                            ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                            pk(~user_priv_key.1)
                   ) ▶₃ #j )
              case Initial_key_pre_distribution
              by contradiction /* from formulas */
            qed
          next
            case S4_SKS_session_key_status_case_3
            by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                               ~outstation_priv_key.2, pk(~outstation_priv_key.2),
                                               pk(~user_priv_key.1)
                      ) ▶₃ #j )
          qed
        qed
      qed
    qed
  next
    case S4_SKS_session_key_status_case_3
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
        case A2_C_AC_Authentication_Challenge
        solve( AuthASDU( ~linkid,
                         <h(CSQ), $USR, 
                          hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, 'control'
               ) @ #j )
          case A4_idle_receive_C_AC_aggressive
          solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                 UK_i_USR_O.1, update_key_method, auth_keys_used
                 ) ▶₂ #j )
            case S4_SKS_session_key_status_case_1
            by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                               ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                               pk(~user_priv_key.1)
                      ) ▶₃ #j )
          next
            case S4_SKS_session_key_status_case_2
            by solve( !F_OutstationInvariants( ~oid.1, AK.2, $USR, $OSID.1, ~linkid,
                                               ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                               pk(~user_priv_key.1)
                      ) ▶₃ #j )
          next
            case S4_SKS_session_key_status_case_3
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                            ~outstation_priv_key.2, pk(~outstation_priv_key.2),
                                            pk(~user_priv_key.1)
                   ) ▶₃ #j )
              case Initial_key_pre_distribution
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
next
  case A4_idle_receive_M_AC_aggressive
  solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                            pk(~outstation_priv_key), pk(~user_priv_key)
         ) ▶₂ #i )
    case Initial_key_pre_distribution
    solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                            UK_i_USR_O, update_key_method, auth_keys_used
           ) ▶₃ #i )
      case S3_SKC_session_key_change_case_1
      solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
        case A2_M_AC_Authentication_Challenge
        solve( AuthASDU( ~linkid,
                         <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, 'monitor'
               ) @ #j )
          case A4_idle_receive_M_AC_aggressive
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            by contradiction /* from formulas */
          qed
        next
          case A4_waiting_receive_M_AC_aggressive
          solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1, <mCSQ, mChal>,
                                     newChal
                 ) ▶₁ #j )
            case A2_M_AC_Authentication_Challenge
            by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                         ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                      ) ▶₂ #j )
          qed
        qed
      qed
    next
      case S3_SKC_session_key_change_case_2
      solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
        case A2_M_AC_Authentication_Challenge
        solve( AuthASDU( ~linkid,
                         <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, 'monitor'
               ) @ #j )
          case A4_idle_receive_M_AC_aggressive
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            by contradiction /* from formulas */
          qed
        next
          case A4_waiting_receive_M_AC_aggressive
          solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1, <mCSQ, mChal>,
                                     newChal
                 ) ▶₁ #j )
            case A2_M_AC_Authentication_Challenge
            by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                         ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                      ) ▶₂ #j )
          qed
        qed
      qed
    next
      case S3_SKC_session_key_change_case_3
      solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
        case A2_M_AC_Authentication_Challenge
        solve( AuthASDU( ~linkid,
                         <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, 'monitor'
               ) @ #j )
          case A4_idle_receive_M_AC_aggressive
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            by contradiction /* from formulas */
          qed
        next
          case A4_waiting_receive_M_AC_aggressive
          solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1, <mCSQ, mChal>,
                                     newChal
                 ) ▶₁ #j )
            case A2_M_AC_Authentication_Challenge
            by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                         ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                      ) ▶₂ #j )
          qed
        qed
      qed
    qed
  qed
next
  case A4_receive_C_AC_of_ASDU
  solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                            <CSQ, CSQ, $USR, CD>
         ) ▶₁ #i )
    case A2_C_AC_Authentication_Challenge
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                             UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S4_SKS_session_key_status_case_1
        solve( AuthASDU( ~linkid,
                         <h(cCSQ), $USR, 
                          hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, 'control'
               ) @ #j )
          case A4_receive_C_AC_of_ASDU
          solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1, cCS, mCS.1,
                                    <h(cCSQ), h(cCSQ), $USR, ~CD>
                 ) ▶₁ #j )
            case A2_C_AC_Authentication_Challenge
            by contradiction /* from formulas */
          qed
        qed
      next
        case S4_SKS_session_key_status_case_2
        solve( AuthASDU( ~linkid,
                         <h(cCSQ), $USR, 
                          hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, 'control'
               ) @ #j )
          case A4_receive_C_AC_of_ASDU
          solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1, cCS, mCS.1,
                                    <h(cCSQ), h(cCSQ), $USR, ~CD>
                 ) ▶₁ #j )
            case A2_C_AC_Authentication_Challenge
            by contradiction /* from formulas */
          qed
        qed
      next
        case S4_SKS_session_key_status_case_3
        solve( AuthASDU( ~linkid,
                         <h(cCSQ), $USR, 
                          hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, 'control'
               ) @ #j )
          case A4_receive_C_AC_of_ASDU
          solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1, cCS, mCS.1,
                                    <h(cCSQ), h(cCSQ), $USR, ~CD>
                 ) ▶₁ #j )
            case A2_C_AC_Authentication_Challenge
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case A4_receive_M_AC_of_ASDU
  solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                             <CSQ, CSQ, $USR, CD>
         ) ▶₁ #i )
    case A2_M_AC_Authentication_Challenge
    solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                              pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                              UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( AuthASDU( ~linkid,
                         <h(mCSQ), $USR, 
                          hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, 'monitor'
               ) @ #j )
          case A4_receive_M_AC_of_ASDU
          solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                     <mCSQ.1, mChal.1>, <h(mCSQ), h(mCSQ), $USR, ~CD>
                 ) ▶₁ #j )
            case A2_M_AC_Authentication_Challenge
            by contradiction /* from formulas */
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( AuthASDU( ~linkid,
                         <h(mCSQ), $USR, 
                          hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, 'monitor'
               ) @ #j )
          case A4_receive_M_AC_of_ASDU
          solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                     <mCSQ.1, mChal.1>, <h(mCSQ), h(mCSQ), $USR, ~CD>
                 ) ▶₁ #j )
            case A2_M_AC_Authentication_Challenge
            by contradiction /* from formulas */
          qed
        qed
      next
        case S3_SKC_session_key_change_case_3
        solve( AuthASDU( ~linkid,
                         <h(mCSQ), $USR, 
                          hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, 'monitor'
               ) @ #j )
          case A4_receive_M_AC_of_ASDU
          solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1,
                                     <mCSQ.1, mChal.1>, <h(mCSQ), h(mCSQ), $USR, ~CD>
                 ) ▶₁ #j )
            case A2_M_AC_Authentication_Challenge
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
next
  case A4_waiting_receive_C_AC_aggressive
  solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, <CSQ, h(CSQ), $USR, CD>,
                            mCS, newChal
         ) ▶₁ #i )
    case A2_C_AC_Authentication_Challenge
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                             UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S4_SKS_session_key_status_case_1
        solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, 'control'
                 ) @ #j )
            case A4_idle_receive_C_AC_aggressive
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            next
              case S4_SKS_session_key_status_case_2
              by solve( !F_OutstationInvariants( ~oid.1, AK.2, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            next
              case S4_SKS_session_key_status_case_3
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.2, pk(~outstation_priv_key.2),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            qed
          next
            case A4_waiting_receive_C_AC_aggressive
            solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1,
                                      <CSQ, h(CSQ), $USR, ~CD>, mCS.1, newChal
                   ) ▶₁ #j )
              case A2_C_AC_Authentication_Challenge
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                              ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                              pk(~user_priv_key.1)
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case S4_SKS_session_key_status_case_2
        solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, 'control'
                 ) @ #j )
            case A4_idle_receive_C_AC_aggressive
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            next
              case S4_SKS_session_key_status_case_2
              by solve( !F_OutstationInvariants( ~oid.1, AK.2, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            next
              case S4_SKS_session_key_status_case_3
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.2, pk(~outstation_priv_key.2),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            qed
          next
            case A4_waiting_receive_C_AC_aggressive
            solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1,
                                      <CSQ, h(CSQ), $USR, ~CD>, mCS.1, newChal
                   ) ▶₁ #j )
              case A2_C_AC_Authentication_Challenge
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                              ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                              pk(~user_priv_key.1)
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case S4_SKS_session_key_status_case_3
        solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, 'control'
                 ) @ #j )
            case A4_idle_receive_C_AC_aggressive
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            next
              case S4_SKS_session_key_status_case_2
              by solve( !F_OutstationInvariants( ~oid.1, AK.2, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            next
              case S4_SKS_session_key_status_case_3
              by solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                                 ~outstation_priv_key.2, pk(~outstation_priv_key.2),
                                                 pk(~user_priv_key.1)
                        ) ▶₃ #j )
            qed
          next
            case A4_waiting_receive_C_AC_aggressive
            solve( F_OutWaitForReply( ~oid.1, KSQ.1, ~ou.1, ~os.1,
                                      <CSQ, h(CSQ), $USR, ~CD>, mCS.1, newChal
                   ) ▶₁ #j )
              case A2_C_AC_Authentication_Challenge
              solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid,
                                              ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                              pk(~user_priv_key.1)
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case A4_waiting_receive_M_AC_aggressive
  solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, newChal
         ) ▶₁ #i )
    case A2_M_AC_Authentication_Challenge
    solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid,
                              ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                              UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_idle_receive_M_AC_aggressive
            by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                         ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                      ) ▶₂ #j )
          next
            case A4_waiting_receive_M_AC_aggressive
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1, <mCSQ, mChal>,
                                       newChal
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                        ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_idle_receive_M_AC_aggressive
            by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                         ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                      ) ▶₂ #j )
          next
            case A4_waiting_receive_M_AC_aggressive
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1, <mCSQ, mChal>,
                                       newChal
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                        ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_3
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( AuthASDU( ~linkid,
                           <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, 'monitor'
                 ) @ #j )
            case A4_idle_receive_M_AC_aggressive
            by solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                         ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                      ) ▶₂ #j )
          next
            case A4_waiting_receive_M_AC_aggressive
            solve( F_UserWaitForReply( ~uid.1, ~uu.1, ~us.1, cCS.1, <mCSQ, mChal>,
                                       newChal
                   ) ▶₁ #j )
              case A2_M_AC_Authentication_Challenge
              solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid,
                                        ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                     ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma update_key_sourced [reuse, use_induction]:
  all-traces
  "(∀ id uk ak #i.
     (((¬(∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ (#r < #i))) ∧
       (¬(∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (#r < #i)))) ∧
      (Sourced_UpdateKey( id, uk, 'Symmetric', ak ) @ #i)) ⇒
     (∃ #j. (NewUpdateKey( id, uk, 'Symmetric', ak ) @ #j) ∧ (#j < #i))) ∧
   (∀ id uk oprk uprk #i.
     ((¬(∃ #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ (#r < #i))) ∧
      (Sourced_UpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i)) ⇒
     (∃ #j.
       (NewUpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"((∃ id uk ak #i.
    (Sourced_UpdateKey( id, uk, 'Symmetric', ak ) @ #i)
   ∧
    (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #j. (NewUpdateKey( id, uk, 'Symmetric', ak ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ id uk oprk uprk #i.
    (Sourced_UpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i)
   ∧
    (∀ #r. (UserPrivateKeyReveal( uprk ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #j.
      (NewUpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #j)
     ⇒
      ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ id uk ak #i.
           (Sourced_UpdateKey( id, uk, 'Symmetric', ak ) @ #i)
          ∧
           (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #j. (NewUpdateKey( id, uk, 'Symmetric', ak ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ id uk oprk uprk #i.
           (Sourced_UpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i)
          ∧
           (∀ #r. (UserPrivateKeyReveal( uprk ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #j.
             (NewUpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #j)
            ⇒
             ¬(#j < #i))) )
    case case_1
    solve( Sourced_UpdateKey( id, uk, 'Symmetric', ak ) @ #i )
      case S3_SKC_session_key_change
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                                pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₁ #i )
        case Initial_key_pre_distribution
        solve( (last(#i))  ∥
               (∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewUpdateKey( ~linkid, uk, 'Symmetric', ak ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          solve( !UserUpdateKey( ~uid, ~uu, uk, 'Symmetric', ak ) ▶₂ #i )
            case U7_receive_UKCC_from_Outstation
            by contradiction /* from formulas */
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        qed
      qed
    next
      case S4_SKS_session_key_status
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( (last(#i))  ∥
               (∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewUpdateKey( ~linkid, uk, 'Symmetric', ak ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          solve( !OutUpdateKey( ~oid, ~ou, uk, 'Symmetric', ak ) ▶₄ #i )
            case U6_UKCC_Update_Key_Change_Confirmation
            solve( (∃ #r.
                     (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #vr.2))  ∥
                   (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #vr.2))  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        qed
      qed
    next
      case U6_UKCC_Update_Key_Change_Confirmation
      solve( !F_OutstationInvariants( ~oid, ak, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( (last(#i))  ∥
               (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          solve( OutUpdateKeyChallenge( ~oid, CD_b ) ▶₁ #i )
            case U2_UKCRp_Key_Change_Reply
            solve( !KU( senc(<$USR, uk, ~CD_b>, ~AK) ) @ #vk.6 )
              case U3_U4_U5_new_update_key_symmetric_mode
              solve( !KU( hmac(<$OSID, CD_a, ~CD_b, h(KSQ)>, ~UK_i_USR_O) ) @ #vk.8 )
                case U3_U4_U5_new_update_key_symmetric_mode
                by contradiction /* from formulas */
              next
                case U6_UKCC_Update_Key_Change_Confirmation
                by contradiction /* from formulas */
              next
                case U6_UKCS_Update_Key_Change_Signature
                by contradiction /* from formulas */
              next
                case c_hmac
                solve( !KU( ~UK_i_USR_O ) @ #vk.15 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( !KU( ~AK ) @ #vk.17 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_senc
              solve( !KU( ~AK ) @ #vk.9 )
                case authority_symm_key_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        qed
      qed
    next
      case U7_receive_UKCC_from_Outstation
      solve( F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                           hmac(<$OSID, CD_a, CD_b, KSQ>, uk)
             ) ▶₁ #i )
        case U3_U4_U5_new_update_key_symmetric_mode
        solve( !F_UserInvariants( ~uid, ak, $USR, $OSID, ~linkid, ~user_priv_key,
                                  pk(~outstation_priv_key), pk(~user_priv_key)
               ) ▶₂ #i )
          case Initial_key_pre_distribution
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    solve( Sourced_UpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i )
      case S3_SKC_session_key_change
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                                pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₁ #i )
        case Initial_key_pre_distribution
        solve( (last(#i))  ∥
               (∃ #r.
                 (UserPrivateKeyReveal( uprk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewUpdateKey( ~linkid, uk, 'Asymmetric', <oprk, uprk> ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          by solve( !UserUpdateKey( ~uid, ~uu, uk, 'Asymmetric', <oprk, uprk>
                    ) ▶₂ #i )
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case S4_SKS_session_key_status
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( (last(#i))  ∥
               (∃ #r.
                 (UserPrivateKeyReveal( uprk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewUpdateKey( ~linkid, uk, 'Asymmetric', <oprk, uprk> ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          by solve( !OutUpdateKey( ~oid, ~ou, uk, 'Asymmetric', <oprk, uprk>
                    ) ▶₄ #i )
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case U6_UKCS_Update_Key_Change_Signature
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( (last(#i))  ∥
               (∃ #r.
                 (UserPrivateKeyReveal( ~user_priv_key ) @ #r)
                ∧
                 (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                <~outstation_priv_key, ~user_priv_key>
                  ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          solve( OutUpdateKeyChallenge( ~oid, CD_b ) ▶₁ #i )
            case U2_UKCRp_Key_Change_Reply
            solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ>, 
                              aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))>,
                             ~user_priv_key)
                   ) @ #vk.7 )
              case U3_U4_U5_new_update_key_asymmetric_mode
              by contradiction /* from formulas */
            next
              case c_sign
              solve( !KU( ~user_priv_key ) @ #vk.10 )
                case user_asymm_priv_key_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    next
      case U7_receive_UKCC_from_Outstation_asymm
      solve( F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                           sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
                                 aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
                                ~user_priv_key)
             ) ▶₁ #i )
        case U3_U4_U5_new_update_key_asymmetric_mode
        solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                                  pk(~outstation_priv_key), pk(~user_priv_key)
               ) ▶₂ #i )
          case Initial_key_pre_distribution
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma update_key_agreement [reuse, use_induction]:
  all-traces
  "(∀ id id2 uk ak ak2 update_key_method #i #j.
     (((((¬(∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ (#r < #i))) ∧
         (¬(∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (#r < #i)))) ∧
        (Sourced_UpdateKey( id, uk, 'Symmetric', ak ) @ #i)) ∧
       (NewUpdateKey( id2, uk, update_key_method, ak2 ) @ #j)) ∧
      (#j < #i)) ⇒
     (((id = id2) ∧ (ak = ak2)) ∧ (update_key_method = 'Symmetric'))) ∧
   (∀ id id2 uk oprk oprk2 uprk uprk2 update_key_method #i #j.
     ((((¬(∃ #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ (#r < #i))) ∧
        (Sourced_UpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i)) ∧
       (NewUpdateKey( id2, uk, update_key_method, <oprk2, uprk2> ) @ #j)) ∧
      (#j < #i)) ⇒
     ((((id = id2) ∧ (oprk = oprk2)) ∧ (uprk = uprk2)) ∧
      (update_key_method = 'Asymmetric')))"
/*
guarded formula characterizing all counter-examples:
"((∃ id id2 uk ak ak2 update_key_method #i #j.
    (Sourced_UpdateKey( id, uk, 'Symmetric', ak ) @ #i) ∧
    (NewUpdateKey( id2, uk, update_key_method, ak2 ) @ #j)
   ∧
    (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
    (#j < #i) ∧
    (((¬(id = id2)) ∨
      (¬(ak = ak2)) ∨
      (¬(update_key_method = 'Symmetric'))))) ∨
  (∃ id id2 uk oprk oprk2 uprk uprk2 update_key_method #i #j.
    (Sourced_UpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i) ∧
    (NewUpdateKey( id2, uk, update_key_method, <oprk2, uprk2> ) @ #j)
   ∧
    (∀ #r. (UserPrivateKeyReveal( uprk ) @ #r) ⇒ ¬(#r < #i)) ∧
    (#j < #i) ∧
    (((¬(id = id2)) ∨
      (¬(oprk = oprk2)) ∨
      (¬(uprk = uprk2)) ∨
      (¬(update_key_method = 'Asymmetric'))))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ id id2 uk ak ak2 update_key_method #i #j.
           (Sourced_UpdateKey( id, uk, 'Symmetric', ak ) @ #i) ∧
           (NewUpdateKey( id2, uk, update_key_method, ak2 ) @ #j)
          ∧
           (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
           (#j < #i) ∧
           (((¬(id = id2)) ∨
             (¬(ak = ak2)) ∨
             (¬(update_key_method = 'Symmetric')))))  ∥
         (∃ id id2 uk oprk oprk2 uprk uprk2 update_key_method #i #j.
           (Sourced_UpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i) ∧
           (NewUpdateKey( id2, uk, update_key_method, <oprk2, uprk2> ) @ #j)
          ∧
           (∀ #r. (UserPrivateKeyReveal( uprk ) @ #r) ⇒ ¬(#r < #i)) ∧
           (#j < #i) ∧
           (((¬(id = id2)) ∨
             (¬(oprk = oprk2)) ∨
             (¬(uprk = uprk2)) ∨
             (¬(update_key_method = 'Asymmetric'))))) )
    case case_1
    solve( Sourced_UpdateKey( id, uk, 'Symmetric', ak ) @ #i )
      case S3_SKC_session_key_change
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                                pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₁ #i )
        case Initial_key_pre_distribution
        solve( NewUpdateKey( id2, uk, update_key_method, ak2 ) @ #j )
          case Initial_key_pre_distribution
          solve( !F_AuthorityKey( ~AK.1 ) ▶₀ #j )
            case Authority_Symm_Key
            solve( (∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ak ) @ #j) ∧ #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by solve( !UserUpdateKey( ~uid, ~uu, ~UK_i_USR_O, 'Symmetric', ak
                        ) ▶₂ #i )
            qed
          qed
        next
          case U3_U4_U5_new_update_key_asymmetric_mode
          solve( !F_UserInvariants( ~uid.1, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( (∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ak ) @ #j) ∧ #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by solve( !UserUpdateKey( ~uid, ~uu, ~UK_i_USR_O, 'Symmetric', ak
                        ) ▶₂ #i )
            qed
          qed
        next
          case U3_U4_U5_new_update_key_symmetric_mode
          solve( !F_UserInvariants( ~uid.1, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_AuthorityKey( ~AK.1 ) ▶₂ #j )
              case Authority_Symm_Key
              solve( (∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ #r < #i)  ∥
                     (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                     (∃ #j.
                       (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ak ) @ #j) ∧ #j < #i) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( !UserUpdateKey( ~uid, ~uu, ~UK_i_USR_O, 'Symmetric', ak ) ▶₂ #i )
                  case U7_receive_UKCC_from_Outstation
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( NewUpdateKey( id2, uk, update_key_method, ak2 ) @ #j )
          case Initial_key_pre_distribution
          solve( !F_AuthorityKey( ~AK.1 ) ▶₀ #j )
            case Authority_Symm_Key
            solve( (∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ak ) @ #j) ∧ #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( !OutUpdateKey( ~oid, ~ou, ~UK_i_USR_O, 'Symmetric', ak ) ▶₄ #i )
                case U6_UKCC_Update_Key_Change_Confirmation
                solve( (last(#i))  ∥
                       (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
                       (∃ #r.
                         (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i)) )
                  case case_1
                  by solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case U3_U4_U5_new_update_key_asymmetric_mode
          solve( !F_UserInvariants( ~uid, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( (∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ak ) @ #j) ∧ #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( !OutUpdateKey( ~oid, ~ou, ~UK_i_USR_O, 'Symmetric', ak ) ▶₄ #i )
                case U6_UKCC_Update_Key_Change_Confirmation
                solve( (last(#i))  ∥
                       (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
                       (∃ #r.
                         (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i)) )
                  case case_1
                  by solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case U3_U4_U5_new_update_key_symmetric_mode
          solve( !F_UserInvariants( ~uid, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_AuthorityKey( ~AK.1 ) ▶₂ #j )
              case Authority_Symm_Key
              solve( (∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ #r < #i)  ∥
                     (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                     (∃ #j.
                       (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ak ) @ #j) ∧ #j < #i) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( !OutUpdateKey( ~oid, ~ou, ~UK_i_USR_O, 'Symmetric', ak ) ▶₄ #i )
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (last(#i))  ∥
                         (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
                         (∃ #r.
                           (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
                         ((~linkid = ~linkid.1) ∧ (~AK = ~AK.1)) )
                    case case_1
                    solve( (¬(~linkid = ~linkid.1))  ∥ (¬(~AK = ~AK.1)) )
                      case case_1
                      solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case U6_UKCC_Update_Key_Change_Confirmation
      solve( !F_OutstationInvariants( ~oid, ak, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( NewUpdateKey( id2, uk, update_key_method, ak2 ) @ #j )
          case Initial_key_pre_distribution
          solve( !F_AuthorityKey( ~AK.1 ) ▶₀ #j )
            case Authority_Symm_Key
            solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j)
                    ∧
                     #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( OutUpdateKeyChallenge( ~oid, CD_b ) ▶₁ #i )
                case U2_UKCRp_Key_Change_Reply
                solve( (last(#i))  ∥
                       (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
                       (∃ #r.
                         (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i)) )
                  case case_1
                  by solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case U3_U4_U5_new_update_key_asymmetric_mode
          solve( !F_UserInvariants( ~uid, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j)
                    ∧
                     #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( OutUpdateKeyChallenge( ~oid, CD_b ) ▶₁ #i )
                case U2_UKCRp_Key_Change_Reply
                solve( (last(#i))  ∥
                       (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
                       (∃ #r.
                         (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i)) )
                  case case_1
                  by solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case U3_U4_U5_new_update_key_symmetric_mode
          solve( !F_UserInvariants( ~uid, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_AuthorityKey( ~AK.1 ) ▶₂ #j )
              case Authority_Symm_Key
              solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                     (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                     (∃ #j.
                       (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j)
                      ∧
                       #j < #i) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( OutUpdateKeyChallenge( ~oid, CD_b ) ▶₁ #i )
                  case U2_UKCRp_Key_Change_Reply
                  solve( (last(#i))  ∥
                         (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
                         (∃ #r.
                           (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
                         ((~linkid = ~linkid.1) ∧ (~AK = ~AK.1)) )
                    case case_1
                    solve( (¬(~linkid = ~linkid.1))  ∥ (¬(~AK = ~AK.1)) )
                      case case_1
                      solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  next
                    case case_4
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case U7_receive_UKCC_from_Outstation
      solve( F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                           hmac(<$OSID, CD_a, CD_b, KSQ>, uk)
             ) ▶₁ #i )
        case U3_U4_U5_new_update_key_symmetric_mode
        solve( !F_UserInvariants( ~uid, ak, $USR, $OSID, ~linkid, ~user_priv_key,
                                  pk(~outstation_priv_key), pk(~user_priv_key)
               ) ▶₂ #i )
          case Initial_key_pre_distribution
          solve( NewUpdateKey( id2, ~UK_i_USR_O, update_key_method, ak2 ) @ #j )
            case U3_U4_U5_new_update_key_symmetric_mode
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Sourced_UpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i )
      case S3_SKC_session_key_change
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                                pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₁ #i )
        case Initial_key_pre_distribution
        solve( NewUpdateKey( id2, uk, update_key_method, <oprk2, uprk2> ) @ #j )
          case U3_U4_U5_new_update_key_asymmetric_mode
          solve( !F_UserInvariants( ~uid.1, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( (∃ #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Asymmetric', <oprk, uprk> ) @ #j)
                    ∧
                     #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by solve( !UserUpdateKey( ~uid, ~uu, ~UK_i_USR_O, 'Asymmetric',
                                        <oprk, uprk>
                        ) ▶₂ #i )
            qed
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( NewUpdateKey( id2, uk, update_key_method, <oprk2, uprk2> ) @ #j )
          case U3_U4_U5_new_update_key_asymmetric_mode
          solve( !F_UserInvariants( ~uid, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( (∃ #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Asymmetric', <oprk, uprk> ) @ #j)
                    ∧
                     #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by solve( !OutUpdateKey( ~oid, ~ou, ~UK_i_USR_O, 'Asymmetric',
                                       <oprk, uprk>
                        ) ▶₄ #i )
            qed
          qed
        qed
      qed
    next
      case U6_UKCS_Update_Key_Change_Signature
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( NewUpdateKey( id2, uk, update_key_method, <oprk2, uprk2> ) @ #j )
          case U3_U4_U5_new_update_key_asymmetric_mode
          solve( !F_UserInvariants( ~uid, ~AK.1, $USR.1, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( (∃ #r. (UserPrivateKeyReveal( ~user_priv_key ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Asymmetric',
                                    <~outstation_priv_key, ~user_priv_key>
                      ) @ #j)
                    ∧
                     #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( OutUpdateKeyChallenge( ~oid, CD_b ) ▶₁ #i )
                case U2_UKCRp_Key_Change_Reply
                solve( (last(#i))  ∥
                       (∃ #r.
                         (UserPrivateKeyReveal( ~user_priv_key ) @ #r)
                        ∧
                         (¬(last(#r))) ∧ (#r < #i))  ∥
                       ((~linkid = ~linkid.1) ∧
                        (~outstation_priv_key = ~outstation_priv_key.1) ∧
                        (~user_priv_key = ~user_priv_key.1)) )
                  case case_1
                  solve( (¬(~linkid = ~linkid.1))  ∥
                         (¬(~outstation_priv_key = ~outstation_priv_key.1))  ∥
                         (¬(~user_priv_key = ~user_priv_key.1)) )
                    case case_1
                    solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Asymmetric',
                                         <~outstation_priv_key, ~user_priv_key>
                           ) @ #j.1 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2
                    solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Asymmetric',
                                         <~outstation_priv_key, ~user_priv_key>
                           ) @ #j.1 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_3
                    solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Asymmetric',
                                         <~outstation_priv_key, ~user_priv_key>
                           ) @ #j.1 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case U7_receive_UKCC_from_Outstation_asymm
      solve( F_WaitForKCC( ~uid, ~uu, ~us, cCS, mCS,
                           sign(<<$OSID, ~CD_a, CD_b, KSQ>, 
                                 aenc(<$USR, ~UK_i_USR_O, CD_b>, pk(~outstation_priv_key))>,
                                ~user_priv_key)
             ) ▶₁ #i )
        case U3_U4_U5_new_update_key_asymmetric_mode
        solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                                  pk(~outstation_priv_key), pk(~user_priv_key)
               ) ▶₂ #i )
          case Initial_key_pre_distribution
          solve( NewUpdateKey( id2, ~UK_i_USR_O, update_key_method, <oprk2, uprk2>
                 ) @ #j )
            case U3_U4_U5_new_update_key_asymmetric_mode
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma update_key_secrecy [use_induction]:
  all-traces
  "((∀ id uk #i.
      ((¬(∃ #r. UpdateKeyReveal( uk ) @ #r)) ∧
       (NewUpdateKey( id, uk, 'Initial', 'usb_stick' ) @ #i)) ⇒
      (¬(∃ #j. K( uk ) @ #j))) ∧
    (∀ id uk ak #i.
      (((¬(∃ #r. AuthorityKeyReveal( ak ) @ #r)) ∧
        (¬(∃ #r. UpdateKeyReveal( uk ) @ #r))) ∧
       (NewUpdateKey( id, uk, 'Symmetric', ak ) @ #i)) ⇒
      (¬(∃ #j. K( uk ) @ #j)))) ∧
   (∀ id uk oprk uprk #i.
     (((¬(∃ #r. OutstationPrivateKeyReveal( oprk ) @ #r)) ∧
       (¬(∃ #r. UpdateKeyReveal( uk ) @ #r))) ∧
      (NewUpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i)) ⇒
     (¬(∃ #j. K( uk ) @ #j)))"
/*
guarded formula characterizing all counter-examples:
"((∃ id uk #i.
    (NewUpdateKey( id, uk, 'Initial', 'usb_stick' ) @ #i)
   ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧ (∃ #j. (K( uk ) @ #j))) ∨
  (∃ id uk ak #i.
    (NewUpdateKey( id, uk, 'Symmetric', ak ) @ #i)
   ∧
    (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
    (∃ #j. (K( uk ) @ #j))) ∨
  (∃ id uk oprk uprk #i.
    (NewUpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i)
   ∧
    (∀ #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
    (∃ #j. (K( uk ) @ #j))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ id uk #i.
           (NewUpdateKey( id, uk, 'Initial', 'usb_stick' ) @ #i)
          ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧ (∃ #j. (K( uk ) @ #j)))  ∥
         (∃ id uk ak #i.
           (NewUpdateKey( id, uk, 'Symmetric', ak ) @ #i)
          ∧
           (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
           (∃ #j. (K( uk ) @ #j)))  ∥
         (∃ id uk oprk uprk #i.
           (NewUpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i)
          ∧
           (∀ #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
           (∃ #j. (K( uk ) @ #j))) )
    case case_1
    solve( NewUpdateKey( id, uk, 'Initial', 'usb_stick' ) @ #i )
      case Initial_key_pre_distribution
      solve( !F_AuthorityKey( ~AK ) ▶₀ #i )
        case Authority_Symm_Key
        solve( !KU( ~UK_i_USR_O ) @ #vk )
          case Update_key_reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    solve( NewUpdateKey( id, uk, 'Symmetric', ak ) @ #i )
      case U3_U4_U5_new_update_key_symmetric_mode
      solve( !F_UserInvariants( ~uid, ~AK, $USR, $OSID, ~linkid,
                                ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₁ #i )
        case Initial_key_pre_distribution
        solve( !F_AuthorityKey( ~AK ) ▶₂ #i )
          case Authority_Symm_Key
          solve( !KU( ~UK_i_USR_O ) @ #vk )
            case U3_U4_U5_new_update_key_symmetric_mode
            solve( !KU( ~AK ) @ #vk.6 )
              case authority_symm_key_reveal
              by contradiction /* from formulas */
            qed
          next
            case Update_key_reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_3
    solve( NewUpdateKey( id, uk, 'Asymmetric', <oprk, uprk> ) @ #i )
      case U3_U4_U5_new_update_key_asymmetric_mode
      solve( !F_UserInvariants( ~uid, ~AK, $USR, $OSID, ~linkid,
                                ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₁ #i )
        case Initial_key_pre_distribution
        solve( !KU( ~UK_i_USR_O ) @ #vk )
          case U3_U4_U5_new_update_key_asymmetric_mode
          solve( !KU( ~outstation_priv_key ) @ #vk.6 )
            case outstation_asymm_priv_key_reveal
            by contradiction /* from formulas */
          qed
        next
          case Update_key_reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma session_key_secrecy [use_induction]:
  all-traces
  "((∀ id uk cdsk mdsk #i.
      ((((¬(∃ #r. UpdateKeyReveal( uk ) @ #r)) ∧
         (¬(∃ #r. CDSKReveal( cdsk ) @ #r))) ∧
        (¬(∃ #r. MDSKReveal( mdsk ) @ #r))) ∧
       (Sourced_SKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #i)) ⇒
      (¬((∃ #j. K( cdsk ) @ #j) ∨ (∃ #j. K( mdsk ) @ #j)))) ∧
    (∀ id uk ak cdsk mdsk #i.
      (((((¬(∃ #r. AuthorityKeyReveal( ak ) @ #r)) ∧
          (¬(∃ #r. UpdateKeyReveal( uk ) @ #r))) ∧
         (¬(∃ #r. CDSKReveal( cdsk ) @ #r))) ∧
        (¬(∃ #r. MDSKReveal( mdsk ) @ #r))) ∧
       (Sourced_SKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #i)) ⇒
      (¬((∃ #j. K( cdsk ) @ #j) ∨ (∃ #j. K( mdsk ) @ #j))))) ∧
   (∀ id uk cdsk mdsk oprk #i.
     (((((¬(∃ #r. OutstationPrivateKeyReveal( oprk ) @ #r)) ∧
         (¬(∃ #r. UpdateKeyReveal( uk ) @ #r))) ∧
        (¬(∃ #r. CDSKReveal( cdsk ) @ #r))) ∧
       (¬(∃ #r. MDSKReveal( mdsk ) @ #r))) ∧
      (Sourced_SKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #i)) ⇒
     (¬((∃ #j. K( cdsk ) @ #j) ∨ (∃ #j. K( mdsk ) @ #j))))"
/*
guarded formula characterizing all counter-examples:
"((∃ id uk cdsk mdsk #i.
    (Sourced_SKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #i)
   ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (CDSKReveal( cdsk ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (MDSKReveal( mdsk ) @ #r) ⇒ ⊥) ∧
    (((∃ #j. (K( cdsk ) @ #j)) ∨ (∃ #j. (K( mdsk ) @ #j))))) ∨
  (∃ id uk ak cdsk mdsk #i.
    (Sourced_SKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #i)
   ∧
    (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (CDSKReveal( cdsk ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (MDSKReveal( mdsk ) @ #r) ⇒ ⊥) ∧
    (((∃ #j. (K( cdsk ) @ #j)) ∨ (∃ #j. (K( mdsk ) @ #j))))) ∨
  (∃ id uk cdsk mdsk oprk #i.
    (Sourced_SKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #i)
   ∧
    (∀ #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (CDSKReveal( cdsk ) @ #r) ⇒ ⊥) ∧
    (∀ #r. (MDSKReveal( mdsk ) @ #r) ⇒ ⊥) ∧
    (((∃ #j. (K( cdsk ) @ #j)) ∨ (∃ #j. (K( mdsk ) @ #j))))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ id uk cdsk mdsk #i.
           (Sourced_SKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #i)
          ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (CDSKReveal( cdsk ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (MDSKReveal( mdsk ) @ #r) ⇒ ⊥) ∧
           (((∃ #j. (K( cdsk ) @ #j)) ∨ (∃ #j. (K( mdsk ) @ #j)))))  ∥
         (∃ id uk ak cdsk mdsk #i.
           (Sourced_SKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #i)
          ∧
           (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (CDSKReveal( cdsk ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (MDSKReveal( mdsk ) @ #r) ⇒ ⊥) ∧
           (((∃ #j. (K( cdsk ) @ #j)) ∨ (∃ #j. (K( mdsk ) @ #j)))))  ∥
         (∃ id uk cdsk mdsk oprk #i.
           (Sourced_SKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #i)
          ∧
           (∀ #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (CDSKReveal( cdsk ) @ #r) ⇒ ⊥) ∧
           (∀ #r. (MDSKReveal( mdsk ) @ #r) ⇒ ⊥) ∧
           (((∃ #j. (K( cdsk ) @ #j)) ∨ (∃ #j. (K( mdsk ) @ #j))))) )
    case case_1
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( (∃ #j. (K( cdsk ) @ #j))  ∥ (∃ #j. (K( mdsk ) @ #j)) )
        case case_1
        solve( !OutUpdateKey( ~oid, ~ou, uk, 'Initial', 'usb_stick' ) ▶₄ #i )
          case Initial_key_pre_distribution
          solve( (last(#i))  ∥
                 (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (CDSKReveal( cdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (MDSKReveal( mdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 ((∀ #j. (K( cdsk ) @ #j) ⇒ last(#j)) ∧
                  (∀ #j. (K( mdsk ) @ #j) ⇒ last(#j))) )
            case case_1
            solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                   ) @ #vk.4 )
              case S3_SKC_session_key_change
              solve( !KU( ~CDSK_j_USR_O ) @ #vk.7 )
                case S3_SKC_session_key_change
                solve( !KU( ~UK_i_USR_O ) @ #vk.11 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              next
                case cdsk_reveal
                by contradiction /* from formulas */
              qed
            next
              case c_senc
              solve( !KU( ~UK_i_USR_O ) @ #vk.9 )
                case Update_key_reveal
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                   ) @ #vk.4 )
              case S3_SKC_session_key_change
              solve( !KU( ~CDSK_j_USR_O ) @ #vk.7 )
                case S3_SKC_session_key_change
                solve( !KU( ~UK_i_USR_O ) @ #vk.11 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              next
                case cdsk_reveal
                by contradiction /* from formulas */
              qed
            next
              case c_senc
              solve( !KU( ~UK_i_USR_O ) @ #vk.9 )
                case Update_key_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( !OutUpdateKey( ~oid, ~ou, uk, 'Initial', 'usb_stick' ) ▶₄ #i )
          case Initial_key_pre_distribution
          solve( (last(#i))  ∥
                 (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (CDSKReveal( cdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (MDSKReveal( mdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 ((∀ #j. (K( cdsk ) @ #j) ⇒ last(#j)) ∧
                  (∀ #j. (K( mdsk ) @ #j) ⇒ last(#j))) )
            case case_1
            solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                   ) @ #vk.4 )
              case S3_SKC_session_key_change
              solve( !KU( ~MDSK_j_USR_O ) @ #vk.7 )
                case S3_SKC_session_key_change
                solve( !KU( ~UK_i_USR_O ) @ #vk.11 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              next
                case mdsk_reveal
                by contradiction /* from formulas */
              qed
            next
              case c_senc
              solve( !KU( ~UK_i_USR_O ) @ #vk.10 )
                case Update_key_reveal
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                   ) @ #vk.4 )
              case S3_SKC_session_key_change
              solve( !KU( ~MDSK_j_USR_O ) @ #vk.7 )
                case S3_SKC_session_key_change
                solve( !KU( ~UK_i_USR_O ) @ #vk.11 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              next
                case mdsk_reveal
                by contradiction /* from formulas */
              qed
            next
              case c_senc
              solve( !KU( ~UK_i_USR_O ) @ #vk.10 )
                case Update_key_reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( (∃ #j. (K( cdsk ) @ #j))  ∥ (∃ #j. (K( mdsk ) @ #j)) )
        case case_1
        solve( !OutUpdateKey( ~oid, ~ou, uk, 'Symmetric', ak ) ▶₄ #i )
          case U6_UKCC_Update_Key_Change_Confirmation
          solve( (last(#i))  ∥
                 (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (CDSKReveal( cdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (MDSKReveal( mdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 ((∀ #j. (K( cdsk ) @ #j) ⇒ last(#j)) ∧
                  (∀ #j. (K( mdsk ) @ #j) ⇒ last(#j))) )
            case case_1
            solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j. (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.2)  ∥
                     (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #vr.2)  ∥
                     (∃ #j.
                       (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #vr.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j.1 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( !F_UserInvariants( ~uid.1, ~AK, $USR.1, $OSID.1, ~linkid,
                                            ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                         ) ▶₁ #j.1 )
                    case Initial_key_pre_distribution
                    solve( !F_AuthorityKey( ~AK ) ▶₂ #j.1 )
                      case Authority_Symm_Key
                      solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.2 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                               ) @ #vk.9 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.12 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.24 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.26 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          next
            case case_6
            solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j. (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.2)  ∥
                     (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #vr.2)  ∥
                     (∃ #j.
                       (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #vr.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j.1 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( !F_UserInvariants( ~uid.1, ~AK, $USR.1, $OSID.1, ~linkid,
                                            ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                         ) ▶₁ #j.1 )
                    case Initial_key_pre_distribution
                    solve( !F_AuthorityKey( ~AK ) ▶₂ #j.1 )
                      case Authority_Symm_Key
                      solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.2 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                               ) @ #vk.9 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.12 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.24 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.26 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( !OutUpdateKey( ~oid, ~ou, uk, 'Symmetric', ak ) ▶₄ #i )
          case U6_UKCC_Update_Key_Change_Confirmation
          solve( (last(#i))  ∥
                 (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (CDSKReveal( cdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (MDSKReveal( mdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 ((∀ #j. (K( cdsk ) @ #j) ⇒ last(#j)) ∧
                  (∀ #j. (K( mdsk ) @ #j) ⇒ last(#j))) )
            case case_1
            solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j. (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.2)  ∥
                     (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #vr.2)  ∥
                     (∃ #j.
                       (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #vr.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j.1 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( !F_UserInvariants( ~uid.1, ~AK, $USR.1, $OSID.1, ~linkid,
                                            ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                         ) ▶₁ #j.1 )
                    case Initial_key_pre_distribution
                    solve( !F_AuthorityKey( ~AK ) ▶₂ #j.1 )
                      case Authority_Symm_Key
                      solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.2 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                               ) @ #vk.9 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.12 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.24 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.26 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          next
            case case_6
            solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                   (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                   (∃ #j. (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #i) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.2)  ∥
                     (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #vr.2)  ∥
                     (∃ #j.
                       (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #vr.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              next
                case case_3
                solve( NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j.1 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( !F_UserInvariants( ~uid.1, ~AK, $USR.1, $OSID.1, ~linkid,
                                            ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                         ) ▶₁ #j.1 )
                    case Initial_key_pre_distribution
                    solve( !F_AuthorityKey( ~AK ) ▶₂ #j.1 )
                      case Authority_Symm_Key
                      solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.2 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                               ) @ #vk.9 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.12 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.24 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.26 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_3
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( (∃ #j. (K( cdsk ) @ #j))  ∥ (∃ #j. (K( mdsk ) @ #j)) )
        case case_1
        solve( !OutUpdateKey( ~oid, ~ou, uk, 'Asymmetric', oprk ) ▶₄ #i )
          case U6_UKCS_Update_Key_Change_Signature
          solve( (last(#i))  ∥
                 (∃ #r.
                   (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r)
                  ∧
                   ¬(last(#r)))  ∥
                 (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (CDSKReveal( cdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (MDSKReveal( mdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 ((∀ #j. (K( cdsk ) @ #j) ⇒ last(#j)) ∧
                  (∀ #j. (K( mdsk ) @ #j) ⇒ last(#j))) )
            case case_1
            solve( (∃ #r.
                     (UserPrivateKeyReveal( ~user_priv_key ) @ #r) ∧ #r < #vr.2)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                    <~outstation_priv_key, ~user_priv_key>
                      ) @ #j)
                    ∧
                     #j < #vr.2) )
              case case_1
              solve( !UserPrivateKey( ~user_priv_key ) ▶₀ #r )
                case Initial_key_pre_distribution
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.1>, 
                                  aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.12 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                         ) @ #vk.9 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.13 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.10 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.15 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.31 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.33 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_aenc
                    solve( !KU( pk(~outstation_priv_key) ) @ #vk.23 )
                      case c_pk
                      solve( !KU( ~outstation_priv_key ) @ #vk.25 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                   <~outstation_priv_key, ~user_priv_key>
                     ) @ #j.1 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !F_UserInvariants( ~uid.1, ~AK.1, $USR.1, $OSID.1, ~linkid,
                                          ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
                       ) ▶₁ #j.1 )
                  case Initial_key_pre_distribution
                  solve( !KU( sign(<<$OSID, CD_a.1, ~CD_b.1, KSQ.2>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.10 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.13 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.19 )
                      case user_asymm_priv_key_reveal
                      solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                             ) @ #vk.11 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.14 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.32 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.28 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.34 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          next
            case case_6
            solve( (∃ #r.
                     (UserPrivateKeyReveal( ~user_priv_key ) @ #r) ∧ #r < #vr.2)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                    <~outstation_priv_key, ~user_priv_key>
                      ) @ #j)
                    ∧
                     #j < #vr.2) )
              case case_1
              solve( !UserPrivateKey( ~user_priv_key ) ▶₀ #r )
                case Initial_key_pre_distribution
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.1>, 
                                  aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.12 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                         ) @ #vk.9 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.13 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.10 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.15 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.31 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.33 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_aenc
                    solve( !KU( pk(~outstation_priv_key) ) @ #vk.23 )
                      case c_pk
                      solve( !KU( ~outstation_priv_key ) @ #vk.25 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                   <~outstation_priv_key, ~user_priv_key>
                     ) @ #j.1 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !F_UserInvariants( ~uid.1, ~AK.1, $USR.1, $OSID.1, ~linkid,
                                          ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
                       ) ▶₁ #j.1 )
                  case Initial_key_pre_distribution
                  solve( !KU( sign(<<$OSID, CD_a.1, ~CD_b.1, KSQ.2>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.10 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.13 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.19 )
                      case user_asymm_priv_key_reveal
                      solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                             ) @ #vk.11 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.14 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.32 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.28 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.34 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( !OutUpdateKey( ~oid, ~ou, uk, 'Asymmetric', oprk ) ▶₄ #i )
          case U6_UKCS_Update_Key_Change_Signature
          solve( (last(#i))  ∥
                 (∃ #r.
                   (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r)
                  ∧
                   ¬(last(#r)))  ∥
                 (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (CDSKReveal( cdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ #r. (MDSKReveal( mdsk ) @ #r) ∧ ¬(last(#r)))  ∥
                 ((∀ #j. (K( cdsk ) @ #j) ⇒ last(#j)) ∧
                  (∀ #j. (K( mdsk ) @ #j) ⇒ last(#j))) )
            case case_1
            solve( (∃ #r.
                     (UserPrivateKeyReveal( ~user_priv_key ) @ #r) ∧ #r < #vr.2)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                    <~outstation_priv_key, ~user_priv_key>
                      ) @ #j)
                    ∧
                     #j < #vr.2) )
              case case_1
              solve( !UserPrivateKey( ~user_priv_key ) ▶₀ #r )
                case Initial_key_pre_distribution
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.1>, 
                                  aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.12 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                         ) @ #vk.9 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.10 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.15 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.31 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.28 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.33 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_aenc
                    solve( !KU( pk(~outstation_priv_key) ) @ #vk.23 )
                      case c_pk
                      solve( !KU( ~outstation_priv_key ) @ #vk.25 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                   <~outstation_priv_key, ~user_priv_key>
                     ) @ #j.1 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !F_UserInvariants( ~uid.1, ~AK.1, $USR.1, $OSID.1, ~linkid,
                                          ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
                       ) ▶₁ #j.1 )
                  case Initial_key_pre_distribution
                  solve( !KU( sign(<<$OSID, CD_a.1, ~CD_b.1, KSQ.2>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.10 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.19 )
                      case user_asymm_priv_key_reveal
                      solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                             ) @ #vk.11 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.14 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.32 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.29 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.34 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          next
            case case_6
            solve( (∃ #r.
                     (UserPrivateKeyReveal( ~user_priv_key ) @ #r) ∧ #r < #vr.2)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                    <~outstation_priv_key, ~user_priv_key>
                      ) @ #j)
                    ∧
                     #j < #vr.2) )
              case case_1
              solve( !UserPrivateKey( ~user_priv_key ) ▶₀ #r )
                case Initial_key_pre_distribution
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.1>, 
                                  aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.12 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                         ) @ #vk.9 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.10 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.15 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.31 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.28 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.33 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_aenc
                    solve( !KU( pk(~outstation_priv_key) ) @ #vk.23 )
                      case c_pk
                      solve( !KU( ~outstation_priv_key ) @ #vk.25 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                   <~outstation_priv_key, ~user_priv_key>
                     ) @ #j.1 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !F_UserInvariants( ~uid.1, ~AK.1, $USR.1, $OSID.1, ~linkid,
                                          ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
                       ) ▶₁ #j.1 )
                  case Initial_key_pre_distribution
                  solve( !KU( sign(<<$OSID, CD_a.1, ~CD_b.1, KSQ.2>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.10 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.19 )
                      case user_asymm_priv_key_reveal
                      solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                             ) @ #vk.11 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.14 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.32 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.29 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.34 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma sessionkeys_sourced [reuse, use_induction]:
  all-traces
  "((∀ id uk cdsk mdsk #i.
      ((¬(∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (#r < #i))) ∧
       (Sourced_SKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #i)) ⇒
      (∃ #j.
        (NewSKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #j) ∧
        (#j < #i))) ∧
    (∀ id uk ak cdsk mdsk #i.
      (((¬(∃ #r. (AuthorityKeyReveal( ak ) @ #r) ∧ (#r < #i))) ∧
        (¬(∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (#r < #i)))) ∧
       (Sourced_SKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #i)) ⇒
      (∃ #j.
        (NewSKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #j) ∧ (#j < #i)))) ∧
   (∀ id uk cdsk mdsk oprk #i.
     (((¬(∃ #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ (#r < #i))) ∧
       (¬(∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (#r < #i)))) ∧
      (Sourced_SKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #i)) ⇒
     (∃ #j.
       (NewSKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"((∃ id uk cdsk mdsk #i.
    (Sourced_SKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #i)
   ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #j.
      (NewSKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #j)
     ⇒
      ¬(#j < #i))) ∨
  (∃ id uk ak cdsk mdsk #i.
    (Sourced_SKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #i)
   ∧
    (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #j.
      (NewSKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ id uk cdsk mdsk oprk #i.
    (Sourced_SKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #i)
   ∧
    (∀ #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
    (∀ #j.
      (NewSKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ id uk cdsk mdsk #i.
           (Sourced_SKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #i)
          ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #j.
             (NewSKs( id, uk, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #j)
            ⇒
             ¬(#j < #i)))  ∥
         (∃ id uk ak cdsk mdsk #i.
           (Sourced_SKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #i)
          ∧
           (∀ #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #j.
             (NewSKs( id, uk, cdsk, mdsk, 'Symmetric', ak ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ id uk cdsk mdsk oprk #i.
           (Sourced_SKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #i)
          ∧
           (∀ #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
           (∀ #j.
             (NewSKs( id, uk, cdsk, mdsk, 'Asymmetric', oprk ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !OutUpdateKey( ~oid, ~ou, uk, 'Initial', 'usb_stick' ) ▶₄ #i )
        case Initial_key_pre_distribution
        solve( (last(#i))  ∥
               (∃ #r.
                 (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewSKs( ~linkid, ~UK_i_USR_O, cdsk, mdsk, 'Initial', 'usb_stick' ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                 ) @ #vk.4 )
            case S3_SKC_session_key_change
            by contradiction /* from formulas */
          next
            case c_senc
            solve( !KU( ~UK_i_USR_O ) @ #vk.8 )
              case Update_key_reveal
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !OutUpdateKey( ~oid, ~ou, uk, 'Symmetric', ak ) ▶₄ #i )
        case U6_UKCC_Update_Key_Change_Confirmation
        solve( (last(#i))  ∥
               (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewSKs( ~linkid, uk, cdsk, mdsk, 'Symmetric', ~AK ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                 (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                 (∃ #j. (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #i) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.2)  ∥
                   (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #vr.2)  ∥
                   (∃ #j.
                     (NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j) ∧ #j < #vr.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              solve( NewUpdateKey( ~linkid, uk, 'Symmetric', ~AK ) @ #j )
                case U3_U4_U5_new_update_key_symmetric_mode
                solve( !F_UserInvariants( ~uid, ~AK, $USR.1, $OSID.1, ~linkid,
                                          ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                       ) ▶₁ #j )
                  case Initial_key_pre_distribution
                  solve( !F_AuthorityKey( ~AK ) ▶₂ #j )
                    case Authority_Symm_Key
                    solve( NewUpdateKey( ~linkid, ~UK_i_USR_O, 'Symmetric', ~AK ) @ #j.1 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                             ) @ #vk.9 )
                        case S3_SKC_session_key_change
                        by contradiction /* from formulas */
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.26 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_3
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !OutUpdateKey( ~oid, ~ou, uk, 'Asymmetric', oprk ) ▶₄ #i )
        case U6_UKCS_Update_Key_Change_Signature
        solve( (last(#i))  ∥
               (∃ #r.
                 (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r)
                ∧
                 (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (¬(last(#r))) ∧ (#r < #i))  ∥
               (∃ #j.
                 (NewSKs( ~linkid, uk, cdsk, mdsk, 'Asymmetric', ~outstation_priv_key
                  ) @ #j)
                ∧
                 (¬(last(#j))) ∧ (#j < #i)) )
          case case_1
          solve( (∃ #r.
                   (UserPrivateKeyReveal( ~user_priv_key ) @ #r) ∧ #r < #vr.2)  ∥
                 (∃ #j.
                   (NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                  <~outstation_priv_key, ~user_priv_key>
                    ) @ #j)
                  ∧
                   #j < #vr.2) )
            case case_1
            solve( !UserPrivateKey( ~user_priv_key ) ▶₀ #r )
              case Initial_key_pre_distribution
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.1>, 
                                aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.11 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                       ) @ #vk.9 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( aenc(<$USR, uk, ~CD_b>, pk(~outstation_priv_key))
                       ) @ #vk.12 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                         ) @ #vk.10 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.33 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_aenc
                  solve( !KU( pk(~outstation_priv_key) ) @ #vk.22 )
                    case c_pk
                    solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( NewUpdateKey( ~linkid, uk, 'Asymmetric',
                                 <~outstation_priv_key, ~user_priv_key>
                   ) @ #j )
              case U3_U4_U5_new_update_key_asymmetric_mode
              solve( !F_UserInvariants( ~uid, ~AK.1, $USR.1, $OSID.1, ~linkid,
                                        ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
                     ) ▶₁ #j )
                case Initial_key_pre_distribution
                solve( !KU( sign(<<$OSID, CD_a.1, ~CD_b.1, KSQ.2>, 
                                  aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.12 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                         ) @ #vk.10 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.26 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key ) @ #vk.18 )
                    case user_asymm_priv_key_reveal
                    solve( !KU( senc(<cdsk, mdsk, KSQ, $USR, keystatus, CD_j>, ~UK_i_USR_O)
                           ) @ #vk.11 )
                      case S3_SKC_session_key_change
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.34 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma skiup_agreement [reuse, use_induction]:
  all-traces
  "∀ id id2 uk uk2 cdsk mdsk type source type2 source2 #i #j.
    ((((((¬(∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ (#r < #i))) ∧
         ((¬(type = 'Asymmetric')) ∨
          (¬(∃ #r. OutstationPrivateKeyReveal( source ) @ #r)))) ∧
        ((¬(type = 'Symmetric')) ∨
         (¬(∃ #r. AuthorityKeyReveal( source ) @ #r)))) ∧
       (Sourced_SKs( id, uk, cdsk, mdsk, type, source ) @ #i)) ∧
      (NewSKs( id2, uk2, cdsk, mdsk, type2, source2 ) @ #j)) ∧
     (#j < #i)) ⇒
    ((((id = id2) ∧ (uk = uk2)) ∧ (type = type2)) ∧ (source = source2))"
/*
guarded formula characterizing all counter-examples:
"∃ id id2 uk uk2 cdsk mdsk type source type2 source2 #i #j.
  (Sourced_SKs( id, uk, cdsk, mdsk, type, source ) @ #i) ∧
  (NewSKs( id2, uk2, cdsk, mdsk, type2, source2 ) @ #j)
 ∧
  (∀ #r. (UpdateKeyReveal( uk ) @ #r) ⇒ ¬(#r < #i)) ∧
  (((¬(type = 'Asymmetric')) ∨
    (∀ #r. (OutstationPrivateKeyReveal( source ) @ #r) ⇒ ⊥))) ∧
  (((¬(type = 'Symmetric')) ∨
    (∀ #r. (AuthorityKeyReveal( source ) @ #r) ⇒ ⊥))) ∧
  (#j < #i) ∧
  (((¬(id = id2)) ∨
    (¬(uk = uk2)) ∨
    (¬(type = type2)) ∨
    (¬(source = source2))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                  ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
         ) ▶₃ #i )
    case Initial_key_pre_distribution
    solve( !F_UserInvariants( ~uid, AK.1, $USR.1, $OSID.1, ~linkid.1,
                              ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
           ) ▶₁ #j )
      case Initial_key_pre_distribution
      solve( (¬(type = 'Asymmetric'))  ∥
             (∀ #r. (OutstationPrivateKeyReveal( source ) @ #r) ⇒ ⊥) )
        case case_1
        solve( (¬(type = 'Symmetric'))  ∥
               (∀ #r. (AuthorityKeyReveal( source ) @ #r) ⇒ ⊥) )
          case case_1
          solve( (¬(~linkid = ~linkid.1))  ∥ (¬(uk = uk2))  ∥ (¬(type = type2))  ∥
                 (¬(source = source2)) )
            case case_1
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              by contradiction /* from formulas */
            next
              case U6_UKCS_Update_Key_Change_Signature
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              by contradiction /* from formulas */
            next
              case U6_UKCS_Update_Key_Change_Signature
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              by contradiction /* from formulas */
            next
              case U6_UKCS_Update_Key_Change_Signature
              by contradiction /* from formulas */
            qed
          next
            case case_4
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              by contradiction /* from formulas */
            next
              case U6_UKCS_Update_Key_Change_Signature
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( (¬(~linkid = ~linkid.1))  ∥ (¬(uk = uk2))  ∥ (¬(type = type2))  ∥
                 (¬(source = source2)) )
            case case_1
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCS_Update_Key_Change_Signature
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCS_Update_Key_Change_Signature
              by contradiction /* from formulas */
            qed
          next
            case case_3
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCS_Update_Key_Change_Signature
              by contradiction /* from formulas */
            qed
          next
            case case_4
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCS_Update_Key_Change_Signature
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case case_2
        solve( (¬(type = 'Symmetric'))  ∥
               (∀ #r. (AuthorityKeyReveal( source ) @ #r) ⇒ ⊥) )
          case case_1
          solve( (¬(~linkid = ~linkid.1))  ∥ (¬(uk = uk2))  ∥ (¬(type = type2))  ∥
                 (¬(source = source2)) )
            case case_1
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              by contradiction /* from formulas */
            next
              case U6_UKCS_Update_Key_Change_Signature
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              by contradiction /* from formulas */
            next
              case U6_UKCS_Update_Key_Change_Signature
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_3
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              by contradiction /* from formulas */
            next
              case U6_UKCS_Update_Key_Change_Signature
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              by contradiction /* from formulas */
            next
              case U6_UKCS_Update_Key_Change_Signature
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (¬(~linkid = ~linkid.1))  ∥ (¬(uk = uk2))  ∥ (¬(type = type2))  ∥
                 (¬(source = source2)) )
            case case_1
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCS_Update_Key_Change_Signature
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCS_Update_Key_Change_Signature
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_3
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCS_Update_Key_Change_Signature
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                by contradiction /* from formulas */
              qed
            qed
          next
            case case_4
            solve( !OutUpdateKey( ~oid, ~ou, uk, type, source ) ▶₄ #i )
              case Initial_key_pre_distribution
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                by contradiction /* from formulas */
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, ~UK_i_USR_O, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Initial',
                                  'usb_stick'
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCC_Update_Key_Change_Confirmation
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Symmetric', ~AK
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case U6_UKCS_Update_Key_Change_Signature
              solve( !UserUpdateKey( ~uid, ~uu, uk2, type2, source2 ) ▶₂ #j )
                case Initial_key_pre_distribution
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case U7_receive_UKCC_from_Outstation_asymm
                solve( (∃ #r.
                         (OutstationPrivateKeyReveal( ~outstation_priv_key ) @ #r) ∧ #r < #i)  ∥
                       (∃ #r. (UpdateKeyReveal( uk ) @ #r) ∧ #r < #i)  ∥
                       (∃ #j.
                         (NewSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O, 'Asymmetric',
                                  ~outstation_priv_key
                          ) @ #j)
                        ∧
                         #j < #i) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma asdu_agreement_implies_mode_agreement [hide_lemma=update_key_sourced,
                                             hide_lemma=sessionkeys_sourced]:
  all-traces
  "(((¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ∧
     (¬(∃ oprk #r. OutstationPrivateKeyReveal( oprk ) @ #r))) ∧
    (¬(∃ uprk #r. UserPrivateKeyReveal( uprk ) @ #r))) ⇒
   (∀ linkid ar mode direction linkid2 mode2 direction2 #i #j.
     ((((∀ cdsk mdsk uk type source.
          (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i) ⇒
          (((¬(∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (#kr < #i))) ∧
            ((direction = 'control') ⇒
             (¬(∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (#skr < #i))))) ∧
           ((direction = 'monitor') ⇒
            (¬(∃ #skr. (MDSKReveal( mdsk ) @ #skr) ∧ (#skr < #i)))))) ∧
        (AuthASDU( linkid, ar, mode, direction ) @ #i)) ∧
       (SentASDU( linkid2, ar, mode2, direction2 ) @ #j)) ∧
      (#j < #i)) ⇒
     (((mode = mode2) ∧ (direction = direction2)) ∧ (linkid = linkid2)))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∀ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ⊥) ∧
 (∀ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ⇒ ⊥) ∧
 (∃ linkid ar mode direction linkid2 mode2 direction2 #i #j.
   (AuthASDU( linkid, ar, mode, direction ) @ #i) ∧
   (SentASDU( linkid2, ar, mode2, direction2 ) @ #j)
  ∧
   (∀ cdsk mdsk uk type source.
     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
    ⇒
     (∀ #kr. (UpdateKeyReveal( uk ) @ #kr) ⇒ ¬(#kr < #i)) ∧
     (((¬(direction = 'control')) ∨
       (∀ #skr. (CDSKReveal( cdsk ) @ #skr) ⇒ ¬(#skr < #i)))) ∧
     (((¬(direction = 'monitor')) ∨
       (∀ #skr. (MDSKReveal( mdsk ) @ #skr) ⇒ ¬(#skr < #i))))) ∧
   (#j < #i) ∧
   (((¬(mode = mode2)) ∨
     (¬(direction = direction2)) ∨
     (¬(linkid = linkid2)))))"
*/
simplify
solve( AuthASDU( linkid, ar, mode, direction ) @ #i )
  case A4_idle_receive_C_AC_aggressive
  solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                         UK_i_USR_O, update_key_method, auth_keys_used
         ) ▶₂ #i )
    case S4_SKS_session_key_status_case_1
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
        case A2_C_AC_Authentication_Challenge
        solve( SentASDU( linkid2,
                         <h(CSQ), $USR, 
                          hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Aggressive
          solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                    UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S3_SKC_session_key_change_case_1
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.22 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S3_SKC_session_key_change_case_2
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.13 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S3_SKC_session_key_change_case_3
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.13 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case A3_M_AR_Authentication_Aggressive
          solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S4_SKS_session_key_status_case_1
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.16 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.25 )
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.28 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.13 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.1)
                         ) @ #vk.19 )
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.5>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.20 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.22 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.36 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key.1 ) @ #vk.43 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.26 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case S4_SKS_session_key_status_case_2
    solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
        case A2_C_AC_Authentication_Challenge
        solve( SentASDU( linkid2,
                         <h(CSQ), $USR, 
                          hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Aggressive
          solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                    UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S3_SKC_session_key_change_case_1
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.30 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.36 )
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.41 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.39 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S3_SKC_session_key_change_case_2
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.16 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                         ((~linkid = ~linkid.1) ∧ (~AK = ~AK.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.41 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK.1 ) @ #vk.42 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.44 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S3_SKC_session_key_change_case_3
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.16 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.41 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key.1 ) @ #vk.42 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.44 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case A3_M_AR_Authentication_Aggressive
          solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S4_SKS_session_key_status_case_1
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                         (~linkid = ~linkid.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.18 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                             ) @ #vk.23 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.1)
                               ) @ #vk.25 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.1 ) @ #vk.36 )
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                                case U3_U4_U5_new_update_key_symmetric_mode
                                solve( !KU( ~AK ) @ #vk.44 )
                                  case authority_symm_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case U6_UKCS_Update_Key_Change_Signature
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.39 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.25 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.19 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                         (~linkid = ~linkid.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.21 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                             ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         UK_i_USR_O.1)
                               ) @ #vk.28 )
                          case c_senc
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.51 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case U6_UKCS_Update_Key_Change_Signature
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.44 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.32 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.6>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.27 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.23 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                           (~linkid = ~linkid.2) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.24 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.2, ~CD_b.1, h(KSQ.5)>, ~UK_i_USR_O)
                               ) @ #vk.29 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                            keystatus.1, CD_j.1>,
                                           ~UK_i_USR_O.1)
                                 ) @ #vk.31 )
                            case c_senc
                            solve( !KU( ~UK_i_USR_O.1 ) @ #vk.47 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~outstation_priv_key.1 ) @ #vk.54 )
                                  case outstation_asymm_priv_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~UK_i_USR_O ) @ #vk.54 )
                                  case U3_U4_U5_new_update_key_symmetric_mode
                                  solve( !KU( ~AK ) @ #vk.55 )
                                    case authority_symm_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case Update_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case U6_UKCS_Update_Key_Change_Signature
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.48 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.50 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.49 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.36 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.33 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case S4_SKS_session_key_status_case_3
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key)
           ) ▶₃ #i )
      case Initial_key_pre_distribution
      solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
        case A2_C_AC_Authentication_Challenge
        solve( SentASDU( linkid2,
                         <h(CSQ), $USR, 
                          hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Aggressive
          solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                    UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S3_SKC_session_key_change_case_1
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                  aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.18 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.40 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key ) @ #vk.28 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S3_SKC_session_key_change_case_2
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                  aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.20 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.19 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.40 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.45 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key ) @ #vk.33 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S3_SKC_session_key_change_case_3
              solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_C_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                  aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.20 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.19 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.40 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.45 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key ) @ #vk.33 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case A3_M_AR_Authentication_Aggressive
          solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S4_SKS_session_key_status_case_1
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                  aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.18 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.25 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.37 )
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.40 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.44 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.45 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.38 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key ) @ #vk.26 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                  aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.20 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.20 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.1)
                           ) @ #vk.28 )
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.47 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.51 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.52 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.45 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key ) @ #vk.33 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(cCSQ), $USR, ~CD>
                     ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                  aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.20 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.6>, 
                                    aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.29 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.23 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.31 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.48 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.51 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.55 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.51 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.55 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.56 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.49 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.37 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key ) @ #vk.33 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case A4_idle_receive_M_AC_aggressive
  solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                            pk(~outstation_priv_key), pk(~user_priv_key)
         ) ▶₂ #i )
    case Initial_key_pre_distribution
    solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                            UK_i_USR_O, update_key_method, auth_keys_used
           ) ▶₃ #i )
      case S3_SKC_session_key_change_case_1
      solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
        case A2_M_AC_Authentication_Challenge
        solve( SentASDU( linkid2,
                         <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Aggressive
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                       MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                      ) ▶₃ #j )
          qed
        next
          case A3_M_AR_Authentication_Aggressive
          solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S4_SKS_session_key_status_case_1
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 ~UK_i_USR_O.1)
                       ) @ #vk.15 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.22 )
                    case Update_key_reveal
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.25 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.29 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 UK_i_USR_O.1)
                       ) @ #vk.18 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.8)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.8) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.32 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.3>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.22 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.21 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key.1 ) @ #vk.40 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.40 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.28 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case S3_SKC_session_key_change_case_2
      solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
        case A2_M_AC_Authentication_Challenge
        solve( SentASDU( linkid2,
                         <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Aggressive
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                       MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                      ) ▶₃ #j )
          qed
        next
          case A3_M_AR_Authentication_Aggressive
          solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S4_SKS_session_key_status_case_1
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.16 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.13)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.13)  ∥
                         (¬(#vr.5 < #vr.13))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.27 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_4
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.24 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.33 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.40 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.41 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.2>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                   ~user_priv_key.2)
                         ) @ #vk.29 )
                    case c_sign
                    solve( !KU( ~user_priv_key.2 ) @ #vk.33 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.29 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.18 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.15)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.15)  ∥
                         (¬(#vr.5 < #vr.15))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.34 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_4
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.1)
                           ) @ #vk.27 )
                      case S3_SKC_session_key_change
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.10)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.10)  ∥
                             ((~linkid.1 = ~linkid) ∧ (~AK.1 = ~AK)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.43 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.48 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.2>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                   ~user_priv_key.2)
                         ) @ #vk.36 )
                    case c_sign
                    solve( !KU( ~user_priv_key.2 ) @ #vk.40 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.34 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.36 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.4>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.27 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.22 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.18)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.18)  ∥
                           (¬(#vr.5 < #vr.18))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a.1 ) @ #vk.38 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_4
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.30 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.44 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.47 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.51 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.47 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.51 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.52 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( !KU( sign(<<$OSID.2, ~CD_a.1, ~CD_b.1, KSQ.3>, 
                                      aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key.2))>,
                                     ~user_priv_key.2)
                           ) @ #vk.40 )
                      case c_sign
                      solve( !KU( ~user_priv_key.2 ) @ #vk.44 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.40 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.33 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case S3_SKC_session_key_change_case_3
      solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
        case A2_M_AC_Authentication_Challenge
        solve( SentASDU( linkid2,
                         <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Aggressive
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                       MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                      ) ▶₃ #j )
          qed
        next
          case A3_M_AR_Authentication_Aggressive
          solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₂ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₃ #j )
              case S4_SKS_session_key_status_case_1
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.16 )
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.13)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.13)  ∥
                         (¬(#vr.5 < #vr.13)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.26 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( (∃ #r.
                           (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.13)  ∥
                         (¬(#vr.5 < #vr.13))  ∥
                         ((~linkid.2 = ~linkid) ∧
                          (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                          (~user_priv_key.2 = ~user_priv_key)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !KU( ~CD_a ) @ #vk.26 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.23 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.34 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.42 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.30 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.18 )
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.15)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.15)  ∥
                         (¬(#vr.5 < #vr.15)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( (∃ #r.
                           (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.15)  ∥
                         (¬(#vr.5 < #vr.15))  ∥
                         ((~linkid.2 = ~linkid) ∧
                          (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                          (~user_priv_key.2 = ~user_priv_key)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !KU( ~CD_a ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.1)
                           ) @ #vk.26 )
                      case S3_SKC_session_key_change
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.10)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.10) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.44 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.48 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.49 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.37 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                case A3_M_AR_Authentication_Reply
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.4>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.27 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.22 )
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.18)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.18)  ∥
                           (¬(#vr.5 < #vr.18)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a.1 ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( (∃ #r.
                             (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.18)  ∥
                           (¬(#vr.5 < #vr.18))  ∥
                           ((~linkid.2 = ~linkid) ∧
                            (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                            (~user_priv_key.2 = ~user_priv_key)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !KU( ~CD_a.1 ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.29 )
                        case S3_SKC_session_key_change
                        by contradiction /* from formulas */
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.45 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.48 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.52 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.48 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.52 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.53 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.41 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.33 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case A4_receive_C_AC_of_ASDU
  solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                            <CSQ, CSQ, $USR, CD>
         ) ▶₁ #i )
    case A2_C_AC_Authentication_Challenge
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                             UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S4_SKS_session_key_status_case_1
        solve( SentASDU( linkid2,
                         <h(cCSQ), $USR, 
                          hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Reply
          solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                    UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S3_SKC_session_key_change_case_1
              solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                CD_j>,
                               ~UK_i_USR_O)
                     ) @ #vk.11 )
                case S3_SKC_session_key_change
                by contradiction /* from formulas */
              next
                case c_senc
                solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S3_SKC_session_key_change_case_2
              solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                CD_j>,
                               ~UK_i_USR_O)
                     ) @ #vk.12 )
                case c_senc
                solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S3_SKC_session_key_change_case_3
              solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                CD_j>,
                               ~UK_i_USR_O)
                     ) @ #vk.12 )
                case c_senc
                solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case A3_M_AR_Authentication_Reply
          solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                CD_j>,
                               ~UK_i_USR_O)
                     ) @ #vk.11 )
                case S3_SKC_session_key_change
                solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                  keystatus.1, CD_j.1>,
                                 ~UK_i_USR_O.1)
                       ) @ #vk.17 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                    case Update_key_reveal
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_senc
                solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                CD_j>,
                               ~UK_i_USR_O)
                     ) @ #vk.12 )
                case S3_SKC_session_key_change
                solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                  keystatus.1, CD_j.1>,
                                 UK_i_USR_O.1)
                       ) @ #vk.20 )
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_senc
                solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.4>, 
                                aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                               ~user_priv_key.1)
                     ) @ #vk.22 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.16 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.23 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key.1 ) @ #vk.42 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key.1 ) @ #vk.25 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case S4_SKS_session_key_status_case_2
        solve( SentASDU( linkid2,
                         <h(cCSQ), $USR, 
                          hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Reply
          solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                    UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S3_SKC_session_key_change_case_1
              solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                CD_j>,
                               UK_i_USR_O)
                     ) @ #vk.14 )
                case S3_SKC_session_key_change
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case c_senc
                solve( !KU( ~CDSK_j_USR_O ) @ #vk.29 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                    case Update_key_reveal
                    solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.40 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.38 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case cdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S3_SKC_session_key_change_case_2
              solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                CD_j>,
                               UK_i_USR_O)
                     ) @ #vk.15 )
                case S3_SKC_session_key_change
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                       ((~linkid = ~linkid.1) ∧ (~AK = ~AK.1)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  by contradiction /* from formulas */
                qed
              next
                case c_senc
                solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.40 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK.1 ) @ #vk.41 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.43 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case cdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S3_SKC_session_key_change_case_3
              solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                CD_j>,
                               UK_i_USR_O)
                     ) @ #vk.15 )
                case S3_SKC_session_key_change
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case c_senc
                solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.40 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key.1 ) @ #vk.41 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.43 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case cdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case A3_M_AR_Authentication_Reply
          solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                case U3_U4_U5_new_update_key_symmetric_mode
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                       (~linkid = ~linkid.2) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.18 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                           ) @ #vk.23 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.26 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.43 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case U6_UKCS_Update_Key_Change_Signature
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.37 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_senc
                solve( !KU( ~AK ) @ #vk.24 )
                  case authority_symm_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.18 )
                case U3_U4_U5_new_update_key_symmetric_mode
                solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                       (~linkid = ~linkid.2) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.21 )
                    case S3_SKC_session_key_change
                    solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                           ) @ #vk.26 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.1)
                             ) @ #vk.29 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.50 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      by contradiction /* from formulas */
                    next
                      case U6_UKCS_Update_Key_Change_Signature
                      by contradiction /* from formulas */
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.44 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_senc
                solve( !KU( ~AK ) @ #vk.31 )
                  case authority_symm_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                               ~user_priv_key.1)
                     ) @ #vk.29 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.22 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                         (~linkid = ~linkid.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.4, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.24 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.2, ~CD_b.1, h(KSQ.5)>, ~UK_i_USR_O)
                             ) @ #vk.29 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.1)
                               ) @ #vk.32 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.1 ) @ #vk.46 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.49 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~outstation_priv_key.1 ) @ #vk.53 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.49 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.53 )
                                case U3_U4_U5_new_update_key_symmetric_mode
                                solve( !KU( ~AK ) @ #vk.54 )
                                  case authority_symm_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case U6_UKCS_Update_Key_Change_Signature
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.49 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.48 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.35 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key.1 ) @ #vk.32 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case S4_SKS_session_key_status_case_3
        solve( SentASDU( linkid2,
                         <h(cCSQ), $USR, 
                          hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Reply
          solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                    UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S3_SKC_session_key_change_case_1
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.18 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.17 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~outstation_priv_key ) @ #vk.39 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key ) @ #vk.27 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S3_SKC_session_key_change_case_2
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.19 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.19 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key ) @ #vk.32 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S3_SKC_session_key_change_case_3
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.19 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key ) @ #vk.32 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case A3_M_AR_Authentication_Reply
          solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.18 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.17 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.26 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.36 )
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.37 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key ) @ #vk.25 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.19 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.1)
                         ) @ #vk.29 )
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.51 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key ) @ #vk.32 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.19 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.30 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.23 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.32 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.47 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key.1 ) @ #vk.54 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.54 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.55 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.48 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.36 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key ) @ #vk.32 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case A4_receive_M_AC_of_ASDU
  solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                             <CSQ, CSQ, $USR, CD>
         ) ▶₁ #i )
    case A2_M_AC_Authentication_Challenge
    solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                              pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                              UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( SentASDU( linkid2,
                         <h(mCSQ), $USR, 
                          hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Reply
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                       MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                      ) ▶₂ #j )
          qed
        next
          case A3_M_AR_Authentication_Reply
          solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                keystatus.1, CD_j.1>,
                               ~UK_i_USR_O.1)
                     ) @ #vk.17 )
                case S3_SKC_session_key_change
                by contradiction /* from formulas */
              next
                case c_senc
                solve( !KU( ~UK_i_USR_O.1 ) @ #vk.21 )
                  case Update_key_reveal
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.24 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.28 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                keystatus.1, CD_j.1>,
                               UK_i_USR_O.1)
                     ) @ #vk.19 )
                case S3_SKC_session_key_change
                solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.8)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.8) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case c_senc
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.31 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.35 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.3>, 
                                aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                               ~user_priv_key.1)
                     ) @ #vk.24 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 ~UK_i_USR_O.1)
                       ) @ #vk.22 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.32 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.35 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~outstation_priv_key.1 ) @ #vk.39 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.35 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key.1 ) @ #vk.27 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( SentASDU( linkid2,
                         <h(mCSQ), $USR, 
                          hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Reply
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                       MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                      ) ▶₂ #j )
          qed
        next
          case A3_M_AR_Authentication_Reply
          solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.16 )
                case U3_U4_U5_new_update_key_symmetric_mode
                by contradiction /* from formulas */
              next
                case U6_UKCC_Update_Key_Change_Confirmation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.12)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.12)  ∥
                       (¬(#vr.7 < #vr.12))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  solve( !KU( ~CD_a ) @ #vk.26 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* cyclic */
                  qed
                next
                  case case_4
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.25 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.32 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.40 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case U6_UKCS_Update_Key_Change_Signature
                solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.2>, 
                                  aenc(<$USR, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                 ~user_priv_key.2)
                       ) @ #vk.28 )
                  case c_sign
                  solve( !KU( ~user_priv_key.2 ) @ #vk.32 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( !KU( ~AK ) @ #vk.28 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.17 )
                case U3_U4_U5_new_update_key_symmetric_mode
                by contradiction /* from formulas */
              next
                case U6_UKCC_Update_Key_Change_Confirmation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.14)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.14)  ∥
                       (¬(#vr.7 < #vr.14))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  solve( !KU( ~CD_a ) @ #vk.33 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* cyclic */
                  qed
                next
                  case case_4
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.1)
                         ) @ #vk.28 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.10)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.10)  ∥
                           ((~linkid.1 = ~linkid) ∧ (~AK.1 = ~AK)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.42 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.46 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.47 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case U6_UKCS_Update_Key_Change_Signature
                solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.2>, 
                                  aenc(<$USR, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                 ~user_priv_key.2)
                       ) @ #vk.35 )
                  case c_sign
                  solve( !KU( ~user_priv_key.2 ) @ #vk.39 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( !KU( ~AK ) @ #vk.35 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.4>, 
                                aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                               ~user_priv_key.1)
                     ) @ #vk.29 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.21 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.17)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.17)  ∥
                         (¬(#vr.7 < #vr.17))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a.1 ) @ #vk.37 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_4
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.31 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.43 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.46 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key.1 ) @ #vk.50 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.46 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.51 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( !KU( sign(<<$OSID.2, ~CD_a.1, ~CD_b.1, KSQ.3>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key.2))>,
                                   ~user_priv_key.2)
                         ) @ #vk.39 )
                    case c_sign
                    solve( !KU( ~user_priv_key.2 ) @ #vk.43 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.39 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key.1 ) @ #vk.32 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_3
        solve( SentASDU( linkid2,
                         <h(mCSQ), $USR, 
                          hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                         mode2, direction2
               ) @ #j )
          case A3_C_AR_Authentication_Reply
          solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                    ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                       MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                      ) ▶₂ #j )
          qed
        next
          case A3_M_AR_Authentication_Reply
          solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                          ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                          pk(~user_priv_key.1)
                 ) ▶₁ #j )
            case Initial_key_pre_distribution
            solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                   UK_i_USR_O.1, update_key_method, auth_keys_used
                   ) ▶₂ #j )
              case S4_SKS_session_key_status_case_1
              solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.16 )
                case U6_UKCC_Update_Key_Change_Confirmation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.12)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.12)  ∥
                       (¬(#vr.7 < #vr.12)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  solve( !KU( ~CD_a ) @ #vk.25 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case U6_UKCS_Update_Key_Change_Signature
                solve( (∃ #r.
                         (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.12)  ∥
                       (¬(#vr.7 < #vr.12))  ∥
                       ((~linkid.2 = ~linkid) ∧
                        (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                        (~user_priv_key.2 = ~user_priv_key)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( !KU( ~CD_a ) @ #vk.25 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    by contradiction /* cyclic */
                  qed
                next
                  case case_3
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.24 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.33 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.40 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.41 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~UK_i_USR_O ) @ #vk.25 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( ~outstation_priv_key ) @ #vk.29 )
                    case outstation_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_2
              solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.17 )
                case U6_UKCC_Update_Key_Change_Confirmation
                solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.14)  ∥
                       (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.14)  ∥
                       (¬(#vr.7 < #vr.14)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                next
                  case case_3
                  solve( !KU( ~CD_a ) @ #vk.32 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case U6_UKCS_Update_Key_Change_Signature
                solve( (∃ #r.
                         (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.14)  ∥
                       (¬(#vr.7 < #vr.14))  ∥
                       ((~linkid.2 = ~linkid) ∧
                        (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                        (~user_priv_key.2 = ~user_priv_key)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( !KU( ~CD_a ) @ #vk.32 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    by contradiction /* cyclic */
                  qed
                next
                  case case_3
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.1)
                         ) @ #vk.27 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.10)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.10) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.43 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.48 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( ~outstation_priv_key ) @ #vk.36 )
                    case outstation_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case Update_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case S4_SKS_session_key_status_case_3
              solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.4>, 
                                aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                               ~user_priv_key.1)
                     ) @ #vk.29 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.21 )
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.17)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.17)  ∥
                         (¬(#vr.7 < #vr.17)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a.1 ) @ #vk.36 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( (∃ #r.
                           (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.17)  ∥
                         (¬(#vr.7 < #vr.17))  ∥
                         ((~linkid.2 = ~linkid) ∧
                          (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                          (~user_priv_key.2 = ~user_priv_key)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !KU( ~CD_a.1 ) @ #vk.36 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.30 )
                      case S3_SKC_session_key_change
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.44 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.47 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key.1 ) @ #vk.51 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.47 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.51 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.52 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.40 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key.1 ) @ #vk.32 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case A4_waiting_receive_C_AC_aggressive
  solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, <CSQ, h(CSQ), $USR, CD>,
                            mCS, newChal
         ) ▶₁ #i )
    case A2_C_AC_Authentication_Challenge
    solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                    ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                             UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S4_SKS_session_key_status_case_1
        solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                      ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                      UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S3_SKC_session_key_change_case_1
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.12 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_2
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.14 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_3
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.14 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                            ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                            pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                     UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.12 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.16 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.14 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.1)
                           ) @ #vk.19 )
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_3
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.4>, 
                                    aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.21 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.17 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.22 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.42 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.25 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S4_SKS_session_key_status_case_2
        solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                      ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                      UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S3_SKC_session_key_change_case_1
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   UK_i_USR_O)
                         ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.29 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.40 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.38 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_2
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                           ((~linkid = ~linkid.1) ∧ (~AK = ~AK.1)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.40 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK.1 ) @ #vk.41 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.43 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_3
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.40 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key.1 ) @ #vk.41 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.43 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                            ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                            pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                     UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.18 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                           (~linkid = ~linkid.2) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.18 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                               ) @ #vk.23 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                            keystatus.1, CD_j.1>,
                                           ~UK_i_USR_O.1)
                                 ) @ #vk.25 )
                            case c_senc
                            solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                              case Update_key_reveal
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                                  case U3_U4_U5_new_update_key_symmetric_mode
                                  solve( !KU( ~AK ) @ #vk.43 )
                                    case authority_symm_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case Update_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case U6_UKCS_Update_Key_Change_Signature
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.38 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.37 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.24 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.20 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                           (~linkid = ~linkid.2) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.21 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.4)>, ~UK_i_USR_O)
                               ) @ #vk.26 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                            keystatus.1, CD_j.1>,
                                           UK_i_USR_O.1)
                                 ) @ #vk.28 )
                            case c_senc
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                                case U3_U4_U5_new_update_key_symmetric_mode
                                solve( !KU( ~AK ) @ #vk.50 )
                                  case authority_symm_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case U6_UKCS_Update_Key_Change_Signature
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.44 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.31 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_3
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                    aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.28 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.23 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                             (~linkid = ~linkid.2) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.4, $USR, keystatus, 
                                          CD_j>,
                                         ~UK_i_USR_O)
                               ) @ #vk.24 )
                          case S3_SKC_session_key_change
                          solve( !KU( hmac(<$OSID, CD_a.2, ~CD_b.1, h(KSQ.5)>, ~UK_i_USR_O)
                                 ) @ #vk.29 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                              keystatus.1, CD_j.1>,
                                             ~UK_i_USR_O.1)
                                   ) @ #vk.31 )
                              case c_senc
                              solve( !KU( ~UK_i_USR_O.1 ) @ #vk.46 )
                                case U3_U4_U5_new_update_key_asymmetric_mode
                                solve( !KU( ~CDSK_j_USR_O ) @ #vk.49 )
                                  case S3_SKC_session_key_change
                                  solve( !KU( ~outstation_priv_key.1 ) @ #vk.53 )
                                    case outstation_asymm_priv_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case cdsk_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                solve( !KU( ~CDSK_j_USR_O ) @ #vk.49 )
                                  case S3_SKC_session_key_change
                                  solve( !KU( ~UK_i_USR_O ) @ #vk.53 )
                                    case U3_U4_U5_new_update_key_symmetric_mode
                                    solve( !KU( ~AK ) @ #vk.54 )
                                      case authority_symm_key_reveal
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case Update_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case cdsk_reveal
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          next
                            case U6_UKCC_Update_Key_Change_Confirmation
                            by contradiction /* from formulas */
                          next
                            case U6_UKCS_Update_Key_Change_Signature
                            by contradiction /* from formulas */
                          next
                            case c_hmac
                            solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.49 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case c_senc
                          solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.48 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.35 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.32 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S4_SKS_session_key_status_case_3
        solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(CSQ), $USR, 
                            hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid, AK.1, $USR, $OSID.1, ~linkid.1,
                                      ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O.1,
                                      UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S3_SKC_session_key_change_case_1
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                    aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.19 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.17 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key ) @ #vk.39 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.27 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_2
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                    aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.21 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.19 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.32 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S3_SKC_session_key_change_case_3
                solve( !UserCCSInvariant( ~uid, ~us, ~cinv, <h(CSQ), $USR, ~CD> ) ▶₁ #j )
                  case A3_C_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                    aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.21 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.19 )
                      case S3_SKC_session_key_change
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.32 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                            ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                            pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid.1, ~os.1, 'OK', CDSK_j_USR_O.1, CDSK_j_USR_O,
                                     UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                    aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.19 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.17 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.25 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.36 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.37 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.25 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                    aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.21 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.20 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.1)
                             ) @ #vk.28 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.51 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.32 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_3
                solve( !OutMCSInvariant( ~oid.1, ~os.1, ~cinv, <h(CSQ), $USR, ~CD>
                       ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.3>, 
                                    aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                   ~user_priv_key)
                         ) @ #vk.21 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                      aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                     ~user_priv_key.1)
                           ) @ #vk.29 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.23 )
                        case S3_SKC_session_key_change
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.1)
                               ) @ #vk.31 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.1 ) @ #vk.47 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~outstation_priv_key.1 ) @ #vk.54 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.54 )
                                case U3_U4_U5_new_update_key_asymmetric_mode
                                solve( !KU( ~outstation_priv_key ) @ #vk.55 )
                                  case outstation_asymm_priv_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.48 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~user_priv_key.1 ) @ #vk.36 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key ) @ #vk.32 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case A4_waiting_receive_M_AC_aggressive
  solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, newChal
         ) ▶₁ #i )
    case A2_M_AC_Authentication_Challenge
    solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid,
                              ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                              UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                      ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                        ) ▶₃ #j )
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                            ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                            pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                     UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.22 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.25 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.29 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.1)
                         ) @ #vk.18 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.10)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.10) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.32 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_3
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.3>, 
                                    aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.22 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.21 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.33 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key.1 ) @ #vk.40 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.40 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.28 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                      ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                        ) ▶₃ #j )
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                            ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                            pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                     UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.16 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.15)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.15)  ∥
                           (¬(#vr.7 < #vr.15))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a ) @ #vk.27 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_4
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.24 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.33 )
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.40 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.41 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.2>, 
                                      aenc(<$USR, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                     ~user_priv_key.2)
                           ) @ #vk.29 )
                      case c_sign
                      solve( !KU( ~user_priv_key.2 ) @ #vk.33 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.29 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.18 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.17)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.17)  ∥
                           (¬(#vr.7 < #vr.17))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a ) @ #vk.34 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_4
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.1)
                             ) @ #vk.27 )
                        case S3_SKC_session_key_change
                        solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.12)  ∥
                               (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.12)  ∥
                               ((~linkid.1 = ~linkid) ∧ (~AK.1 = ~AK)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.43 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.48 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.2>, 
                                      aenc(<$USR, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                     ~user_priv_key.2)
                           ) @ #vk.36 )
                      case c_sign
                      solve( !KU( ~user_priv_key.2 ) @ #vk.40 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.34 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.36 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_3
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.4>, 
                                    aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.27 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.2>, ~UK_i_USR_O) ) @ #vk.22 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* from formulas */
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.20)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.20)  ∥
                             (¬(#vr.7 < #vr.20))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        solve( !KU( ~CD_a.1 ) @ #vk.38 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_4
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.1)
                               ) @ #vk.30 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.1 ) @ #vk.44 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~MDSK_j_USR_O ) @ #vk.47 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~outstation_priv_key.1 ) @ #vk.51 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case mdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            solve( !KU( ~MDSK_j_USR_O ) @ #vk.47 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.51 )
                                case U3_U4_U5_new_update_key_symmetric_mode
                                solve( !KU( ~AK ) @ #vk.52 )
                                  case authority_symm_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case mdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case U6_UKCS_Update_Key_Change_Signature
                      solve( !KU( sign(<<$OSID.2, ~CD_a.1, ~CD_b.1, KSQ.3>, 
                                        aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key.2))>,
                                       ~user_priv_key.2)
                             ) @ #vk.40 )
                        case c_sign
                        solve( !KU( ~user_priv_key.2 ) @ #vk.44 )
                          case user_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.40 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.33 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_3
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( SentASDU( linkid2,
                           <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                           mode2, direction2
                 ) @ #j )
            case A3_C_AR_Authentication_Aggressive
            solve( !F_UserInvariants( ~uid.1, AK.1, $USR, $OSID.1, ~linkid.1,
                                      ~user_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              by solve( !F_UserSessKeys( ~uid.1, ~us.1, 'OK', ~MDSK_j_USR_O,
                                         MDSK_j_USR_O.1, UK_i_USR_O.1, update_key_method, auth_keys_used
                        ) ▶₃ #j )
            qed
          next
            case A3_M_AR_Authentication_Aggressive
            solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID.1, ~linkid.1,
                                            ~outstation_priv_key.1, pk(~outstation_priv_key.1),
                                            pk(~user_priv_key.1)
                   ) ▶₂ #j )
              case Initial_key_pre_distribution
              solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O.1, ~MDSK_j_USR_O,
                                     UK_i_USR_O.1, update_key_method, auth_keys_used
                     ) ▶₃ #j )
                case S4_SKS_session_key_status_case_1
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.16 )
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.15)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.15)  ∥
                           (¬(#vr.7 < #vr.15)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( (∃ #r.
                             (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.15)  ∥
                           (¬(#vr.7 < #vr.15))  ∥
                           ((~linkid.2 = ~linkid) ∧
                            (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                            (~user_priv_key.2 = ~user_priv_key)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !KU( ~CD_a ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.23 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.34 )
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.42 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.30 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_2
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.18 )
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.17)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.17)  ∥
                           (¬(#vr.7 < #vr.17)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a ) @ #vk.33 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( (∃ #r.
                             (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.17)  ∥
                           (¬(#vr.7 < #vr.17))  ∥
                           ((~linkid.2 = ~linkid) ∧
                            (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                            (~user_priv_key.2 = ~user_priv_key)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !KU( ~CD_a ) @ #vk.33 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.1)
                             ) @ #vk.26 )
                        case S3_SKC_session_key_change
                        solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.12)  ∥
                               (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.12) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.44 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.48 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.49 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.37 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case S4_SKS_session_key_status_case_3
                solve( !OutMCSInvariant( ~oid, ~os, ~cinv, <CSQ, $USR, CD> ) ▶₁ #j )
                  case A3_M_AR_Authentication_Reply
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.4>, 
                                    aenc(<$USR, UK_i_USR_O.1, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.27 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.2)>, ~UK_i_USR_O) ) @ #vk.22 )
                      case U6_UKCC_Update_Key_Change_Confirmation
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.20)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.20)  ∥
                             (¬(#vr.7 < #vr.20)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        solve( !KU( ~CD_a.1 ) @ #vk.37 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case U6_UKCS_Update_Key_Change_Signature
                      solve( (∃ #r.
                               (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.20)  ∥
                             (¬(#vr.7 < #vr.20))  ∥
                             ((~linkid.2 = ~linkid) ∧
                              (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                              (~user_priv_key.2 = ~user_priv_key)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !KU( ~CD_a.1 ) @ #vk.37 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_3
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.1)
                               ) @ #vk.29 )
                          case S3_SKC_session_key_change
                          by contradiction /* from formulas */
                        next
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.1 ) @ #vk.45 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~MDSK_j_USR_O ) @ #vk.48 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~outstation_priv_key.1 ) @ #vk.52 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case mdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            solve( !KU( ~MDSK_j_USR_O ) @ #vk.48 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.52 )
                                case U3_U4_U5_new_update_key_asymmetric_mode
                                solve( !KU( ~outstation_priv_key ) @ #vk.53 )
                                  case outstation_asymm_priv_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case mdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.41 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.33 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma asdu_aliveness [use_induction, hide_lemma=update_key_sourced,
                      hide_lemma=sessionkeys_sourced]:
  all-traces
  "(((¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ∧
     (¬(∃ oprk #r. OutstationPrivateKeyReveal( oprk ) @ #r))) ∧
    (¬(∃ uprk #r. UserPrivateKeyReveal( uprk ) @ #r))) ⇒
   (∀ linkid ar mode direction #i.
     ((∀ cdsk mdsk uk type source.
        (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i) ⇒
        (((∀ uk.1 #k.
            (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k) ⇒
            (¬(∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (#kr < #i)))) ∧
          ((direction = 'control') ⇒
           (¬(∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (#skr < #i))))) ∧
         ((direction = 'monitor') ⇒
          (¬(∃ #skr. (MDSKReveal( mdsk ) @ #skr) ∧ (#skr < #i)))))) ∧
      (AuthASDU( linkid, ar, mode, direction ) @ #i)) ⇒
     (∃ #j. (SentASDU( linkid, ar, mode, direction ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∀ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ⊥) ∧
 (∀ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ⇒ ⊥) ∧
 (∃ linkid ar mode direction #i.
   (AuthASDU( linkid, ar, mode, direction ) @ #i)
  ∧
   (∀ cdsk mdsk uk type source.
     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
    ⇒
     (∀ uk.1 #k.
       (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
      ⇒
       ∀ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ⇒ ¬(#kr < #i)) ∧
     (((¬(direction = 'control')) ∨
       (∀ #skr. (CDSKReveal( cdsk ) @ #skr) ⇒ ¬(#skr < #i)))) ∧
     (((¬(direction = 'monitor')) ∨
       (∀ #skr. (MDSKReveal( mdsk ) @ #skr) ⇒ ¬(#skr < #i))))) ∧
   (∀ #j. (SentASDU( linkid, ar, mode, direction ) @ #j) ⇒ ¬(#j < #i)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( AuthASDU( linkid, ar, mode, direction ) @ #i )
    case A4_idle_receive_C_AC_aggressive
    solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                           UK_i_USR_O, update_key_method, auth_keys_used
           ) ▶₂ #i )
      case S4_SKS_session_key_status_case_1
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('control' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('control' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(CSQ), $USR, 
                                 hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                'aggressive', 'control'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>,
                               CDSK_j_USR_O)
                     ) @ #vk.6 )
                case A3_C_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.10 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.22 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Aggressive_case_3
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.10 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.18 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.25 )
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.28 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.20 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.1)
                         ) @ #vk.21 )
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_3
                solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.6>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.23 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.16 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.24 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.36 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key.1 ) @ #vk.43 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.26 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.10 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.24 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.22 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_idle_receive_C_AC_aggressive
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O, 'Initial',
                                               'usb_stick'
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status_case_2
      solve( !F_OutstationInvariants( ~oid, AK.1, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('control' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('control' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(CSQ), $USR, 
                                 hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                'aggressive', 'control'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>,
                               CDSK_j_USR_O)
                     ) @ #vk.9 )
                case A3_C_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.13 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.30 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.41 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.39 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                         ((~linkid = ~linkid.1) ∧ (~AK = ~AK.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.41 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK.1 ) @ #vk.42 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.44 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Aggressive_case_3
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.41 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key.1 ) @ #vk.42 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.44 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.16 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                         (~linkid = ~linkid.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.18 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                             ) @ #vk.23 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.2)
                               ) @ #vk.27 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                                case U3_U4_U5_new_update_key_symmetric_mode
                                solve( !KU( ~AK ) @ #vk.44 )
                                  case authority_symm_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case U6_UKCS_Update_Key_Change_Signature
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.39 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.25 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                         (~linkid = ~linkid.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.21 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                             ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                          keystatus.1, CD_j.1>,
                                         UK_i_USR_O.2)
                               ) @ #vk.30 )
                          case c_senc
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.51 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case U6_UKCS_Update_Key_Change_Signature
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.44 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.46 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.45 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.32 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_3
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.7>, 
                                  aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.30 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.22 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                           (~linkid = ~linkid.2) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.24 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.2, ~CD_b.1, h(KSQ.4)>, ~UK_i_USR_O)
                               ) @ #vk.29 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.7, $USR, 
                                            keystatus.1, CD_j.1>,
                                           ~UK_i_USR_O.1)
                                 ) @ #vk.33 )
                            case c_senc
                            solve( !KU( ~UK_i_USR_O.1 ) @ #vk.47 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~outstation_priv_key.1 ) @ #vk.54 )
                                  case outstation_asymm_priv_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~UK_i_USR_O ) @ #vk.54 )
                                  case U3_U4_U5_new_update_key_symmetric_mode
                                  solve( !KU( ~AK ) @ #vk.55 )
                                    case authority_symm_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case Update_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case U6_UKCS_Update_Key_Change_Signature
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.48 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.50 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.49 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.36 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.33 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.16 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr)  ∥
                         (~linkid = ~linkid.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.19 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.25 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.37 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.39 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.27 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_idle_receive_C_AC_aggressive
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O,
                                               'Symmetric', ~AK
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case S4_SKS_session_key_status_case_3
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key.1, pk(~outstation_priv_key.1), pk(~user_priv_key)
             ) ▶₃ #i )
        case Initial_key_pre_distribution
        solve( !F_OutCCSInvariant( ~oid, ~os, AC ) ▶₄ #i )
          case A2_C_AC_Authentication_Challenge
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('control' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('control' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(CSQ), $USR, 
                                 hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                'aggressive', 'control'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.15 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( hmac(<'amode', h(CSQ), <h(cCSQ), $USR, ~CD>, $ASDU>,
                                 CDSK_j_USR_O)
                       ) @ #vk.11 )
                  case A3_C_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.16 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.40 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.40 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.45 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Aggressive_case_3
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.40 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.45 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.16 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.2)
                           ) @ #vk.29 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.37 )
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.40 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.44 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.45 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.38 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.32 )
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.47 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.51 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.52 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.45 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_3
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.7>, 
                                    aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.34 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.22 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.7, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.35 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.48 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.51 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.55 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.51 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.55 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.56 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.49 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.37 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.16 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.26 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.37 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.39 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key ) @ #vk.18 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_idle_receive_C_AC_aggressive
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O,
                                               'Asymmetric', ~outstation_priv_key
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_idle_receive_M_AC_aggressive
    solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                              pk(~outstation_priv_key), pk(~user_priv_key)
           ) ▶₂ #i )
      case Initial_key_pre_distribution
      solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                              UK_i_USR_O, update_key_method, auth_keys_used
             ) ▶₃ #i )
        case S3_SKC_session_key_change_case_1
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('monitor' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('monitor' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                                'aggressive', 'monitor'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                     ) @ #vk.6 )
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                  keystatus.1, CD_j.1>,
                                 ~UK_i_USR_O.1)
                       ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.23 )
                    case Update_key_reveal
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.26 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                  keystatus.1, CD_j.1>,
                                 UK_i_USR_O.1)
                       ) @ #vk.21 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.11)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.11) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.33 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_3
                solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.4>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.26 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.24 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.34 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key.1 ) @ #vk.41 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.29 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.18 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_idle_receive_M_AC_aggressive
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                               'Initial', 'usb_stick'
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_2
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('monitor' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('monitor' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                                'aggressive', 'monitor'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                     ) @ #vk.8 )
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.13 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.16)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.16)  ∥
                         (¬(#vr.5 < #vr.16))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.28 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_4
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.2)
                           ) @ #vk.27 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.34 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.42 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.1>, 
                                    aenc(<$USR.1, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                   ~user_priv_key.2)
                         ) @ #vk.30 )
                    case c_sign
                    solve( !KU( ~user_priv_key.2 ) @ #vk.34 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.28 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.30 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.13 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.18)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.18)  ∥
                         (¬(#vr.5 < #vr.18))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.35 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_4
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.30 )
                      case S3_SKC_session_key_change
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.13)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.13)  ∥
                             ((~linkid.1 = ~linkid) ∧ (~AK.1 = ~AK)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.44 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.48 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.49 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.1>, 
                                    aenc(<$USR.1, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                   ~user_priv_key.2)
                         ) @ #vk.37 )
                    case c_sign
                    solve( !KU( ~user_priv_key.2 ) @ #vk.41 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.35 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.37 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_3
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                  aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.31 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.14 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.21)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.21)  ∥
                           (¬(#vr.5 < #vr.21))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a.1 ) @ #vk.39 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_4
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.5, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.33 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.45 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.48 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.52 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.48 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.52 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.53 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( !KU( sign(<<$OSID.2, ~CD_a.1, ~CD_b.1, KSQ.2>, 
                                      aenc(<$USR.1, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key.2))>,
                                     ~user_priv_key.2)
                           ) @ #vk.41 )
                      case c_sign
                      solve( !KU( ~user_priv_key.2 ) @ #vk.45 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.41 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.34 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.18 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.24 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_idle_receive_M_AC_aggressive
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                               'Symmetric', ~AK
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case S3_SKC_session_key_change_case_3
        solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
          case A2_M_AC_Authentication_Challenge
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('monitor' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('monitor' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                                'aggressive', 'monitor'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                     ) @ #vk.8 )
                case A3_M_AR_Authentication_Aggressive_case_1
                solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O)
                       ) @ #vk.13 )
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.16)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.16)  ∥
                         (¬(#vr.5 < #vr.16)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.27 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( (∃ #r.
                           (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.16)  ∥
                         (¬(#vr.5 < #vr.16))  ∥
                         ((~linkid.2 = ~linkid) ∧
                          (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                          (~user_priv_key.2 = ~user_priv_key)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !KU( ~CD_a ) @ #vk.27 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.2)
                           ) @ #vk.26 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.38 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.43 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.31 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_2
                solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O)
                       ) @ #vk.13 )
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.18)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.18)  ∥
                         (¬(#vr.5 < #vr.18)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.34 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( (∃ #r.
                           (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.18)  ∥
                         (¬(#vr.5 < #vr.18))  ∥
                         ((~linkid.2 = ~linkid) ∧
                          (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                          (~user_priv_key.2 = ~user_priv_key)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !KU( ~CD_a ) @ #vk.34 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.29 )
                      case S3_SKC_session_key_change
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.13)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.13) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.45 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.50 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.34 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.38 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Aggressive_case_3
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                  aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.31 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O)
                         ) @ #vk.14 )
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.21)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.21)  ∥
                           (¬(#vr.5 < #vr.21)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a.1 ) @ #vk.38 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( (∃ #r.
                             (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.21)  ∥
                           (¬(#vr.5 < #vr.21))  ∥
                           ((~linkid.2 = ~linkid) ∧
                            (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                            (~user_priv_key.2 = ~user_priv_key)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !KU( ~CD_a.1 ) @ #vk.38 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.5, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.32 )
                        case S3_SKC_session_key_change
                        by contradiction /* from formulas */
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.46 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.49 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.53 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.49 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.53 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.54 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.42 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.34 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.18 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_idle_receive_M_AC_aggressive
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                               'Asymmetric', ~outstation_priv_key
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_C_AC_of_ASDU
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, cCS, mCS,
                              <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                               UK_i_USR_O, update_key_method, auth_keys_used
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('control' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('control' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(cCSQ), $USR, 
                                 hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                'normal', 'control'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                     ) @ #vk.6 )
                case A3_C_AR_Authentication_Reply_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Reply_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.12 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Reply_case_3
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.12 )
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.17 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                      case Update_key_reveal
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.12 )
                  case S3_SKC_session_key_change
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.1)
                         ) @ #vk.20 )
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_3
                solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.4>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.22 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.16 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.23 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key.1 ) @ #vk.42 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.25 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 ~UK_i_USR_O)
                       ) @ #vk.11 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_receive_C_AC_of_ASDU
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O, 'Initial',
                                               'usb_stick'
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('control' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('control' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(cCSQ), $USR, 
                                 hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                'normal', 'control'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                     ) @ #vk.9 )
                case A3_C_AR_Authentication_Reply_case_1
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.29 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.40 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.38 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Reply_case_2
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.15 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                         ((~linkid = ~linkid.1) ∧ (~AK = ~AK.1)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.40 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK.1 ) @ #vk.41 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.45 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.43 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_C_AR_Authentication_Reply_case_3
                solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                  CD_j>,
                                 UK_i_USR_O)
                       ) @ #vk.15 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O.2 ) @ #vk.40 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key.1 ) @ #vk.41 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.45 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~AK ) @ #vk.43 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case cdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                         (~linkid = ~linkid.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.18 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                             ) @ #vk.23 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.2)
                               ) @ #vk.26 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                                case U3_U4_U5_new_update_key_symmetric_mode
                                solve( !KU( ~AK ) @ #vk.43 )
                                  case authority_symm_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case U6_UKCS_Update_Key_Change_Signature
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.38 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.37 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.24 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.18 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                         (~linkid = ~linkid.2) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.21 )
                      case S3_SKC_session_key_change
                      solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                             ) @ #vk.26 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                          keystatus.1, CD_j.1>,
                                         UK_i_USR_O.2)
                               ) @ #vk.29 )
                          case c_senc
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.50 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case U6_UKCC_Update_Key_Change_Confirmation
                        by contradiction /* from formulas */
                      next
                        case U6_UKCS_Update_Key_Change_Signature
                        by contradiction /* from formulas */
                      next
                        case c_hmac
                        solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.45 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.44 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.31 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_3
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                  aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.29 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.22 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                           (~linkid = ~linkid.2) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.24 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.2, ~CD_b.1, h(KSQ.4)>, ~UK_i_USR_O)
                               ) @ #vk.29 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                            keystatus.1, CD_j.1>,
                                           ~UK_i_USR_O.1)
                                 ) @ #vk.32 )
                            case c_senc
                            solve( !KU( ~UK_i_USR_O.1 ) @ #vk.46 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.49 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~outstation_priv_key.1 ) @ #vk.53 )
                                  case outstation_asymm_priv_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.49 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~UK_i_USR_O ) @ #vk.53 )
                                  case U3_U4_U5_new_update_key_symmetric_mode
                                  solve( !KU( ~AK ) @ #vk.54 )
                                    case authority_symm_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case Update_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case U6_UKCS_Update_Key_Change_Signature
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.49 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.48 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.35 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.32 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                         (~linkid = ~linkid.1) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.18 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.24 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.34 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.36 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_senc
                  solve( !KU( ~AK ) @ #vk.24 )
                    case authority_symm_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_receive_C_AC_of_ASDU
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O,
                                               'Symmetric', ~AK
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case S4_SKS_session_key_status_case_3
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('control' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('control' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(cCSQ), $USR, 
                                 hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                'normal', 'control'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                               ~user_priv_key)
                     ) @ #vk.15 )
                case U3_U4_U5_new_update_key_asymmetric_mode
                solve( !KU( hmac(<h(cCSQ), <h(cCSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)
                       ) @ #vk.11 )
                  case A3_C_AR_Authentication_Reply_case_1
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.39 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Reply_case_2
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.18 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Reply_case_3
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.18 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Reply_case_1
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.2)
                           ) @ #vk.28 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.37 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Reply_case_2
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.18 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.31 )
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.51 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Reply_case_3
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                    aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.33 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.22 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.34 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.47 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.54 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.54 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.55 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.48 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.36 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.17 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.26 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.34 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.36 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~user_priv_key ) @ #vk.18 )
                  case user_asymm_priv_key_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_receive_C_AC_of_ASDU
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O,
                                               'Asymmetric', ~outstation_priv_key
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_receive_M_AC_of_ASDU
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>,
                               <CSQ, CSQ, $USR, CD>
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR, $OSID, ~linkid, ~user_priv_key,
                                pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                                UK_i_USR_O, update_key_method, auth_keys_used
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('monitor' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('monitor' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(mCSQ), $USR, 
                                 hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                                'normal', 'monitor'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)
                     ) @ #vk.6 )
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 ~UK_i_USR_O.1)
                       ) @ #vk.17 )
                  case S3_SKC_session_key_change
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( ~UK_i_USR_O.1 ) @ #vk.21 )
                    case Update_key_reveal
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.24 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.28 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                  keystatus.1, CD_j.1>,
                                 UK_i_USR_O.1)
                       ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.10)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.10) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case c_senc
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.31 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.35 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_3
                solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.3>, 
                                  aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.24 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.2, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.22 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.32 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~outstation_priv_key.1 ) @ #vk.39 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.35 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.27 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.14 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.18 )
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_receive_M_AC_of_ASDU
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                               'Initial', 'usb_stick'
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('monitor' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('monitor' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(mCSQ), $USR, 
                                 hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                                'normal', 'monitor'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)
                     ) @ #vk.8 )
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.16 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.15)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.15)  ∥
                         (¬(#vr.7 < #vr.15))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.26 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_4
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.2)
                           ) @ #vk.25 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.32 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.35 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.40 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.1>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                   ~user_priv_key.2)
                         ) @ #vk.28 )
                    case c_sign
                    solve( !KU( ~user_priv_key.2 ) @ #vk.32 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.28 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.17 )
                  case U3_U4_U5_new_update_key_symmetric_mode
                  by contradiction /* from formulas */
                next
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.17)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.17)  ∥
                         (¬(#vr.7 < #vr.17))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_4
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.28 )
                      case S3_SKC_session_key_change
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.12)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.12)  ∥
                             ((~linkid.1 = ~linkid) ∧ (~AK.1 = ~AK)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.42 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.46 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.47 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.1>, 
                                    aenc(<$USR, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                   ~user_priv_key.2)
                         ) @ #vk.35 )
                    case c_sign
                    solve( !KU( ~user_priv_key.2 ) @ #vk.39 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.33 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.35 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_3
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.4>, 
                                  aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.29 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.21 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.20)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.20)  ∥
                           (¬(#vr.7 < #vr.20))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a.1 ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_4
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.31 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.43 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.46 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.50 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.46 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.51 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( !KU( sign(<<$OSID.2, ~CD_a.1, ~CD_b.1, KSQ.2>, 
                                      aenc(<$USR, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key.2))>,
                                     ~user_priv_key.2)
                           ) @ #vk.39 )
                      case c_sign
                      solve( !KU( ~user_priv_key.2 ) @ #vk.43 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.39 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.32 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( !KU( ~AK ) @ #vk.24 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_receive_M_AC_of_ASDU
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                               'Symmetric', ~AK
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case S3_SKC_session_key_change_case_3
          solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                 (∀ linkid ar mode direction #i.
                   (AuthASDU( linkid, ar, mode, direction ) @ #i)
                  ⇒
                   ((last(#i)) ∨
                    (∃ cdsk mdsk uk type source.
                      (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                     ∧
                      ((∃ uk.1 #k.
                         (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                       ((direction = 'control') ∧
                        (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                       ((direction = 'monitor') ∧
                        (∃ #skr.
                          (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                    (∃ #j.
                      (SentASDU( linkid, ar, mode, direction ) @ #j)
                     ∧
                      (¬(last(#j))) ∧ (#j < #i)))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            solve( (last(#i))  ∥
                   (∃ cdsk mdsk uk type source.
                     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                    ∧
                     ((∃ uk.1 #k.
                        (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                       ∧
                        (¬(last(#k))) ∧
                        (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                      (('monitor' = 'control') ∧
                       (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                      (('monitor' = 'monitor') ∧
                       (∃ #skr.
                         (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                   (∃ #j.
                     (SentASDU( ~linkid,
                                <h(mCSQ), $USR, 
                                 hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)>,
                                'normal', 'monitor'
                      ) @ #j)
                    ∧
                     (¬(last(#j))) ∧ (#j < #i)) )
              case case_1
              solve( !KU( hmac(<h(mCSQ), <h(mCSQ), $USR, ~CD>, $ASDU>, ~MDSK_j_USR_O)
                     ) @ #vk.8 )
                case A3_M_AR_Authentication_Reply_case_1
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O) ) @ #vk.16 )
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.15)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.15)  ∥
                         (¬(#vr.7 < #vr.15)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.25 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( (∃ #r.
                           (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.15)  ∥
                         (¬(#vr.7 < #vr.15))  ∥
                         ((~linkid.2 = ~linkid) ∧
                          (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                          (~user_priv_key.2 = ~user_priv_key)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !KU( ~CD_a ) @ #vk.25 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.2)
                           ) @ #vk.24 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.33 )
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.36 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.40 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.41 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.25 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.29 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_2
                solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O) ) @ #vk.17 )
                  case U6_UKCC_Update_Key_Change_Confirmation
                  solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.17)  ∥
                         (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.17)  ∥
                         (¬(#vr.7 < #vr.17)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  next
                    case case_3
                    solve( !KU( ~CD_a ) @ #vk.32 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case U6_UKCS_Update_Key_Change_Signature
                  solve( (∃ #r.
                           (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.17)  ∥
                         (¬(#vr.7 < #vr.17))  ∥
                         ((~linkid.2 = ~linkid) ∧
                          (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                          (~user_priv_key.2 = ~user_priv_key)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !KU( ~CD_a ) @ #vk.32 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      by contradiction /* cyclic */
                    qed
                  next
                    case case_3
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.2)
                           ) @ #vk.27 )
                      case S3_SKC_session_key_change
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.12)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.12) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.43 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.48 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.36 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case A3_M_AR_Authentication_Reply_case_3
                solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.4>, 
                                  aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                 ~user_priv_key.1)
                       ) @ #vk.29 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( hmac(<$USR, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O) ) @ #vk.21 )
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.20)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.20)  ∥
                           (¬(#vr.7 < #vr.20)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a.1 ) @ #vk.36 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( (∃ #r.
                             (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.20)  ∥
                           (¬(#vr.7 < #vr.20))  ∥
                           ((~linkid.2 = ~linkid) ∧
                            (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                            (~user_priv_key.2 = ~user_priv_key)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !KU( ~CD_a.1 ) @ #vk.36 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.30 )
                        case S3_SKC_session_key_change
                        by contradiction /* from formulas */
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.44 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.47 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.51 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.47 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.51 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.52 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.40 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key.1 ) @ #vk.32 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_hmac
                solve( !KU( ~MDSK_j_USR_O ) @ #vk.19 )
                  case S3_SKC_session_key_change
                  solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                      case outstation_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case Update_key_reveal
                    by contradiction /* from formulas */
                  qed
                next
                  case mdsk_reveal
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_2
              solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                case A4_receive_M_AC_of_ASDU
                solve( (∃ uk #k.
                         (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                               'Asymmetric', ~outstation_priv_key
                          ) @ #k)
                        ∧
                         (¬(last(#k))) ∧
                         (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                       (∃ #skr.
                         (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_3
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_C_AC_aggressive
    solve( F_OutWaitForReply( ~oid, KSQ, ~ou, ~os, <CSQ, h(CSQ), $USR, CD>,
                              mCS, newChal
           ) ▶₁ #i )
      case A2_C_AC_Authentication_Challenge
      solve( !F_OutstationInvariants( ~oid, AK, $USR, $OSID, ~linkid,
                                      ~outstation_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_OutSessKeys( ~oid, ~os, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                               UK_i_USR_O, update_key_method, auth_keys_used
               ) ▶₃ #i )
          case S4_SKS_session_key_status_case_1
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∀ linkid ar mode direction #i.
                     (AuthASDU( linkid, ar, mode, direction ) @ #i)
                    ⇒
                     ((last(#i)) ∨
                      (∃ cdsk mdsk uk type source.
                        (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                       ∧
                        ((∃ uk.1 #k.
                           (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                         ((direction = 'control') ∧
                          (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                         ((direction = 'monitor') ∧
                          (∃ #skr.
                            (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                      (∃ #j.
                        (SentASDU( linkid, ar, mode, direction ) @ #j)
                       ∧
                        (¬(last(#j))) ∧ (#j < #i)))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              solve( (last(#i))  ∥
                     (∃ cdsk mdsk uk type source.
                       (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                      ∧
                       ((∃ uk.1 #k.
                          (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                         ∧
                          (¬(last(#k))) ∧
                          (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                        (('control' = 'control') ∧
                         (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                        (('control' = 'monitor') ∧
                         (∃ #skr.
                           (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                     (∃ #j.
                       (SentASDU( ~linkid,
                                  <h(CSQ), $USR, 
                                   hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                  'aggressive', 'control'
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #i)) )
                case case_1
                solve( !KU( hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>,
                                 CDSK_j_USR_O)
                       ) @ #vk.6 )
                  case A3_C_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.12 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Aggressive_case_3
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.12 )
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.17 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.24 )
                        case Update_key_reveal
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.31 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.19 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.12 )
                    case S3_SKC_session_key_change
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.4, $USR, 
                                      keystatus.1, CD_j.1>,
                                     UK_i_USR_O.1)
                           ) @ #vk.20 )
                      case c_senc
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.26 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_3
                  solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.5>, 
                                    aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.22 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.16 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.1)
                             ) @ #vk.23 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.1 ) @ #vk.35 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~outstation_priv_key.1 ) @ #vk.42 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.25 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   ~UK_i_USR_O)
                         ) @ #vk.11 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.16 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O ) @ #vk.21 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case case_2
                solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                  case A4_waiting_receive_C_AC_aggressive
                  solve( (∃ uk #k.
                           (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O, 'Initial',
                                                 'usb_stick'
                            ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                         (∃ #skr.
                           (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_3
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_2
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∀ linkid ar mode direction #i.
                     (AuthASDU( linkid, ar, mode, direction ) @ #i)
                    ⇒
                     ((last(#i)) ∨
                      (∃ cdsk mdsk uk type source.
                        (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                       ∧
                        ((∃ uk.1 #k.
                           (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                         ((direction = 'control') ∧
                          (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                         ((direction = 'monitor') ∧
                          (∃ #skr.
                            (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                      (∃ #j.
                        (SentASDU( linkid, ar, mode, direction ) @ #j)
                       ∧
                        (¬(last(#j))) ∧ (#j < #i)))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              solve( (last(#i))  ∥
                     (∃ cdsk mdsk uk type source.
                       (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                      ∧
                       ((∃ uk.1 #k.
                          (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                         ∧
                          (¬(last(#k))) ∧
                          (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                        (('control' = 'control') ∧
                         (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                        (('control' = 'monitor') ∧
                         (∃ #skr.
                           (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                     (∃ #j.
                       (SentASDU( ~linkid,
                                  <h(CSQ), $USR, 
                                   hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                  'aggressive', 'control'
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #i)) )
                case case_1
                solve( !KU( hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>,
                                 CDSK_j_USR_O)
                       ) @ #vk.9 )
                  case A3_C_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   UK_i_USR_O)
                         ) @ #vk.14 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.29 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.24 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.40 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.38 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   UK_i_USR_O)
                         ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                           ((~linkid = ~linkid.1) ∧ (~AK = ~AK.1)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.40 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK.1 ) @ #vk.41 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.43 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_C_AR_Authentication_Aggressive_case_3
                  solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.1, $USR, keystatus, 
                                    CD_j>,
                                   UK_i_USR_O)
                         ) @ #vk.15 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O.2 ) @ #vk.40 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key.1 ) @ #vk.41 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.26 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case c_senc
                          solve( !KU( ~AK ) @ #vk.43 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case cdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                           (~linkid = ~linkid.2) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.18 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                               ) @ #vk.23 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                            keystatus.1, CD_j.1>,
                                           ~UK_i_USR_O.2)
                                 ) @ #vk.26 )
                            case c_senc
                            solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                              case Update_key_reveal
                              solve( !KU( ~CDSK_j_USR_O ) @ #vk.38 )
                                case S3_SKC_session_key_change
                                solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                                  case U3_U4_U5_new_update_key_symmetric_mode
                                  solve( !KU( ~AK ) @ #vk.43 )
                                    case authority_symm_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case Update_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case cdsk_reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case U6_UKCS_Update_Key_Change_Signature
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.36 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.38 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.37 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.24 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.18 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                           (~linkid = ~linkid.2) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.21 )
                        case S3_SKC_session_key_change
                        solve( !KU( hmac(<$OSID, CD_a.1, ~CD_b, h(KSQ.3)>, ~UK_i_USR_O)
                               ) @ #vk.26 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                            keystatus.1, CD_j.1>,
                                           UK_i_USR_O.2)
                                 ) @ #vk.29 )
                            case c_senc
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.45 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                                case U3_U4_U5_new_update_key_symmetric_mode
                                solve( !KU( ~AK ) @ #vk.50 )
                                  case authority_symm_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case U6_UKCC_Update_Key_Change_Confirmation
                          by contradiction /* from formulas */
                        next
                          case U6_UKCS_Update_Key_Change_Signature
                          by contradiction /* from formulas */
                        next
                          case c_hmac
                          solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.45 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.44 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.31 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_3
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.6>, 
                                    aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.29 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.22 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                             (~linkid = ~linkid.2) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.3, $USR, keystatus, 
                                          CD_j>,
                                         ~UK_i_USR_O)
                               ) @ #vk.24 )
                          case S3_SKC_session_key_change
                          solve( !KU( hmac(<$OSID, CD_a.2, ~CD_b.1, h(KSQ.4)>, ~UK_i_USR_O)
                                 ) @ #vk.29 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                              keystatus.1, CD_j.1>,
                                             ~UK_i_USR_O.1)
                                   ) @ #vk.32 )
                              case c_senc
                              solve( !KU( ~UK_i_USR_O.1 ) @ #vk.46 )
                                case U3_U4_U5_new_update_key_asymmetric_mode
                                solve( !KU( ~CDSK_j_USR_O ) @ #vk.49 )
                                  case S3_SKC_session_key_change
                                  solve( !KU( ~outstation_priv_key.1 ) @ #vk.53 )
                                    case outstation_asymm_priv_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case cdsk_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                solve( !KU( ~CDSK_j_USR_O ) @ #vk.49 )
                                  case S3_SKC_session_key_change
                                  solve( !KU( ~UK_i_USR_O ) @ #vk.53 )
                                    case U3_U4_U5_new_update_key_symmetric_mode
                                    solve( !KU( ~AK ) @ #vk.54 )
                                      case authority_symm_key_reveal
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case Update_key_reveal
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case cdsk_reveal
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          next
                            case U6_UKCC_Update_Key_Change_Confirmation
                            by contradiction /* from formulas */
                          next
                            case U6_UKCS_Update_Key_Change_Signature
                            by contradiction /* from formulas */
                          next
                            case c_hmac
                            solve( !KU( ~UK_i_USR_O ) @ #vk.47 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.49 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case c_senc
                          solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.48 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~AK ) @ #vk.35 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.32 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( senc(<$USR, UK_i_USR_O, ~CD_b>, ~AK) ) @ #vk.17 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK ) @ #r) ∧ #r < #vr.4)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.4)  ∥
                           (~linkid = ~linkid.1) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.19 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.25 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.35 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.36 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          solve( !KU( ~AK ) @ #vk.38 )
                            case authority_symm_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( ~AK ) @ #vk.26 )
                      case authority_symm_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case case_2
                solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                  case A4_waiting_receive_C_AC_aggressive
                  solve( (∃ uk #k.
                           (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O,
                                                 'Symmetric', ~AK
                            ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                         (∃ #skr.
                           (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_3
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case S4_SKS_session_key_status_case_3
          solve( !F_OutCCSInvariant( ~oid, ~os, <h(CSQ), $USR, CD> ) ▶₄ #i )
            case A2_C_AC_Authentication_Challenge
            solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∀ linkid ar mode direction #i.
                     (AuthASDU( linkid, ar, mode, direction ) @ #i)
                    ⇒
                     ((last(#i)) ∨
                      (∃ cdsk mdsk uk type source.
                        (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                       ∧
                        ((∃ uk.1 #k.
                           (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                         ((direction = 'control') ∧
                          (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                         ((direction = 'monitor') ∧
                          (∃ #skr.
                            (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                      (∃ #j.
                        (SentASDU( linkid, ar, mode, direction ) @ #j)
                       ∧
                        (¬(last(#j))) ∧ (#j < #i)))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              solve( (last(#i))  ∥
                     (∃ cdsk mdsk uk type source.
                       (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                      ∧
                       ((∃ uk.1 #k.
                          (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                         ∧
                          (¬(last(#k))) ∧
                          (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                        (('control' = 'control') ∧
                         (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                        (('control' = 'monitor') ∧
                         (∃ #skr.
                           (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                     (∃ #j.
                       (SentASDU( ~linkid,
                                  <h(CSQ), $USR, 
                                   hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>, CDSK_j_USR_O)>,
                                  'aggressive', 'control'
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #i)) )
                case case_1
                solve( !KU( sign(<<$OSID, CD_a, ~CD_b, KSQ.2>, 
                                  aenc(<$USR, UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key))>,
                                 ~user_priv_key)
                       ) @ #vk.15 )
                  case U3_U4_U5_new_update_key_asymmetric_mode
                  solve( !KU( hmac(<'amode', h(CSQ), <h(CSQ), $USR, ~CD>, $ASDU>,
                                   CDSK_j_USR_O)
                         ) @ #vk.11 )
                    case A3_C_AR_Authentication_Aggressive_case_1
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.17 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.34 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key ) @ #vk.39 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case A3_C_AR_Authentication_Aggressive_case_2
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.18 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case A3_C_AR_Authentication_Aggressive_case_3
                    solve( !KU( senc(<~CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.18 )
                      case S3_SKC_session_key_change
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case A3_M_AR_Authentication_Aggressive_case_1
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.17 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.28 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.36 )
                          case Update_key_reveal
                          solve( !KU( ~CDSK_j_USR_O ) @ #vk.39 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.43 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case cdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.37 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case A3_M_AR_Authentication_Aggressive_case_2
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.18 )
                      case S3_SKC_session_key_change
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.5, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.2)
                             ) @ #vk.31 )
                        case c_senc
                        solve( !KU( ~CDSK_j_USR_O ) @ #vk.46 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.50 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.51 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case cdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.44 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case A3_M_AR_Authentication_Aggressive_case_3
                    solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.6>, 
                                      aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                     ~user_priv_key.1)
                           ) @ #vk.33 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                        CD_j>,
                                       ~UK_i_USR_O)
                             ) @ #vk.22 )
                        case S3_SKC_session_key_change
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~CDSK_j_USR_O, KSQ.6, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.2)
                               ) @ #vk.34 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.2 ) @ #vk.47 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~outstation_priv_key.1 ) @ #vk.54 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            solve( !KU( ~CDSK_j_USR_O ) @ #vk.50 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.54 )
                                case U3_U4_U5_new_update_key_asymmetric_mode
                                solve( !KU( ~outstation_priv_key ) @ #vk.55 )
                                  case outstation_asymm_priv_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case cdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      next
                        case c_senc
                        solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.48 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~user_priv_key.1 ) @ #vk.36 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( senc(<CDSK_j_USR_O, MDSK_j_USR_O, KSQ.2, $USR, keystatus, 
                                      CD_j>,
                                     ~UK_i_USR_O)
                           ) @ #vk.17 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~CDSK_j_USR_O ) @ #vk.27 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.35 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          solve( !KU( ~outstation_priv_key ) @ #vk.36 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case cdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case c_senc
                      solve( !KU( ~UK_i_USR_O ) @ #vk.32 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.38 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~user_priv_key ) @ #vk.18 )
                    case user_asymm_priv_key_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                  case A4_waiting_receive_C_AC_aggressive
                  solve( (∃ uk #k.
                           (UpdateKeyUsedForSKs( ~linkid, uk, CDSK_j_USR_O, MDSK_j_USR_O,
                                                 'Asymmetric', ~outstation_priv_key
                            ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                         (∃ #skr.
                           (CDSKReveal( CDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_3
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case A4_waiting_receive_M_AC_aggressive
    solve( F_UserWaitForReply( ~uid, ~uu, ~us, cCS, <mCSQ, mChal>, newChal
           ) ▶₁ #i )
      case A2_M_AC_Authentication_Challenge
      solve( !F_UserInvariants( ~uid, AK, $USR.1, $OSID, ~linkid,
                                ~user_priv_key, pk(~outstation_priv_key), pk(~user_priv_key)
             ) ▶₂ #i )
        case Initial_key_pre_distribution
        solve( !F_UserSessKeys( ~uid, ~us, 'OK', CDSK_j_USR_O, MDSK_j_USR_O,
                                UK_i_USR_O, update_key_method, auth_keys_used
               ) ▶₃ #i )
          case S3_SKC_session_key_change_case_1
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∀ linkid ar mode direction #i.
                     (AuthASDU( linkid, ar, mode, direction ) @ #i)
                    ⇒
                     ((last(#i)) ∨
                      (∃ cdsk mdsk uk type source.
                        (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                       ∧
                        ((∃ uk.1 #k.
                           (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                         ((direction = 'control') ∧
                          (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                         ((direction = 'monitor') ∧
                          (∃ #skr.
                            (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                      (∃ #j.
                        (SentASDU( linkid, ar, mode, direction ) @ #j)
                       ∧
                        (¬(last(#j))) ∧ (#j < #i)))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              solve( (last(#i))  ∥
                     (∃ cdsk mdsk uk type source.
                       (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                      ∧
                       ((∃ uk.1 #k.
                          (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                         ∧
                          (¬(last(#k))) ∧
                          (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                        (('monitor' = 'control') ∧
                         (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                        (('monitor' = 'monitor') ∧
                         (∃ #skr.
                           (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                     (∃ #j.
                       (SentASDU( ~linkid,
                                  <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                                  'aggressive', 'monitor'
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #i)) )
                case case_1
                solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                       ) @ #vk.6 )
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   ~UK_i_USR_O.1)
                         ) @ #vk.19 )
                    case S3_SKC_session_key_change
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~UK_i_USR_O.1 ) @ #vk.23 )
                      case Update_key_reveal
                      solve( !KU( ~MDSK_j_USR_O ) @ #vk.26 )
                        case S3_SKC_session_key_change
                        solve( !KU( ~UK_i_USR_O ) @ #vk.30 )
                          case Update_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case mdsk_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                    keystatus.1, CD_j.1>,
                                   UK_i_USR_O.1)
                         ) @ #vk.21 )
                    case S3_SKC_session_key_change
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.13)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.13) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case c_senc
                    solve( !KU( ~MDSK_j_USR_O ) @ #vk.33 )
                      case S3_SKC_session_key_change
                      solve( !KU( ~UK_i_USR_O ) @ #vk.37 )
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case mdsk_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_3
                  solve( !KU( sign(<<$OSID.1, CD_a, ~CD_b, KSQ.4>, 
                                    aenc(<$USR, UK_i_USR_O.1, ~CD_b>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.26 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.3, $USR, 
                                      keystatus.1, CD_j.1>,
                                     ~UK_i_USR_O.1)
                           ) @ #vk.24 )
                      case c_senc
                      solve( !KU( ~UK_i_USR_O.1 ) @ #vk.34 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~outstation_priv_key.1 ) @ #vk.41 )
                            case outstation_asymm_priv_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.29 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.13 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.18 )
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                  case A4_waiting_receive_M_AC_aggressive
                  solve( (∃ uk #k.
                           (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                                 'Initial', 'usb_stick'
                            ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                         (∃ #skr.
                           (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_3
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case S3_SKC_session_key_change_case_2
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∀ linkid ar mode direction #i.
                     (AuthASDU( linkid, ar, mode, direction ) @ #i)
                    ⇒
                     ((last(#i)) ∨
                      (∃ cdsk mdsk uk type source.
                        (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                       ∧
                        ((∃ uk.1 #k.
                           (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                         ((direction = 'control') ∧
                          (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                         ((direction = 'monitor') ∧
                          (∃ #skr.
                            (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                      (∃ #j.
                        (SentASDU( linkid, ar, mode, direction ) @ #j)
                       ∧
                        (¬(last(#j))) ∧ (#j < #i)))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              solve( (last(#i))  ∥
                     (∃ cdsk mdsk uk type source.
                       (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                      ∧
                       ((∃ uk.1 #k.
                          (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                         ∧
                          (¬(last(#k))) ∧
                          (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                        (('monitor' = 'control') ∧
                         (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                        (('monitor' = 'monitor') ∧
                         (∃ #skr.
                           (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                     (∃ #j.
                       (SentASDU( ~linkid,
                                  <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                                  'aggressive', 'monitor'
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #i)) )
                case case_1
                solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                       ) @ #vk.8 )
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.18)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.18)  ∥
                           (¬(#vr.7 < #vr.18))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a ) @ #vk.28 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_4
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.27 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.34 )
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.37 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.41 )
                              case U3_U4_U5_new_update_key_symmetric_mode
                              solve( !KU( ~AK ) @ #vk.42 )
                                case authority_symm_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.1>, 
                                      aenc(<$USR.1, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                     ~user_priv_key.2)
                           ) @ #vk.30 )
                      case c_sign
                      solve( !KU( ~user_priv_key.2 ) @ #vk.34 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.28 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.30 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.13 )
                    case U3_U4_U5_new_update_key_symmetric_mode
                    by contradiction /* from formulas */
                  next
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.20)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.20)  ∥
                           (¬(#vr.7 < #vr.20))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a ) @ #vk.35 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_4
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.2)
                             ) @ #vk.30 )
                        case S3_SKC_session_key_change
                        solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.15)  ∥
                               (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.15)  ∥
                               ((~linkid.1 = ~linkid) ∧ (~AK.1 = ~AK)) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        next
                          case case_3
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.44 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.48 )
                            case U3_U4_U5_new_update_key_symmetric_mode
                            solve( !KU( ~AK ) @ #vk.49 )
                              case authority_symm_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( !KU( sign(<<$OSID.2, ~CD_a, ~CD_b, KSQ.1>, 
                                      aenc(<$USR.1, ~UK_i_USR_O, ~CD_b>, pk(~outstation_priv_key.2))>,
                                     ~user_priv_key.2)
                           ) @ #vk.37 )
                      case c_sign
                      solve( !KU( ~user_priv_key.2 ) @ #vk.41 )
                        case user_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.35 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.37 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_3
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                    aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.31 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, KSQ.1>, ~UK_i_USR_O) ) @ #vk.14 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      by contradiction /* from formulas */
                    next
                      case U6_UKCC_Update_Key_Change_Confirmation
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.23)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.23)  ∥
                             (¬(#vr.7 < #vr.23))  ∥ ((~linkid.2 = ~linkid) ∧ (~AK.2 = ~AK)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        solve( !KU( ~CD_a.1 ) @ #vk.39 )
                          case U3_U4_U5_new_update_key_symmetric_mode
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_4
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.1)
                               ) @ #vk.33 )
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.1 ) @ #vk.45 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~MDSK_j_USR_O ) @ #vk.48 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~outstation_priv_key.1 ) @ #vk.52 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case mdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            solve( !KU( ~MDSK_j_USR_O ) @ #vk.48 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.52 )
                                case U3_U4_U5_new_update_key_symmetric_mode
                                solve( !KU( ~AK ) @ #vk.53 )
                                  case authority_symm_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case mdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case U6_UKCS_Update_Key_Change_Signature
                      solve( !KU( sign(<<$OSID.2, ~CD_a.1, ~CD_b.1, KSQ.2>, 
                                        aenc(<$USR.1, ~UK_i_USR_O, ~CD_b.1>, pk(~outstation_priv_key.2))>,
                                       ~user_priv_key.2)
                             ) @ #vk.41 )
                        case c_sign
                        solve( !KU( ~user_priv_key.2 ) @ #vk.45 )
                          case user_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.39 )
                        case U3_U4_U5_new_update_key_symmetric_mode
                        solve( !KU( ~AK ) @ #vk.41 )
                          case authority_symm_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.34 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.18 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                      case U3_U4_U5_new_update_key_symmetric_mode
                      solve( !KU( ~AK ) @ #vk.24 )
                        case authority_symm_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                  case A4_waiting_receive_M_AC_aggressive
                  solve( (∃ uk #k.
                           (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                                 'Symmetric', ~AK
                            ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                         (∃ #skr.
                           (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_3
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case S3_SKC_session_key_change_case_3
          solve( !F_UserMCSInvariant( ~uid, ~us, AC ) ▶₄ #i )
            case A2_M_AC_Authentication_Challenge
            solve( (∃ ak #r. (AuthorityKeyReveal( ak ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∃ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ∧ ¬(last(#r)))  ∥
                   (∀ linkid ar mode direction #i.
                     (AuthASDU( linkid, ar, mode, direction ) @ #i)
                    ⇒
                     ((last(#i)) ∨
                      (∃ cdsk mdsk uk type source.
                        (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                       ∧
                        ((∃ uk.1 #k.
                           (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                         ((direction = 'control') ∧
                          (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                         ((direction = 'monitor') ∧
                          (∃ #skr.
                            (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))))) ∨
                      (∃ #j.
                        (SentASDU( linkid, ar, mode, direction ) @ #j)
                       ∧
                        (¬(last(#j))) ∧ (#j < #i)))) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              solve( (last(#i))  ∥
                     (∃ cdsk mdsk uk type source.
                       (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
                      ∧
                       ((∃ uk.1 #k.
                          (UpdateKeyUsedForSKs( ~linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
                         ∧
                          (¬(last(#k))) ∧
                          (∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i))) ∨
                        (('monitor' = 'control') ∧
                         (∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i))) ∨
                        (('monitor' = 'monitor') ∧
                         (∃ #skr.
                           (MDSKReveal( mdsk ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)))))  ∥
                     (∃ #j.
                       (SentASDU( ~linkid,
                                  <h(mCSQ), $USR, hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)>,
                                  'aggressive', 'monitor'
                        ) @ #j)
                      ∧
                       (¬(last(#j))) ∧ (#j < #i)) )
                case case_1
                solve( !KU( hmac(<'amode', h(mCSQ), mChal, $ASDU>, ~MDSK_j_USR_O)
                       ) @ #vk.8 )
                  case A3_M_AR_Authentication_Aggressive_case_1
                  solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O)
                         ) @ #vk.13 )
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.18)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.18)  ∥
                           (¬(#vr.7 < #vr.18)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a ) @ #vk.27 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( (∃ #r.
                             (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.18)  ∥
                           (¬(#vr.7 < #vr.18))  ∥
                           ((~linkid.2 = ~linkid) ∧
                            (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                            (~user_priv_key.2 = ~user_priv_key)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !KU( ~CD_a ) @ #vk.27 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       ~UK_i_USR_O.2)
                             ) @ #vk.26 )
                        case c_senc
                        solve( !KU( ~UK_i_USR_O.2 ) @ #vk.35 )
                          case Update_key_reveal
                          solve( !KU( ~MDSK_j_USR_O ) @ #vk.38 )
                            case S3_SKC_session_key_change
                            solve( !KU( ~UK_i_USR_O ) @ #vk.42 )
                              case U3_U4_U5_new_update_key_asymmetric_mode
                              solve( !KU( ~outstation_priv_key ) @ #vk.43 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case Update_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case mdsk_reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.27 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.31 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_2
                  solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O)
                         ) @ #vk.13 )
                    case U6_UKCC_Update_Key_Change_Confirmation
                    solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.20)  ∥
                           (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.20)  ∥
                           (¬(#vr.7 < #vr.20)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    next
                      case case_3
                      solve( !KU( ~CD_a ) @ #vk.34 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case U6_UKCS_Update_Key_Change_Signature
                    solve( (∃ #r.
                             (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.20)  ∥
                           (¬(#vr.7 < #vr.20))  ∥
                           ((~linkid.2 = ~linkid) ∧
                            (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                            (~user_priv_key.2 = ~user_priv_key)) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !KU( ~CD_a ) @ #vk.34 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        by contradiction /* cyclic */
                      qed
                    next
                      case case_3
                      solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.4, $USR, 
                                        keystatus.1, CD_j.1>,
                                       UK_i_USR_O.2)
                             ) @ #vk.29 )
                        case S3_SKC_session_key_change
                        solve( (∃ #r. (AuthorityKeyReveal( ~AK.1 ) @ #r) ∧ #r < #vr.15)  ∥
                               (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.15) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case c_senc
                        solve( !KU( ~MDSK_j_USR_O ) @ #vk.45 )
                          case S3_SKC_session_key_change
                          solve( !KU( ~UK_i_USR_O ) @ #vk.49 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~outstation_priv_key ) @ #vk.50 )
                              case outstation_asymm_priv_key_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            by contradiction /* from formulas */
                          qed
                        next
                          case mdsk_reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_hmac
                    solve( !KU( ~UK_i_USR_O ) @ #vk.34 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.38 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case A3_M_AR_Authentication_Aggressive_case_3
                  solve( !KU( sign(<<$OSID.1, CD_a.1, ~CD_b.1, KSQ.5>, 
                                    aenc(<$USR, UK_i_USR_O.2, ~CD_b.1>, pk(~outstation_priv_key.1))>,
                                   ~user_priv_key.1)
                         ) @ #vk.31 )
                    case U3_U4_U5_new_update_key_asymmetric_mode
                    solve( !KU( hmac(<$USR.1, CD_b, ~CD_a, h(KSQ.1)>, ~UK_i_USR_O)
                           ) @ #vk.14 )
                      case U6_UKCC_Update_Key_Change_Confirmation
                      solve( (∃ #r. (AuthorityKeyReveal( ~AK.2 ) @ #r) ∧ #r < #vr.23)  ∥
                             (∃ #r. (UpdateKeyReveal( ~UK_i_USR_O ) @ #r) ∧ #r < #vr.23)  ∥
                             (¬(#vr.7 < #vr.23)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      next
                        case case_3
                        solve( !KU( ~CD_a.1 ) @ #vk.38 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case U6_UKCS_Update_Key_Change_Signature
                      solve( (∃ #r.
                               (UserPrivateKeyReveal( ~user_priv_key.2 ) @ #r) ∧ #r < #vr.23)  ∥
                             (¬(#vr.7 < #vr.23))  ∥
                             ((~linkid.2 = ~linkid) ∧
                              (~outstation_priv_key.2 = ~outstation_priv_key) ∧
                              (~user_priv_key.2 = ~user_priv_key)) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !KU( ~CD_a.1 ) @ #vk.38 )
                          case U3_U4_U5_new_update_key_asymmetric_mode
                          by contradiction /* cyclic */
                        qed
                      next
                        case case_3
                        solve( !KU( senc(<CDSK_j_USR_O.1, ~MDSK_j_USR_O, KSQ.5, $USR, 
                                          keystatus.1, CD_j.1>,
                                         ~UK_i_USR_O.1)
                               ) @ #vk.32 )
                          case S3_SKC_session_key_change
                          by contradiction /* from formulas */
                        next
                          case c_senc
                          solve( !KU( ~UK_i_USR_O.1 ) @ #vk.46 )
                            case U3_U4_U5_new_update_key_asymmetric_mode
                            solve( !KU( ~MDSK_j_USR_O ) @ #vk.49 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~outstation_priv_key.1 ) @ #vk.53 )
                                case outstation_asymm_priv_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case mdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          next
                            case Update_key_reveal
                            solve( !KU( ~MDSK_j_USR_O ) @ #vk.49 )
                              case S3_SKC_session_key_change
                              solve( !KU( ~UK_i_USR_O ) @ #vk.53 )
                                case U3_U4_U5_new_update_key_asymmetric_mode
                                solve( !KU( ~outstation_priv_key ) @ #vk.54 )
                                  case outstation_asymm_priv_key_reveal
                                  by contradiction /* from formulas */
                                qed
                              next
                                case Update_key_reveal
                                by contradiction /* from formulas */
                              qed
                            next
                              case mdsk_reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_hmac
                      solve( !KU( ~UK_i_USR_O ) @ #vk.38 )
                        case U3_U4_U5_new_update_key_asymmetric_mode
                        solve( !KU( ~outstation_priv_key ) @ #vk.42 )
                          case outstation_asymm_priv_key_reveal
                          by contradiction /* from formulas */
                        qed
                      next
                        case Update_key_reveal
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~user_priv_key.1 ) @ #vk.34 )
                      case user_asymm_priv_key_reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_hmac
                  solve( !KU( ~MDSK_j_USR_O ) @ #vk.18 )
                    case S3_SKC_session_key_change
                    solve( !KU( ~UK_i_USR_O ) @ #vk.23 )
                      case U3_U4_U5_new_update_key_asymmetric_mode
                      solve( !KU( ~outstation_priv_key ) @ #vk.24 )
                        case outstation_asymm_priv_key_reveal
                        by contradiction /* from formulas */
                      qed
                    next
                      case Update_key_reveal
                      by contradiction /* from formulas */
                    qed
                  next
                    case mdsk_reveal
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i )
                  case A4_waiting_receive_M_AC_aggressive
                  solve( (∃ uk #k.
                           (UpdateKeyUsedForSKs( ~linkid, uk, ~CDSK_j_USR_O, ~MDSK_j_USR_O,
                                                 'Asymmetric', ~outstation_priv_key
                            ) @ #k)
                          ∧
                           (¬(last(#k))) ∧
                           (∃ #kr. (UpdateKeyReveal( uk ) @ #kr) ∧ (¬(last(#kr))) ∧ (#kr < #i)))  ∥
                         (∃ #skr.
                           (MDSKReveal( ~MDSK_j_USR_O ) @ #skr) ∧ (¬(last(#skr))) ∧ (#skr < #i)) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_3
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma asdu_injective_agreement:
  all-traces
  "(((¬(∃ ak #r. AuthorityKeyReveal( ak ) @ #r)) ∧
     (¬(∃ oprk #r. OutstationPrivateKeyReveal( oprk ) @ #r))) ∧
    (¬(∃ uprk #r. UserPrivateKeyReveal( uprk ) @ #r))) ⇒
   (∀ linkid ar mode direction #i #j.
     ((((∀ cdsk mdsk uk type source.
          (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i) ⇒
          (((∀ uk.1 #k.
              (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k) ⇒
              (¬(∃ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ∧ (#kr < #i)))) ∧
            ((direction = 'control') ⇒
             (¬(∃ #skr. (CDSKReveal( cdsk ) @ #skr) ∧ (#skr < #i))))) ∧
           ((direction = 'monitor') ⇒
            (¬(∃ #skr. (MDSKReveal( mdsk ) @ #skr) ∧ (#skr < #i)))))) ∧
        (AuthASDU( linkid, ar, mode, direction ) @ #i)) ∧
       (SentASDU( linkid, ar, mode, direction ) @ #j)) ∧
      (#j < #i)) ⇒
     (¬(∃ #k.
         (AuthASDU( linkid, ar, mode, direction ) @ #k) ∧ (¬(#k = #i)))))"
/*
guarded formula characterizing all counter-examples:
"(∀ ak #r. (AuthorityKeyReveal( ak ) @ #r) ⇒ ⊥) ∧
 (∀ oprk #r. (OutstationPrivateKeyReveal( oprk ) @ #r) ⇒ ⊥) ∧
 (∀ uprk #r. (UserPrivateKeyReveal( uprk ) @ #r) ⇒ ⊥) ∧
 (∃ linkid ar mode direction #i #j.
   (AuthASDU( linkid, ar, mode, direction ) @ #i) ∧
   (SentASDU( linkid, ar, mode, direction ) @ #j)
  ∧
   (∀ cdsk mdsk uk type source.
     (UsingSessKeys( cdsk, mdsk, uk, type, source ) @ #i)
    ⇒
     (∀ uk.1 #k.
       (UpdateKeyUsedForSKs( linkid, uk.1, cdsk, mdsk, type, source ) @ #k)
      ⇒
       ∀ #kr. (UpdateKeyReveal( uk.1 ) @ #kr) ⇒ ¬(#kr < #i)) ∧
     (((¬(direction = 'control')) ∨
       (∀ #skr. (CDSKReveal( cdsk ) @ #skr) ⇒ ¬(#skr < #i)))) ∧
     (((¬(direction = 'monitor')) ∨
       (∀ #skr. (MDSKReveal( mdsk ) @ #skr) ⇒ ¬(#skr < #i))))) ∧
   (#j < #i) ∧
   (∃ #k. (AuthASDU( linkid, ar, mode, direction ) @ #k) ∧ ¬(#k = #i)))"
*/
simplify
by contradiction /* from formulas */

/* All well-formedness checks were successful. */

end

==============================================================================
summary of summaries:

analyzed: dnp3.spthy

  countervalue_uniqueness (all-traces): verified (26 steps)
  CSQ_Uniqueness (all-traces): verified (58 steps)
  sessions_unique (all-traces): verified (122 steps)
  update_key_sourced (all-traces): verified (65 steps)
  update_key_agreement (all-traces): verified (131 steps)
  update_key_secrecy (all-traces): verified (21 steps)
  session_key_secrecy (all-traces): verified (376 steps)
  sessionkeys_sourced (all-traces): verified (76 steps)
  skiup_agreement (all-traces): verified (320 steps)
  asdu_agreement_implies_mode_agreement (all-traces): verified (1493 steps)
  asdu_aliveness (all-traces): verified (1657 steps)
  asdu_injective_agreement (all-traces): verified (2 steps)

==============================================================================
