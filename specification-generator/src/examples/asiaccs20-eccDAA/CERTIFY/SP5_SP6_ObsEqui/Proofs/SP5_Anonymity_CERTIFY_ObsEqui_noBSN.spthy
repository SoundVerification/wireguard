theory SP5_Anonymity_CERTIFY_ObsEqui_noBSN begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: BSN/1, E/2, E_S/2, F1/1, F2/1, H_6/1, H_SHA256/1,
           H_k_1/1, H_k_2/2, H_k_6/6, H_n_2/2, H_n_4/4, H_p/1, KDF_AES/1,
           KDF_EK/1, KDF_a/3, L_J/2, MAC/2, Nonce/1, PkX/2, PkY/2, PointG1/2,
           QName/2, QPub/2, RB/2, RD/2, accept/0, adec/2, aenc/2, calcE/1,
           calcE_S/1, calcL_J/1, calcRB/1, calcRD/1, certData/2, curlyK/1,
           fst/1, len16/1, minus/2, multp/2, pair/2, pk/1, plus/2, sdec/2,
           senc/2, snd/1, verifyCre1/4, verifyCre2/5, verifyCre3/4,
           verifyCre4/5
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

restriction single_issuer_single_init [right]:
  "∀ #i #j.
    ((Issuer_Init( ) @ #i) ∧ (Issuer_Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction single_issuer_single_init [left]:
  "∀ #i #j.
    ((Issuer_Init( ) @ #i) ∧ (Issuer_Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Issuer_Init:
   [ Fr( ~x ), Fr( ~y ) ]
  --[ Issuer_Init( ), OnlyOnce( 'Issuer_Init' ) ]->
   [
   !Ltk( 'Issuer', ~x, ~y ),
   !Pk( 'Issuer', PkX(~x, 'P2'), PkY(~y, 'P2') ),
   Out( <PkX(~x, 'P2'), PkY(~y, 'P2')> )
   ]

rule (modulo E) Issuer_KeyReveal:
   [ !Ltk( I, x, y ) ]
  --[ KeyReveal( 'Issuer_KeyReveal', I ) ]->
   [ Out( <x, y> ) ]

rule (modulo E) Generate_TPM_DAA_CERTIFY:
   [
   !Pk( I, PkX(x, 'P2'), PkY(y, 'P2') ), !Ltk( I, x, y ), Fr( ~r1 ),
   Fr( ~r2 ), Fr( ~g1 ), Fr( ~genP1 ), Fr( ~g2 ), Fr( ~genP2 ),
   Fr( ~basename1 ), Fr( ~basename2 ), Fr( ~TPM_EK_Seed1 ), Fr( ~f1 ),
   Fr( ~sl_1 ), Fr( ~cv1_1 ), Fr( ~r_cv1_1 ), Fr( ~rnd_n_C1 ),
   Fr( ~TPM_EK_Seed2 ), Fr( ~f2 ), Fr( ~sl_2 ), Fr( ~cv1_2 ),
   Fr( ~r_cv1_2 ), Fr( ~rnd_n_C2 )
   ]
  --[ CreateSigmas( ), OnlyOnce( 'SIGN' ) ]->
   [
   Shuffle_Sigmas( (
                    <E_S(~r_cv1_1, multp(~sl_1, multp(y, multp(~r1, 'P1')))), 
                     QPub('Generic_DAA_public_data', multp(~g1, ~genP1)), 
                     certData('certificationData',
                              QName('SHA256',
                                    H_SHA256(QPub('Generic_DAA_public_data',
                                                  multp(~g1, ~genP1))))), 
                     BSN('bottom'), multp(~sl_1, multp(~r1, 'P1')), 
                     multp(~sl_1, multp(y, multp(~r1, 'P1'))), 
                     multp(~sl_1,
                           plus(multp(x, multp(~r1, 'P1')),
                                multp(multp(multp(~r1, x), y), multp(~f1, 'P1')))), 
                     multp(~sl_1, multp(multp(~r1, y), multp(~f1, 'P1'))), 
                     H_n_2(Nonce(~rnd_n_C1),
                           H_k_2(H_k_6('CredentialData', multp(~sl_1, multp(~r1, 'P1')),
                                       multp(~sl_1, multp(y, multp(~r1, 'P1'))),
                                       multp(~sl_1,
                                             plus(multp(x, multp(~r1, 'P1')),
                                                  multp(multp(multp(~r1, x), y),
                                                        multp(~f1, 'P1')))),
                                       multp(~sl_1, multp(multp(~r1, y), multp(~f1, 'P1'))),
                                       E_S(~r_cv1_1, multp(~sl_1, multp(y, multp(~r1, 'P1'))))),
                                 H_6(certData('certificationData',
                                              QName('SHA256',
                                                    H_SHA256(QPub('Generic_DAA_public_data',
                                                                  multp(~g1, ~genP1)))))))), 
                     plus(~r_cv1_1,
                          multp(H_n_2(Nonce(~rnd_n_C1),
                                      H_k_2(H_k_6('CredentialData', multp(~sl_1, multp(~r1, 'P1')),
                                                  multp(~sl_1, multp(y, multp(~r1, 'P1'))),
                                                  multp(~sl_1,
                                                        plus(multp(x, multp(~r1, 'P1')),
                                                             multp(multp(multp(~r1, x), y),
                                                                   multp(~f1, 'P1')))),
                                                  multp(~sl_1,
                                                        multp(multp(~r1, y), multp(~f1, 'P1'))),
                                                  E_S(~r_cv1_1,
                                                      multp(~sl_1, multp(y, multp(~r1, 'P1'))))),
                                            H_6(certData('certificationData',
                                                         QName('SHA256',
                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                             multp(~g1,
                                                                                   ~genP1)))))))),
                                ~f1)), 
                     Nonce(~rnd_n_C1)>+
                    <E_S(~r_cv1_2, multp(~sl_2, multp(y, multp(~r2, 'P1')))), 
                     QPub('Generic_DAA_public_data', multp(~g2, ~genP2)), 
                     certData('certificationData',
                              QName('SHA256',
                                    H_SHA256(QPub('Generic_DAA_public_data',
                                                  multp(~g2, ~genP2))))), 
                     BSN(~basename2), multp(~sl_2, multp(~r2, 'P1')), 
                     multp(~sl_2, multp(y, multp(~r2, 'P1'))), 
                     multp(~sl_2,
                           plus(multp(x, multp(~r2, 'P1')),
                                multp(multp(multp(~r2, x), y), multp(~f2, 'P1')))), 
                     multp(~sl_2, multp(multp(~r2, y), multp(~f2, 'P1'))), 
                     H_n_2(Nonce(~rnd_n_C2),
                           H_k_2(H_k_6('CredentialData', multp(~sl_2, multp(~r2, 'P1')),
                                       multp(~sl_2, multp(y, multp(~r2, 'P1'))),
                                       multp(~sl_2,
                                             plus(multp(x, multp(~r2, 'P1')),
                                                  multp(multp(multp(~r2, x), y),
                                                        multp(~f2, 'P1')))),
                                       multp(~sl_2, multp(multp(~r2, y), multp(~f2, 'P1'))),
                                       E_S(~r_cv1_2, multp(~sl_2, multp(y, multp(~r2, 'P1'))))),
                                 H_6(certData('certificationData',
                                              QName('SHA256',
                                                    H_SHA256(QPub('Generic_DAA_public_data',
                                                                  multp(~g2, ~genP2)))))))), 
                     plus(~r_cv1_2,
                          multp(H_n_2(Nonce(~rnd_n_C2),
                                      H_k_2(H_k_6('CredentialData', multp(~sl_2, multp(~r2, 'P1')),
                                                  multp(~sl_2, multp(y, multp(~r2, 'P1'))),
                                                  multp(~sl_2,
                                                        plus(multp(x, multp(~r2, 'P1')),
                                                             multp(multp(multp(~r2, x), y),
                                                                   multp(~f2, 'P1')))),
                                                  multp(~sl_2,
                                                        multp(multp(~r2, y), multp(~f2, 'P1'))),
                                                  E_S(~r_cv1_2,
                                                      multp(~sl_2, multp(y, multp(~r2, 'P1'))))),
                                            H_6(certData('certificationData',
                                                         QName('SHA256',
                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                             multp(~g2,
                                                                                   ~genP2)))))))),
                                ~f2)), 
                     Nonce(~rnd_n_C2)>
                   )
   ),
   TPM_EK_QPD1( <pk(KDF_EK(~TPM_EK_Seed1)), 'DAA_public_data', 
                 multp(~f1, 'P1')>
   ),
   TPM_EK_QPD2( <pk(KDF_EK(~TPM_EK_Seed2)), 'DAA_public_data', 
                 multp(~f2, 'P1')>
   )
   ]

rule (modulo E) Diff_DAA_CERTIFY_no_verify:
   [
   Shuffle_Sigmas( (
                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                     h2_host1, small_s1, n_C1>+
                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                     h2_host2, small_s2, n_C2>
                   )
   ),
   TPM_EK_QPD1( <pk(e1), Q_PD1> ), TPM_EK_QPD2( <pk(e2), Q_PD2> )
   ]
  --[ Diff_Sigs( ), OnlyOnce( 'Diff_DAA_QUOTE' ) ]->
   [
   Out( <'FirstTPM', pk(e1), Q_PD1> ),
   Out( <'SecondTPM', pk(e2), Q_PD2> ),
   Out( diff(<E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, 
              W1, h2_host1, small_s1, n_C1>, <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, 
                                              bsn2, R2, S2, T2, W2, h2_host2, small_s2, n_C2>)
   )
   ]

lemma diff_signatures_no_verify [right]:
  exists-trace
  "∃ #t1 #t2 #t3.
    ((((((Issuer_Init( ) @ #t1) ∧ (CreateSigmas( ) @ #t2)) ∧
        (Diff_Sigs( ) @ #t3)) ∧
       (#t1 < #t2)) ∧
      (#t2 < #t3)) ∧
     (¬(∃ RevealEvent ENTITY #k1.
         KeyReveal( RevealEvent, ENTITY ) @ #k1))) ∧
    (∀ event #i #j.
      ((OnlyOnce( event ) @ #i) ∧ (OnlyOnce( event ) @ #j)) ⇒ (#i = #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #t1 #t2 #t3.
  (Issuer_Init( ) @ #t1) ∧
  (CreateSigmas( ) @ #t2) ∧
  (Diff_Sigs( ) @ #t3)
 ∧
  (#t1 < #t2) ∧
  (#t2 < #t3) ∧
  (∀ RevealEvent ENTITY #k1.
    (KeyReveal( RevealEvent, ENTITY ) @ #k1) ⇒ ⊥) ∧
  (∀ event #i #j.
    (OnlyOnce( event ) @ #i) ∧ (OnlyOnce( event ) @ #j) ⇒ #i = #j)"
*/
simplify
solve( !Pk( I, PkX(x.1, 'P2'), PkY(y.1, 'P2') ) ▶₀ #t2 )
  case Issuer_Init
  solve( !Ltk( 'Issuer', ~x, ~y ) ▶₁ #t2 )
    case Issuer_Init
    solve( Shuffle_Sigmas( (
                            <E_S(r_cv1_1.1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                             h2_host1, small_s1, n_C1>+
                            <E_S(r_cv1_2.1, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                             h2_host2, small_s2, n_C2>
                           )
           ) ▶₀ #t3 )
      case Generate_TPM_DAA_CERTIFY_case_1
      solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #t3 )
        case Generate_TPM_DAA_CERTIFY
        solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #t3 )
          case Generate_TPM_DAA_CERTIFY
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma diff_signatures_no_verify [left]:
  exists-trace
  "∃ #t1 #t2 #t3.
    ((((((Issuer_Init( ) @ #t1) ∧ (CreateSigmas( ) @ #t2)) ∧
        (Diff_Sigs( ) @ #t3)) ∧
       (#t1 < #t2)) ∧
      (#t2 < #t3)) ∧
     (¬(∃ RevealEvent ENTITY #k1.
         KeyReveal( RevealEvent, ENTITY ) @ #k1))) ∧
    (∀ event #i #j.
      ((OnlyOnce( event ) @ #i) ∧ (OnlyOnce( event ) @ #j)) ⇒ (#i = #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #t1 #t2 #t3.
  (Issuer_Init( ) @ #t1) ∧
  (CreateSigmas( ) @ #t2) ∧
  (Diff_Sigs( ) @ #t3)
 ∧
  (#t1 < #t2) ∧
  (#t2 < #t3) ∧
  (∀ RevealEvent ENTITY #k1.
    (KeyReveal( RevealEvent, ENTITY ) @ #k1) ⇒ ⊥) ∧
  (∀ event #i #j.
    (OnlyOnce( event ) @ #i) ∧ (OnlyOnce( event ) @ #j) ⇒ #i = #j)"
*/
simplify
solve( !Pk( I, PkX(x.1, 'P2'), PkY(y.1, 'P2') ) ▶₀ #t2 )
  case Issuer_Init
  solve( !Ltk( 'Issuer', ~x, ~y ) ▶₁ #t2 )
    case Issuer_Init
    solve( Shuffle_Sigmas( (
                            <E_S(r_cv1_1.1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                             h2_host1, small_s1, n_C1>+
                            <E_S(r_cv1_2.1, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                             h2_host2, small_s2, n_C2>
                           )
           ) ▶₀ #t3 )
      case Generate_TPM_DAA_CERTIFY_case_1
      solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #t3 )
        case Generate_TPM_DAA_CERTIFY
        solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #t3 )
          case Generate_TPM_DAA_CERTIFY
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_adec
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( aenc(x, pk(x.1)) ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        by step( contradiction /* impossible chain */ )
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Issuer_Init
      by step( contradiction /* impossible chain */ )
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.2, y ) ▶₀ #vr ) )
        case Issuer_Init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( aenc(x, pk(x.1)) ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        by step( contradiction /* impossible chain */ )
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Issuer_Init
      by step( contradiction /* impossible chain */ )
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.2, y ) ▶₀ #vr ) )
        case Issuer_Init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Issuer_Init
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( contradiction /* impossible chain */ )
      next
        case pair
        MIRRORED
      qed
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.2, y ) ▶₀ #vr ) )
        case Issuer_Init
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        next
          case pair
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Issuer_Init
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( contradiction /* impossible chain */ )
      next
        case pair
        MIRRORED
      qed
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.2, y ) ▶₀ #vr ) )
        case Issuer_Init
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        next
          case pair
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_sdec
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( senc(x, x.1) ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        by step( contradiction /* impossible chain */ )
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Issuer_Init
      by step( contradiction /* impossible chain */ )
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.2, y ) ▶₀ #vr ) )
        case Issuer_Init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( senc(x, x.1) ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        by step( contradiction /* impossible chain */ )
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Issuer_Init
      by step( contradiction /* impossible chain */ )
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.2, y ) ▶₀ #vr ) )
        case Issuer_Init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Issuer_Init
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( contradiction /* impossible chain */ )
      next
        case pair
        MIRRORED
      qed
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.2, y ) ▶₀ #vr ) )
        case Issuer_Init
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        next
          case pair
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( contradiction /* impossible chain */ )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( contradiction /* impossible chain */ )
                              next
                                case pair
                                MIRRORED
                              qed
                            next
                              case pair
                              MIRRORED
                            qed
                          next
                            case pair
                            MIRRORED
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      qed
    next
      case Issuer_Init
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( contradiction /* impossible chain */ )
      next
        case pair
        MIRRORED
      qed
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.2, y ) ▶₀ #vr ) )
        case Issuer_Init
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( contradiction /* impossible chain */ )
        next
          case pair
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_union
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        by step( contradiction /* impossible chain */ )
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Issuer_Init
      by step( contradiction /* impossible chain */ )
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr ) )
        case Issuer_Init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          by step( contradiction /* impossible chain */ )
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        by step( contradiction /* impossible chain */ )
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        by step( contradiction /* impossible chain */ )
      qed
    next
      case Issuer_Init
      by step( contradiction /* impossible chain */ )
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr ) )
        case Issuer_Init
        by step( contradiction /* impossible chain */ )
      qed
    qed
  qed
next
  case Rule_Diff_DAA_CERTIFY_no_verify
  backward-search
    case LHS
    step( simplify )
    step( solve( Shuffle_Sigmas( (
                                  <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                   h2_host1, small_s1, n_C1>+
                                  <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                   h2_host2, small_s2, n_C2>
                                 )
                 ) ▶₀ #i ) )
      case Generate_TPM_DAA_CERTIFY_case_1
      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #i ) )
        case Generate_TPM_DAA_CERTIFY
        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #i ) )
          case Generate_TPM_DAA_CERTIFY
          MIRRORED
        qed
      qed
    next
      case Generate_TPM_DAA_CERTIFY_case_2
      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #i ) )
        case Generate_TPM_DAA_CERTIFY
        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #i ) )
          case Generate_TPM_DAA_CERTIFY
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( Shuffle_Sigmas( (
                                  <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                   h2_host1, small_s1, n_C1>+
                                  <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                   h2_host2, small_s2, n_C2>
                                 )
                 ) ▶₀ #i ) )
      case Generate_TPM_DAA_CERTIFY_case_1
      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #i ) )
        case Generate_TPM_DAA_CERTIFY
        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #i ) )
          case Generate_TPM_DAA_CERTIFY
          MIRRORED
        qed
      qed
    next
      case Generate_TPM_DAA_CERTIFY_case_2
      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #i ) )
        case Generate_TPM_DAA_CERTIFY
        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #i ) )
          case Generate_TPM_DAA_CERTIFY
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_FirstTPM
                step( solve( !KU( 'FirstTPM' ) @ #vk ) )
                  case coerce
                  step( solve( !KD( 'FirstTPM' ) ▶₀ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.6 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case pk
                  step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_pk
                    step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.1 ) )
                      case c_KDF_EK
                      by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.2 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_DAA_public_data
                    step( solve( !KU( 'DAA_public_data' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify_case_1
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_2
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_3
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      next
                        case Issuer_KeyReveal
                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                          case Issuer_Init
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case multp
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.1 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.1 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.2 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.3 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.4 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.5 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.5 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( 'FirstTPM' ) @ #vk.3 ) )
                case coerce
                step( solve( !KD( 'FirstTPM' ) ▶₀ #vk.3 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.5 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.6 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.7 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_FirstTPM
                step( solve( !KU( 'FirstTPM' ) @ #vk ) )
                  case coerce
                  step( solve( !KD( 'FirstTPM' ) ▶₀ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.6 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case pk
                  step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_pk
                    step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.1 ) )
                      case c_KDF_EK
                      by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.2 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_DAA_public_data
                    step( solve( !KU( 'DAA_public_data' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify_case_1
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_2
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_3
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      next
                        case Issuer_KeyReveal
                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                          case Issuer_Init
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case multp
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.1 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.1 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.2 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.3 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.4 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.5 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.5 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( 'FirstTPM' ) @ #vk.3 ) )
                case coerce
                step( solve( !KD( 'FirstTPM' ) ▶₀ #vk.3 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.5 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.6 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.7 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_SecondTPM
                step( solve( !KU( 'SecondTPM' ) @ #vk ) )
                  case coerce
                  step( solve( !KD( 'SecondTPM' ) ▶₀ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.6 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case pk
                  step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_pk
                    step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.1 ) )
                      case c_KDF_EK
                      by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.2 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_DAA_public_data
                    step( solve( !KU( 'DAA_public_data' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify_case_1
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_2
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_3
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      next
                        case Issuer_KeyReveal
                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                          case Issuer_Init
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case multp
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.1 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.1 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.2 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.3 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.4 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.5 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.5 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( 'SecondTPM' ) @ #vk.3 ) )
                case coerce
                step( solve( !KD( 'SecondTPM' ) ▶₀ #vk.3 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.5 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.6 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.7 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_SecondTPM
                step( solve( !KU( 'SecondTPM' ) @ #vk ) )
                  case coerce
                  step( solve( !KD( 'SecondTPM' ) ▶₀ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.6 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case pk
                  step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_pk
                    step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.1 ) )
                      case c_KDF_EK
                      by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.2 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_DAA_public_data
                    step( solve( !KU( 'DAA_public_data' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify_case_1
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_2
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_3
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      next
                        case Issuer_KeyReveal
                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                          case Issuer_Init
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case multp
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.1 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.1 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.2 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.3 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.4 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.5 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.5 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( 'SecondTPM' ) @ #vk.3 ) )
                case coerce
                step( solve( !KD( 'SecondTPM' ) ▶₀ #vk.3 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.5 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.6 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.7 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case E_S
                step( solve( !KU( E_S(~r_cv1_1,
                                      multp(~sl_1, multp(~y, multp(~r1, 'P1'))))
                             ) @ #vk ) )
                  case Diff_DAA_CERTIFY_no_verify
                  MIRRORED
                next
                  case c_E_S
                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case QPub
                  step( solve( !KU( QPub('Generic_DAA_public_data',
                                         multp(~g1, ~genP1))
                               ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_QPub
                    step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.2 ) )
                      case c_multp
                      by step( solve( !KU( ~g1 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case certData
                    step( solve( !KU( certData('certificationData',
                                               QName('SHA256',
                                                     H_SHA256(QPub('Generic_DAA_public_data',
                                                                   multp(~g1, ~genP1)))))
                                 ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_certData
                      step( solve( !KU( QName('SHA256',
                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                            multp(~g1, ~genP1))))
                                   ) @ #vk.2 ) )
                        case c_QName
                        step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                        multp(~g1, ~genP1)))
                                     ) @ #vk.4 ) )
                          case c_H_SHA256
                          step( solve( !KU( 'certificationData' ) @ #vk.3 ) )
                            case coerce
                            step( solve( !KD( 'certificationData' ) ▶₀ #vk.3 ) )
                              case Diff_DAA_CERTIFY_no_verify_case_1
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case Diff_DAA_CERTIFY_no_verify_case_2
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Diff_DAA_CERTIFY_no_verify_case_3
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                by step( contradiction /* impossible chain */ )
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Issuer_Init
                              by step( contradiction /* impossible chain */ )
                            next
                              case Issuer_KeyReveal
                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                                case Issuer_Init
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( 'SHA256' ) @ #vk.4 ) )
                              case coerce
                              step( solve( !KD( 'SHA256' ) ▶₀ #vk.4 ) )
                                case Diff_DAA_CERTIFY_no_verify_case_1
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case Diff_DAA_CERTIFY_no_verify_case_2
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                      case Generate_TPM_DAA_CERTIFY
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                      case Generate_TPM_DAA_CERTIFY
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Diff_DAA_CERTIFY_no_verify_case_3
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Issuer_Init
                                by step( contradiction /* impossible chain */ )
                              next
                                case Issuer_KeyReveal
                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                                  case Issuer_Init
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( QPub('Generic_DAA_public_data',
                                                     multp(~g1, ~genP1))
                                           ) @ #vk.5 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                MIRRORED
                              next
                                case c_QPub
                                step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.7 ) )
                                  case c_multp
                                  by step( solve( !KU( ~g1 ) @ #vk.8 ) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case BSN
                      step( solve( !KU( BSN('bottom') ) @ #vk ) )
                        case c_BSN
                        step( solve( !KU( 'bottom' ) @ #vk.1 ) )
                          case coerce
                          step( solve( !KD( 'bottom' ) ▶₀ #vk.1 ) )
                            case Diff_DAA_CERTIFY_no_verify_case_1
                            step( solve( Shuffle_Sigmas( (
                                                          <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                           bsn1, R1, S1, T1, W1, h2_host1, 
                                                           small_s1, n_C1>+
                                                          <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                           bsn2, R2, S2, T2, W2, h2_host2, 
                                                           small_s2, n_C2>
                                                         )
                                         ) ▶₀ #vr.9 ) )
                              case Generate_TPM_DAA_CERTIFY_case_1
                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.9 ) )
                                case Generate_TPM_DAA_CERTIFY
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Generate_TPM_DAA_CERTIFY_case_2
                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.9 ) )
                                case Generate_TPM_DAA_CERTIFY
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case Diff_DAA_CERTIFY_no_verify_case_2
                            step( solve( Shuffle_Sigmas( (
                                                          <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                           bsn1, R1, S1, T1, W1, h2_host1, 
                                                           small_s1, n_C1>+
                                                          <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                           bsn2, R2, S2, T2, W2, h2_host2, 
                                                           small_s2, n_C2>
                                                         )
                                         ) ▶₀ #vr.9 ) )
                              case Generate_TPM_DAA_CERTIFY_case_1
                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.9 ) )
                                case Generate_TPM_DAA_CERTIFY
                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.9 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case Generate_TPM_DAA_CERTIFY_case_2
                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.9 ) )
                                case Generate_TPM_DAA_CERTIFY
                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.9 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Diff_DAA_CERTIFY_no_verify_case_3
                            step( solve( Shuffle_Sigmas( (
                                                          <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                           bsn1, R1, S1, T1, W1, h2_host1, 
                                                           small_s1, n_C1>+
                                                          <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                           bsn2, R2, S2, T2, W2, h2_host2, 
                                                           small_s2, n_C2>
                                                         )
                                         ) ▶₀ #vr.9 ) )
                              case Generate_TPM_DAA_CERTIFY_case_1
                              by step( contradiction /* impossible chain */ )
                            next
                              case Generate_TPM_DAA_CERTIFY_case_2
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Issuer_Init
                            by step( contradiction /* impossible chain */ )
                          next
                            case Issuer_KeyReveal
                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.9 ) )
                              case Issuer_Init
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case multp
                        step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk ) )
                          case Diff_DAA_CERTIFY_no_verify
                          MIRRORED
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.1 ) )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                       ) @ #vk ) )
                            case Diff_DAA_CERTIFY_no_verify
                            MIRRORED
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~sl_1,
                                                    plus(multp(~x, multp(~r1, 'P1')),
                                                         multp(multp(multp(~r1, ~x), ~y),
                                                               multp(~f1, 'P1'))))
                                         ) @ #vk ) )
                              case Diff_DAA_CERTIFY_no_verify
                              MIRRORED
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                              case multp
                              step( solve( !KU( multp(~sl_1,
                                                      multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                           ) @ #vk ) )
                                case Diff_DAA_CERTIFY_no_verify
                                MIRRORED
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_1 ) @ #vk.1 ) )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                case H_n_2
                                step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                        H_k_2(H_k_6('CredentialData',
                                                                    multp(~sl_1, multp(~r1, 'P1')),
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))),
                                                                    multp(~sl_1,
                                                                          plus(multp(~x,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(multp(multp(~r1,
                                                                                                 ~x),
                                                                                           ~y),
                                                                                     multp(~f1,
                                                                                           'P1')))),
                                                                    multp(~sl_1,
                                                                          multp(multp(~r1, ~y),
                                                                                multp(~f1, 'P1'))),
                                                                    E_S(~r_cv1_1,
                                                                        multp(~sl_1,
                                                                              multp(~y,
                                                                                    multp(~r1,
                                                                                          'P1'))))),
                                                              H_6(certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g1,
                                                                                                     ~genP1))))))))
                                             ) @ #vk ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  MIRRORED
                                next
                                  case c_H_n_2
                                  step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                multp(~sl_1, multp(~r1, 'P1')),
                                                                multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1'))),
                                                                multp(~sl_1,
                                                                      plus(multp(~x,
                                                                                 multp(~r1, 'P1')),
                                                                           multp(multp(multp(~r1,
                                                                                             ~x),
                                                                                       ~y),
                                                                                 multp(~f1,
                                                                                       'P1')))),
                                                                multp(~sl_1,
                                                                      multp(multp(~r1, ~y),
                                                                            multp(~f1, 'P1'))),
                                                                E_S(~r_cv1_1,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1,
                                                                                      'P1'))))),
                                                          H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g1,
                                                                                                 ~genP1)))))))
                                               ) @ #vk.2 ) )
                                    case c_H_k_2
                                    step( solve( !KU( H_k_6('CredentialData',
                                                            multp(~sl_1, multp(~r1, 'P1')),
                                                            multp(~sl_1,
                                                                  multp(~y, multp(~r1, 'P1'))),
                                                            multp(~sl_1,
                                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                                       multp(multp(multp(~r1, ~x),
                                                                                   ~y),
                                                                             multp(~f1, 'P1')))),
                                                            multp(~sl_1,
                                                                  multp(multp(~r1, ~y),
                                                                        multp(~f1, 'P1'))),
                                                            E_S(~r_cv1_1,
                                                                multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))))
                                                 ) @ #vk.3 ) )
                                      case c_H_k_6
                                      step( solve( !KU( H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1))))))
                                                   ) @ #vk.4 ) )
                                        case c_H_6
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.4 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.5 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.5 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.24 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.24 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.24 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.6 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))
                                                           ) @ #vk.7 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1'))))
                                                             ) @ #vk.8 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( multp(~sl_1,
                                                                          multp(multp(~r1, ~y),
                                                                                multp(~f1, 'P1')))
                                                               ) @ #vk.9 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( E_S(~r_cv1_1,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))
                                                                 ) @ #vk.10 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      step( solve( !KU( certData('certificationData',
                                                                                 QName('SHA256',
                                                                                       H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                     multp(~g1,
                                                                                                           ~genP1)))))
                                                                   ) @ #vk.11 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_certData
                                                        step( solve( !KU( QName('SHA256',
                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                              multp(~g1,
                                                                                                    ~genP1))))
                                                                     ) @ #vk.13 ) )
                                                          case c_QName
                                                          step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g1,
                                                                                                ~genP1)))
                                                                       ) @ #vk.15 ) )
                                                            case c_H_SHA256
                                                            step( solve( !KU( 'certificationData'
                                                                         ) @ #vk.14 ) )
                                                              case coerce
                                                              step( solve( !KD( 'certificationData'
                                                                           ) ▶₀ #vk.14 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( 'SHA256'
                                                                           ) @ #vk.15 ) )
                                                                case coerce
                                                                step( solve( !KD( 'SHA256'
                                                                             ) ▶₀ #vk.15 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.51 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.51 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Issuer_KeyReveal
                                                                  step( solve( !Ltk( I, x.1, y.1
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Issuer_Init
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case pub
                                                                step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))
                                                                             ) @ #vk.16 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify
                                                                  MIRRORED
                                                                next
                                                                  case c_QPub
                                                                  step( solve( !KU( multp(~g1,
                                                                                          ~genP1)
                                                                               ) @ #vk.18 ) )
                                                                    case c_multp
                                                                    by step( solve( !KU( ~g1
                                                                                    ) @ #vk.19 ) )
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.12 ) )
                                                    qed
                                                  next
                                                    case c_multp
                                                    by step( solve( !KU( ~sl_1 ) @ #vk.12 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_1 ) @ #vk.12 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_1 ) @ #vk.12 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.12 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.12 ) )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
                                  case plus
                                  step( solve( !KU( plus(~r_cv1_1,
                                                         multp(H_n_2(Nonce(~rnd_n_C1),
                                                                     H_k_2(H_k_6('CredentialData',
                                                                                 multp(~sl_1,
                                                                                       multp(~r1,
                                                                                             'P1')),
                                                                                 multp(~sl_1,
                                                                                       multp(~y,
                                                                                             multp(~r1,
                                                                                                   'P1'))),
                                                                                 multp(~sl_1,
                                                                                       plus(multp(~x,
                                                                                                  multp(~r1,
                                                                                                        'P1')),
                                                                                            multp(multp(multp(~r1,
                                                                                                              ~x),
                                                                                                        ~y),
                                                                                                  multp(~f1,
                                                                                                        'P1')))),
                                                                                 multp(~sl_1,
                                                                                       multp(multp(~r1,
                                                                                                   ~y),
                                                                                             multp(~f1,
                                                                                                   'P1'))),
                                                                                 E_S(~r_cv1_1,
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))))),
                                                                           H_6(certData('certificationData',
                                                                                        QName('SHA256',
                                                                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                            multp(~g1,
                                                                                                                  ~genP1)))))))),
                                                               ~f1))
                                               ) @ #vk ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_plus
                                    by step( solve( !KU( ~r_cv1_1 ) @ #vk.1 ) )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
                                  case Nonce
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.1 ) )
                                  qed
                                qed
                              next
                                case pair
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.1 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.2 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.3 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.3 ) )
                                qed
                              qed
                            next
                              case pair
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.2 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.3 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.4 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.5 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.5 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.5 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.6 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.7 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.6 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.7 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.8 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.8 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.33 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.33 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.33 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.9 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))
                                                           ) @ #vk.10 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1'))))
                                                             ) @ #vk.11 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( multp(~sl_1,
                                                                          multp(multp(~r1, ~y),
                                                                                multp(~f1, 'P1')))
                                                               ) @ #vk.12 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( E_S(~r_cv1_1,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))
                                                                 ) @ #vk.13 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      step( solve( !KU( certData('certificationData',
                                                                                 QName('SHA256',
                                                                                       H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                     multp(~g1,
                                                                                                           ~genP1)))))
                                                                   ) @ #vk.14 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_certData
                                                        step( solve( !KU( QName('SHA256',
                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                              multp(~g1,
                                                                                                    ~genP1))))
                                                                     ) @ #vk.16 ) )
                                                          case c_QName
                                                          step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g1,
                                                                                                ~genP1)))
                                                                       ) @ #vk.18 ) )
                                                            case c_H_SHA256
                                                            step( solve( !KU( 'certificationData'
                                                                         ) @ #vk.17 ) )
                                                              case coerce
                                                              step( solve( !KD( 'certificationData'
                                                                           ) ▶₀ #vk.17 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( 'SHA256'
                                                                           ) @ #vk.18 ) )
                                                                case coerce
                                                                step( solve( !KD( 'SHA256'
                                                                             ) ▶₀ #vk.18 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.60 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.60 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Issuer_KeyReveal
                                                                  step( solve( !Ltk( I, x.1, y.1
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Issuer_Init
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case pub
                                                                step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))
                                                                             ) @ #vk.19 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify
                                                                  MIRRORED
                                                                next
                                                                  case c_QPub
                                                                  step( solve( !KU( multp(~g1,
                                                                                          ~genP1)
                                                                               ) @ #vk.21 ) )
                                                                    case c_multp
                                                                    by step( solve( !KU( ~g1
                                                                                    ) @ #vk.22 ) )
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.15 ) )
                                                    qed
                                                  next
                                                    case c_multp
                                                    by step( solve( !KU( ~sl_1 ) @ #vk.15 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_1 ) @ #vk.15 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_1 ) @ #vk.15 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.15 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.15 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.15 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pair
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.3 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.4 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.5 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.6 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.7 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.7 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.7 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.8 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.9 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.8 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.9 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.10 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.10 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.40 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.40 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.40 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.11 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))
                                                           ) @ #vk.12 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1'))))
                                                             ) @ #vk.13 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( E_S(~r_cv1_1,
                                                                        multp(~sl_1,
                                                                              multp(~y,
                                                                                    multp(~r1,
                                                                                          'P1'))))
                                                               ) @ #vk.14 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( certData('certificationData',
                                                                               QName('SHA256',
                                                                                     H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                   multp(~g1,
                                                                                                         ~genP1)))))
                                                                 ) @ #vk.15 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      MIRRORED
                                                    next
                                                      case c_certData
                                                      step( solve( !KU( QName('SHA256',
                                                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                                                            multp(~g1,
                                                                                                  ~genP1))))
                                                                   ) @ #vk.17 ) )
                                                        case c_QName
                                                        step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g1,
                                                                                              ~genP1)))
                                                                     ) @ #vk.19 ) )
                                                          case c_H_SHA256
                                                          step( solve( !KU( 'certificationData'
                                                                       ) @ #vk.18 ) )
                                                            case coerce
                                                            step( solve( !KD( 'certificationData'
                                                                         ) ▶₀ #vk.18 ) )
                                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Issuer_KeyReveal
                                                              step( solve( !Ltk( I, x.1, y.1
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case pub
                                                            step( solve( !KU( 'SHA256'
                                                                         ) @ #vk.19 ) )
                                                              case coerce
                                                              step( solve( !KD( 'SHA256'
                                                                           ) ▶₀ #vk.19 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.59 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.59 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                     multp(~g1,
                                                                                           ~genP1))
                                                                           ) @ #vk.20 ) )
                                                                case Diff_DAA_CERTIFY_no_verify
                                                                MIRRORED
                                                              next
                                                                case c_QPub
                                                                step( solve( !KU( multp(~g1, ~genP1)
                                                                             ) @ #vk.22 ) )
                                                                  case c_multp
                                                                  by step( solve( !KU( ~g1
                                                                                  ) @ #vk.23 ) )
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case c_E_S
                                                    by step( solve( !KU( ~r_cv1_1 ) @ #vk.16 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.16 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.16 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.7 ) )
                            qed
                          qed
                        next
                          case pair
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.4 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.5 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.6 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.7 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.8 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.9 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.9 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.9 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.10 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.11 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.10 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.11 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.12 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.12 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.46 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.46 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.46 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.13 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))
                                                           ) @ #vk.14 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))
                                                             ) @ #vk.15 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g1,
                                                                                                       ~genP1)))))
                                                               ) @ #vk.16 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    MIRRORED
                                                  next
                                                    case c_certData
                                                    step( solve( !KU( QName('SHA256',
                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g1,
                                                                                                ~genP1))))
                                                                 ) @ #vk.18 ) )
                                                      case c_QName
                                                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g1,
                                                                                            ~genP1)))
                                                                   ) @ #vk.20 ) )
                                                        case c_H_SHA256
                                                        step( solve( !KU( 'certificationData'
                                                                     ) @ #vk.19 ) )
                                                          case coerce
                                                          step( solve( !KD( 'certificationData'
                                                                       ) ▶₀ #vk.19 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( 'SHA256' ) @ #vk.20 ) )
                                                            case coerce
                                                            step( solve( !KD( 'SHA256'
                                                                         ) ▶₀ #vk.20 ) )
                                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.58 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.58 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Issuer_KeyReveal
                                                              step( solve( !Ltk( I, x.1, y.1
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case pub
                                                            step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                   multp(~g1,
                                                                                         ~genP1))
                                                                         ) @ #vk.21 ) )
                                                              case Diff_DAA_CERTIFY_no_verify
                                                              MIRRORED
                                                            next
                                                              case c_QPub
                                                              step( solve( !KU( multp(~g1, ~genP1)
                                                                           ) @ #vk.23 ) )
                                                                case c_multp
                                                                by step( solve( !KU( ~g1
                                                                                ) @ #vk.24 ) )
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case c_E_S
                                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.17 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_1 ) @ #vk.17 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.17 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.17 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.17 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.9 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.9 ) )
                          qed
                        qed
                      next
                        case pair
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.5 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.6 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.7 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.8 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.9 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.10 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.11 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.11 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.11 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.12 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.13 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.12 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.13 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.14 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.14 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.51 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.51 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.51 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.15 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( E_S(~r_cv1_1,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))))
                                                           ) @ #vk.16 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g1,
                                                                                                     ~genP1)))))
                                                             ) @ #vk.17 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  MIRRORED
                                                next
                                                  case c_certData
                                                  step( solve( !KU( QName('SHA256',
                                                                          H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g1,
                                                                                              ~genP1))))
                                                               ) @ #vk.19 ) )
                                                    case c_QName
                                                    step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                    multp(~g1,
                                                                                          ~genP1)))
                                                                 ) @ #vk.21 ) )
                                                      case c_H_SHA256
                                                      step( solve( !KU( 'certificationData'
                                                                   ) @ #vk.20 ) )
                                                        case coerce
                                                        step( solve( !KD( 'certificationData'
                                                                     ) ▶₀ #vk.20 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( 'SHA256' ) @ #vk.21 ) )
                                                          case coerce
                                                          step( solve( !KD( 'SHA256' ) ▶₀ #vk.21 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.57 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.57 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                 multp(~g1, ~genP1))
                                                                       ) @ #vk.22 ) )
                                                            case Diff_DAA_CERTIFY_no_verify
                                                            MIRRORED
                                                          next
                                                            case c_QPub
                                                            step( solve( !KU( multp(~g1, ~genP1)
                                                                         ) @ #vk.24 ) )
                                                              case c_multp
                                                              by step( solve( !KU( ~g1
                                                                              ) @ #vk.25 ) )
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_1 ) @ #vk.18 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.18 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.18 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.11 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.11 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.11 ) )
                        qed
                      qed
                    next
                      case pair
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.6 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.7 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.8 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.9 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.10 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.11 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.12 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.13 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.13 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.13 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.14 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.15 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.14 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.15 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.16 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.16 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.55 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.55 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.55 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))
                                                         ) @ #vk.17 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1)))))
                                                           ) @ #vk.18 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_certData
                                                step( solve( !KU( QName('SHA256',
                                                                        H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g1,
                                                                                            ~genP1))))
                                                             ) @ #vk.20 ) )
                                                  case c_QName
                                                  step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                  multp(~g1,
                                                                                        ~genP1)))
                                                               ) @ #vk.22 ) )
                                                    case c_H_SHA256
                                                    step( solve( !KU( 'certificationData'
                                                                 ) @ #vk.21 ) )
                                                      case coerce
                                                      step( solve( !KD( 'certificationData'
                                                                   ) ▶₀ #vk.21 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( 'SHA256' ) @ #vk.22 ) )
                                                        case coerce
                                                        step( solve( !KD( 'SHA256' ) ▶₀ #vk.22 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.56 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.56 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                               multp(~g1, ~genP1))
                                                                     ) @ #vk.23 ) )
                                                          case Diff_DAA_CERTIFY_no_verify
                                                          MIRRORED
                                                        next
                                                          case c_QPub
                                                          step( solve( !KU( multp(~g1, ~genP1)
                                                                       ) @ #vk.25 ) )
                                                            case c_multp
                                                            by step( solve( !KU( ~g1 ) @ #vk.26 ) )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_1 ) @ #vk.19 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.19 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.19 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.13 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.13 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.13 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( BSN('bottom') ) @ #vk.7 ) )
                      case c_BSN
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.8 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.9 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.10 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.11 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.12 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.13 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.14 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( 'bottom' ) @ #vk.15 ) )
                                      case coerce
                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.15 ) )
                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.63 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.63 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.63 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.63 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.63 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.63 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.63 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case Issuer_Init
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case Issuer_KeyReveal
                                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                          case Issuer_Init
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case pub
                                      MIRRORED
                                    qed
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.16 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.16 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.16 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.17 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.18 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.16 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.17 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'bottom' ) @ #vk.18 ) )
                                            case coerce
                                            step( solve( !KD( 'bottom' ) ▶₀ #vk.18 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.54 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.54 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.54 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'CredentialData' ) @ #vk.19 ) )
                                              case coerce
                                              step( solve( !KD( 'CredentialData' ) ▶₀ #vk.19 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              step( solve( !KU( E_S(~r_cv1_1,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))))
                                                           ) @ #vk.20 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g1,
                                                                                                     ~genP1)))))
                                                             ) @ #vk.21 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  MIRRORED
                                                next
                                                  case c_certData
                                                  step( solve( !KU( QName('SHA256',
                                                                          H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g1,
                                                                                              ~genP1))))
                                                               ) @ #vk.23 ) )
                                                    case c_QName
                                                    step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                    multp(~g1,
                                                                                          ~genP1)))
                                                                 ) @ #vk.25 ) )
                                                      case c_H_SHA256
                                                      step( solve( !KU( 'certificationData'
                                                                   ) @ #vk.24 ) )
                                                        case coerce
                                                        step( solve( !KD( 'certificationData'
                                                                     ) ▶₀ #vk.24 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( 'SHA256' ) @ #vk.25 ) )
                                                          case coerce
                                                          step( solve( !KD( 'SHA256' ) ▶₀ #vk.25 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.55 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.55 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.55 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                 multp(~g1, ~genP1))
                                                                       ) @ #vk.26 ) )
                                                            case Diff_DAA_CERTIFY_no_verify
                                                            MIRRORED
                                                          next
                                                            case c_QPub
                                                            step( solve( !KU( multp(~g1, ~genP1)
                                                                         ) @ #vk.28 ) )
                                                              case c_multp
                                                              by step( solve( !KU( ~g1
                                                                              ) @ #vk.29 ) )
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_1 ) @ #vk.22 ) )
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.22 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.22 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g1, ~genP1)))))
                               ) @ #vk.8 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN('bottom') ) @ #vk.9 ) )
                      case c_BSN
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.10 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.11 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.12 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.13 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.14 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.15 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.16 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( 'bottom' ) @ #vk.17 ) )
                                      case coerce
                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.17 ) )
                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.65 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.65 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.65 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.65 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.65 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.65 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.65 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.65 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.65 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case Issuer_Init
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case Issuer_KeyReveal
                                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.65 ) )
                                          case Issuer_Init
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case pub
                                      MIRRORED
                                    qed
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.18 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.18 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.18 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.19 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.20 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.18 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.19 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'bottom' ) @ #vk.20 ) )
                                            case coerce
                                            step( solve( !KD( 'bottom' ) ▶₀ #vk.20 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.56 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.56 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.56 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.56 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'CredentialData' ) @ #vk.21 ) )
                                              case coerce
                                              step( solve( !KD( 'CredentialData' ) ▶₀ #vk.21 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.56 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.56 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.56 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              step( solve( !KU( E_S(~r_cv1_1,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))))
                                                           ) @ #vk.22 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_1 ) @ #vk.23 ) )
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.23 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.23 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                      qed
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g1, ~genP1))))
                                 ) @ #vk.18 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g1, ~genP1)))
                                   ) @ #vk.20 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN('bottom') ) @ #vk.11 ) )
                          case c_BSN
                          step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.12 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                         ) @ #vk.13 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_1,
                                                      plus(multp(~x, multp(~r1, 'P1')),
                                                           multp(multp(multp(~r1, ~x), ~y),
                                                                 multp(~f1, 'P1'))))
                                           ) @ #vk.14 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_1,
                                                        multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                             ) @ #vk.15 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_1,
                                                                            multp(~r1, 'P1')),
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))),
                                                                      multp(~sl_1,
                                                                            plus(multp(~x,
                                                                                       multp(~r1,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r1,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f1,
                                                                                             'P1')))),
                                                                      multp(~sl_1,
                                                                            multp(multp(~r1, ~y),
                                                                                  multp(~f1,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_1,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g1,
                                                                                                       ~genP1))))))))
                                               ) @ #vk.16 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_1,
                                                           multp(H_n_2(Nonce(~rnd_n_C1),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_1,
                                                                                         multp(~r1,
                                                                                               'P1')),
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))),
                                                                                   multp(~sl_1,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r1,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r1,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f1,
                                                                                                          'P1')))),
                                                                                   multp(~sl_1,
                                                                                         multp(multp(~r1,
                                                                                                     ~y),
                                                                                               multp(~f1,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_1,
                                                                                       multp(~sl_1,
                                                                                             multp(~y,
                                                                                                   multp(~r1,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g1,
                                                                                                                    ~genP1)))))))),
                                                                 ~f1))
                                                 ) @ #vk.17 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.18 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.19 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.19 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.62 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.62 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.62 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.62 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.20 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.20 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.62 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.62 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.62 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                   multp(~g1, ~genP1))
                                                         ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'bottom' ) @ #vk.22 ) )
                                                case coerce
                                                step( solve( !KD( 'bottom' ) ▶₀ #vk.22 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.64 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.64 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.64 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.64 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.64 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.64 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.64 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.64 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.64 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.64 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                MIRRORED
                                              qed
                                            next
                                              case c_QPub
                                              step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.24 ) )
                                                case c_multp
                                                by step( solve( !KU( ~g1 ) @ #vk.25 ) )
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C1 ) @ #vk.23 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.23 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1)))))))
                                                 ) @ #vk.23 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1')))))
                                                   ) @ #vk.24 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g1,
                                                                                                 ~genP1))))))
                                                     ) @ #vk.25 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_1,
                                                                 multp(H_n_2(Nonce(~rnd_n_C1),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_1,
                                                                                               multp(~r1,
                                                                                                     'P1')),
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))),
                                                                                         multp(~sl_1,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r1,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r1,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f1,
                                                                                                                'P1')))),
                                                                                         multp(~sl_1,
                                                                                               multp(multp(~r1,
                                                                                                           ~y),
                                                                                                     multp(~f1,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_1,
                                                                                             multp(~sl_1,
                                                                                                   multp(~y,
                                                                                                         multp(~r1,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g1,
                                                                                                                          ~genP1)))))))),
                                                                       ~f1))
                                                       ) @ #vk.20 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.22 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.22 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.53 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.53 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.53 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.53 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.23 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.23 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.53 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.53 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.53 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                         multp(~g1, ~genP1))
                                                               ) @ #vk.24 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( 'bottom' ) @ #vk.25 ) )
                                                      case coerce
                                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.25 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.55 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.55 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.55 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.55 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( 'CredentialData'
                                                                   ) @ #vk.26 ) )
                                                        case coerce
                                                        step( solve( !KD( 'CredentialData'
                                                                     ) ▶₀ #vk.26 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( E_S(~r_cv1_1,
                                                                              multp(~sl_1,
                                                                                    multp(~y,
                                                                                          multp(~r1,
                                                                                                'P1'))))
                                                                     ) @ #vk.27 ) )
                                                          case Diff_DAA_CERTIFY_no_verify
                                                          MIRRORED
                                                        next
                                                          case c_E_S
                                                          by step( solve( !KU( ~r_cv1_1
                                                                          ) @ #vk.28 ) )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case c_QPub
                                                    step( solve( !KU( multp(~g1, ~genP1)
                                                                 ) @ #vk.29 ) )
                                                      case c_multp
                                                      by step( solve( !KU( ~g1 ) @ #vk.30 ) )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C1 ) @ #vk.28 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_1 ) @ #vk.28 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_1 ) @ #vk.23 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_1 ) @ #vk.23 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.23 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.23 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( QPub('Generic_DAA_public_data',
                                       multp(~g1, ~genP1))
                             ) @ #vk.9 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g1, ~genP1)))))
                               ) @ #vk.10 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN('bottom') ) @ #vk.11 ) )
                      case c_BSN
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.12 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.13 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.14 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.15 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.16 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.17 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.18 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( 'bottom' ) @ #vk.19 ) )
                                      case coerce
                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.19 ) )
                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case Issuer_Init
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case Issuer_KeyReveal
                                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.66 ) )
                                          case Issuer_Init
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case pub
                                      MIRRORED
                                    qed
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.20 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.20 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.20 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.21 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.22 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.20 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.21 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'bottom' ) @ #vk.22 ) )
                                            case coerce
                                            step( solve( !KD( 'bottom' ) ▶₀ #vk.22 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'CredentialData' ) @ #vk.23 ) )
                                              case coerce
                                              step( solve( !KD( 'CredentialData' ) ▶₀ #vk.23 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              step( solve( !KU( E_S(~r_cv1_1,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))))
                                                           ) @ #vk.24 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_1 ) @ #vk.25 ) )
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.25 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.25 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.20 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.20 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.20 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.20 ) )
                      qed
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g1, ~genP1))))
                                 ) @ #vk.20 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g1, ~genP1)))
                                   ) @ #vk.22 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN('bottom') ) @ #vk.13 ) )
                          case c_BSN
                          step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.14 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                         ) @ #vk.15 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_1,
                                                      plus(multp(~x, multp(~r1, 'P1')),
                                                           multp(multp(multp(~r1, ~x), ~y),
                                                                 multp(~f1, 'P1'))))
                                           ) @ #vk.16 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_1,
                                                        multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                             ) @ #vk.17 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_1,
                                                                            multp(~r1, 'P1')),
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))),
                                                                      multp(~sl_1,
                                                                            plus(multp(~x,
                                                                                       multp(~r1,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r1,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f1,
                                                                                             'P1')))),
                                                                      multp(~sl_1,
                                                                            multp(multp(~r1, ~y),
                                                                                  multp(~f1,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_1,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g1,
                                                                                                       ~genP1))))))))
                                               ) @ #vk.18 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_1,
                                                           multp(H_n_2(Nonce(~rnd_n_C1),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_1,
                                                                                         multp(~r1,
                                                                                               'P1')),
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))),
                                                                                   multp(~sl_1,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r1,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r1,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f1,
                                                                                                          'P1')))),
                                                                                   multp(~sl_1,
                                                                                         multp(multp(~r1,
                                                                                                     ~y),
                                                                                               multp(~f1,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_1,
                                                                                       multp(~sl_1,
                                                                                             multp(~y,
                                                                                                   multp(~r1,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g1,
                                                                                                                    ~genP1)))))))),
                                                                 ~f1))
                                                 ) @ #vk.19 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.20 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.21 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.21 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.22 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.22 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'bottom' ) @ #vk.23 ) )
                                              case coerce
                                              step( solve( !KD( 'bottom' ) ▶₀ #vk.23 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.63 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.63 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              MIRRORED
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C1 ) @ #vk.24 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.24 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1)))))))
                                                 ) @ #vk.24 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1')))))
                                                   ) @ #vk.25 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g1,
                                                                                                 ~genP1))))))
                                                     ) @ #vk.26 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_1,
                                                                 multp(H_n_2(Nonce(~rnd_n_C1),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_1,
                                                                                               multp(~r1,
                                                                                                     'P1')),
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))),
                                                                                         multp(~sl_1,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r1,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r1,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f1,
                                                                                                                'P1')))),
                                                                                         multp(~sl_1,
                                                                                               multp(multp(~r1,
                                                                                                           ~y),
                                                                                                     multp(~f1,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_1,
                                                                                             multp(~sl_1,
                                                                                                   multp(~y,
                                                                                                         multp(~r1,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g1,
                                                                                                                          ~genP1)))))))),
                                                                       ~f1))
                                                       ) @ #vk.22 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.23 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.24 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.24 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.25 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.25 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( 'bottom' ) @ #vk.26 ) )
                                                    case coerce
                                                    step( solve( !KD( 'bottom' ) ▶₀ #vk.26 ) )
                                                      case Diff_DAA_CERTIFY_no_verify_case_1
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_2
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_3
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Issuer_KeyReveal
                                                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case pub
                                                    step( solve( !KU( 'CredentialData'
                                                                 ) @ #vk.27 ) )
                                                      case coerce
                                                      step( solve( !KD( 'CredentialData'
                                                                   ) ▶₀ #vk.27 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.54 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.54 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( E_S(~r_cv1_1,
                                                                            multp(~sl_1,
                                                                                  multp(~y,
                                                                                        multp(~r1,
                                                                                              'P1'))))
                                                                   ) @ #vk.28 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_E_S
                                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.29 ) )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C1 ) @ #vk.29 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_1 ) @ #vk.29 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_1 ) @ #vk.24 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_1 ) @ #vk.24 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.24 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.24 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_QPub
                  step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.20 ) )
                    case c_multp
                    by step( solve( !KU( ~g1 ) @ #vk.21 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( E_S(~r_cv1_1,
                                    multp(~sl_1, multp(~y, multp(~r1, 'P1'))))
                           ) @ #vk.10 ) )
                case Diff_DAA_CERTIFY_no_verify
                step( solve( !KU( QPub('Generic_DAA_public_data',
                                       multp(~g1, ~genP1))
                             ) @ #vk.11 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g1, ~genP1)))))
                               ) @ #vk.12 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN('bottom') ) @ #vk.13 ) )
                      case c_BSN
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.14 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.15 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.16 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.17 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.18 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.19 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.20 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( 'bottom' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.21 ) )
                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case Issuer_Init
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case Issuer_KeyReveal
                                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.66 ) )
                                          case Issuer_Init
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case pub
                                      MIRRORED
                                    qed
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.22 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.22 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.22 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.23 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.24 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.22 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.23 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'bottom' ) @ #vk.24 ) )
                                            case coerce
                                            step( solve( !KD( 'bottom' ) ▶₀ #vk.24 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'CredentialData' ) @ #vk.25 ) )
                                              case coerce
                                              step( solve( !KD( 'CredentialData' ) ▶₀ #vk.25 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              MIRRORED
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.26 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.26 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.22 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.22 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.22 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.22 ) )
                      qed
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g1, ~genP1))))
                                 ) @ #vk.22 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g1, ~genP1)))
                                   ) @ #vk.24 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN('bottom') ) @ #vk.15 ) )
                          case c_BSN
                          step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.16 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                         ) @ #vk.17 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_1,
                                                      plus(multp(~x, multp(~r1, 'P1')),
                                                           multp(multp(multp(~r1, ~x), ~y),
                                                                 multp(~f1, 'P1'))))
                                           ) @ #vk.18 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_1,
                                                        multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                             ) @ #vk.19 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_1,
                                                                            multp(~r1, 'P1')),
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))),
                                                                      multp(~sl_1,
                                                                            plus(multp(~x,
                                                                                       multp(~r1,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r1,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f1,
                                                                                             'P1')))),
                                                                      multp(~sl_1,
                                                                            multp(multp(~r1, ~y),
                                                                                  multp(~f1,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_1,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g1,
                                                                                                       ~genP1))))))))
                                               ) @ #vk.20 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_1,
                                                           multp(H_n_2(Nonce(~rnd_n_C1),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_1,
                                                                                         multp(~r1,
                                                                                               'P1')),
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))),
                                                                                   multp(~sl_1,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r1,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r1,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f1,
                                                                                                          'P1')))),
                                                                                   multp(~sl_1,
                                                                                         multp(multp(~r1,
                                                                                                     ~y),
                                                                                               multp(~f1,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_1,
                                                                                       multp(~sl_1,
                                                                                             multp(~y,
                                                                                                   multp(~r1,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g1,
                                                                                                                    ~genP1)))))))),
                                                                 ~f1))
                                                 ) @ #vk.21 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.22 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.23 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.23 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.24 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.24 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'bottom' ) @ #vk.25 ) )
                                              case coerce
                                              step( solve( !KD( 'bottom' ) ▶₀ #vk.25 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.63 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.63 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              MIRRORED
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C1 ) @ #vk.26 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.26 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1)))))))
                                                 ) @ #vk.26 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1')))))
                                                   ) @ #vk.27 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g1,
                                                                                                 ~genP1))))))
                                                     ) @ #vk.28 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_1,
                                                                 multp(H_n_2(Nonce(~rnd_n_C1),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_1,
                                                                                               multp(~r1,
                                                                                                     'P1')),
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))),
                                                                                         multp(~sl_1,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r1,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r1,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f1,
                                                                                                                'P1')))),
                                                                                         multp(~sl_1,
                                                                                               multp(multp(~r1,
                                                                                                           ~y),
                                                                                                     multp(~f1,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_1,
                                                                                             multp(~sl_1,
                                                                                                   multp(~y,
                                                                                                         multp(~r1,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g1,
                                                                                                                          ~genP1)))))))),
                                                                       ~f1))
                                                       ) @ #vk.24 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.25 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.26 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.26 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.27 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.27 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( 'bottom' ) @ #vk.28 ) )
                                                    case coerce
                                                    step( solve( !KD( 'bottom' ) ▶₀ #vk.28 ) )
                                                      case Diff_DAA_CERTIFY_no_verify_case_1
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_2
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_3
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Issuer_KeyReveal
                                                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case pub
                                                    step( solve( !KU( 'CredentialData'
                                                                 ) @ #vk.29 ) )
                                                      case coerce
                                                      step( solve( !KD( 'CredentialData'
                                                                   ) ▶₀ #vk.29 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.54 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.54 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      MIRRORED
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C1 ) @ #vk.30 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_1 ) @ #vk.30 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_1 ) @ #vk.26 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_1 ) @ #vk.26 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.26 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.26 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_QPub
                  step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.22 ) )
                    case c_multp
                    by step( solve( !KU( ~g1 ) @ #vk.23 ) )
                  qed
                qed
              next
                case c_E_S
                by step( solve( !KU( ~r_cv1_1 ) @ #vk.21 ) )
              qed
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case E_S
                step( solve( !KU( E_S(~r_cv1_1,
                                      multp(~sl_2, multp(~y, multp(~r2, 'P1'))))
                             ) @ #vk ) )
                  case Diff_DAA_CERTIFY_no_verify
                  MIRRORED
                next
                  case c_E_S
                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case QPub
                  step( solve( !KU( QPub('Generic_DAA_public_data',
                                         multp(~g2, ~genP2))
                               ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_QPub
                    step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.2 ) )
                      case c_multp
                      by step( solve( !KU( ~g2 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case certData
                    step( solve( !KU( certData('certificationData',
                                               QName('SHA256',
                                                     H_SHA256(QPub('Generic_DAA_public_data',
                                                                   multp(~g2, ~genP2)))))
                                 ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_certData
                      step( solve( !KU( QName('SHA256',
                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                            multp(~g2, ~genP2))))
                                   ) @ #vk.2 ) )
                        case c_QName
                        step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                        multp(~g2, ~genP2)))
                                     ) @ #vk.4 ) )
                          case c_H_SHA256
                          step( solve( !KU( 'certificationData' ) @ #vk.3 ) )
                            case coerce
                            step( solve( !KD( 'certificationData' ) ▶₀ #vk.3 ) )
                              case Diff_DAA_CERTIFY_no_verify_case_1
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case Diff_DAA_CERTIFY_no_verify_case_2
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Diff_DAA_CERTIFY_no_verify_case_3
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                by step( contradiction /* impossible chain */ )
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Issuer_Init
                              by step( contradiction /* impossible chain */ )
                            next
                              case Issuer_KeyReveal
                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                                case Issuer_Init
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( 'SHA256' ) @ #vk.4 ) )
                              case coerce
                              step( solve( !KD( 'SHA256' ) ▶₀ #vk.4 ) )
                                case Diff_DAA_CERTIFY_no_verify_case_1
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case Diff_DAA_CERTIFY_no_verify_case_2
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                      case Generate_TPM_DAA_CERTIFY
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                      case Generate_TPM_DAA_CERTIFY
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Diff_DAA_CERTIFY_no_verify_case_3
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Issuer_Init
                                by step( contradiction /* impossible chain */ )
                              next
                                case Issuer_KeyReveal
                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                                  case Issuer_Init
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( QPub('Generic_DAA_public_data',
                                                     multp(~g2, ~genP2))
                                           ) @ #vk.5 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                MIRRORED
                              next
                                case c_QPub
                                step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.7 ) )
                                  case c_multp
                                  by step( solve( !KU( ~g2 ) @ #vk.8 ) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case BSN
                      step( solve( !KU( BSN(~basename2) ) @ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify
                        MIRRORED
                      next
                        case c_BSN
                        by step( solve( !KU( ~basename2 ) @ #vk.1 ) )
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case multp
                        step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk ) )
                          case Diff_DAA_CERTIFY_no_verify
                          MIRRORED
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.1 ) )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                       ) @ #vk ) )
                            case Diff_DAA_CERTIFY_no_verify
                            MIRRORED
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~sl_2,
                                                    plus(multp(~x, multp(~r2, 'P1')),
                                                         multp(multp(multp(~r2, ~x), ~y),
                                                               multp(~f2, 'P1'))))
                                         ) @ #vk ) )
                              case Diff_DAA_CERTIFY_no_verify
                              MIRRORED
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                              case multp
                              step( solve( !KU( multp(~sl_2,
                                                      multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                           ) @ #vk ) )
                                case Diff_DAA_CERTIFY_no_verify
                                MIRRORED
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_2 ) @ #vk.1 ) )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                case H_n_2
                                step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                        H_k_2(H_k_6('CredentialData',
                                                                    multp(~sl_2, multp(~r2, 'P1')),
                                                                    multp(~sl_2,
                                                                          multp(~y,
                                                                                multp(~r2, 'P1'))),
                                                                    multp(~sl_2,
                                                                          plus(multp(~x,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(multp(multp(~r2,
                                                                                                 ~x),
                                                                                           ~y),
                                                                                     multp(~f2,
                                                                                           'P1')))),
                                                                    multp(~sl_2,
                                                                          multp(multp(~r2, ~y),
                                                                                multp(~f2, 'P1'))),
                                                                    E_S(~r_cv1_1,
                                                                        multp(~sl_2,
                                                                              multp(~y,
                                                                                    multp(~r2,
                                                                                          'P1'))))),
                                                              H_6(certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g2,
                                                                                                     ~genP2))))))))
                                             ) @ #vk ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  MIRRORED
                                next
                                  case c_H_n_2
                                  step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                multp(~sl_2, multp(~r2, 'P1')),
                                                                multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1'))),
                                                                multp(~sl_2,
                                                                      plus(multp(~x,
                                                                                 multp(~r2, 'P1')),
                                                                           multp(multp(multp(~r2,
                                                                                             ~x),
                                                                                       ~y),
                                                                                 multp(~f2,
                                                                                       'P1')))),
                                                                multp(~sl_2,
                                                                      multp(multp(~r2, ~y),
                                                                            multp(~f2, 'P1'))),
                                                                E_S(~r_cv1_1,
                                                                    multp(~sl_2,
                                                                          multp(~y,
                                                                                multp(~r2,
                                                                                      'P1'))))),
                                                          H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g2,
                                                                                                 ~genP2)))))))
                                               ) @ #vk.2 ) )
                                    case c_H_k_2
                                    step( solve( !KU( H_k_6('CredentialData',
                                                            multp(~sl_2, multp(~r2, 'P1')),
                                                            multp(~sl_2,
                                                                  multp(~y, multp(~r2, 'P1'))),
                                                            multp(~sl_2,
                                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                                       multp(multp(multp(~r2, ~x),
                                                                                   ~y),
                                                                             multp(~f2, 'P1')))),
                                                            multp(~sl_2,
                                                                  multp(multp(~r2, ~y),
                                                                        multp(~f2, 'P1'))),
                                                            E_S(~r_cv1_1,
                                                                multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))))
                                                 ) @ #vk.3 ) )
                                      case c_H_k_6
                                      step( solve( !KU( H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2))))))
                                                   ) @ #vk.4 ) )
                                        case c_H_6
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.4 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.5 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.5 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.24 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.24 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.24 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.6 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))
                                                           ) @ #vk.7 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1'))))
                                                             ) @ #vk.8 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( multp(~sl_2,
                                                                          multp(multp(~r2, ~y),
                                                                                multp(~f2, 'P1')))
                                                               ) @ #vk.9 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( E_S(~r_cv1_1,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))
                                                                 ) @ #vk.10 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      step( solve( !KU( certData('certificationData',
                                                                                 QName('SHA256',
                                                                                       H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                     multp(~g2,
                                                                                                           ~genP2)))))
                                                                   ) @ #vk.11 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_certData
                                                        step( solve( !KU( QName('SHA256',
                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                              multp(~g2,
                                                                                                    ~genP2))))
                                                                     ) @ #vk.13 ) )
                                                          case c_QName
                                                          step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g2,
                                                                                                ~genP2)))
                                                                       ) @ #vk.15 ) )
                                                            case c_H_SHA256
                                                            step( solve( !KU( 'certificationData'
                                                                         ) @ #vk.14 ) )
                                                              case coerce
                                                              step( solve( !KD( 'certificationData'
                                                                           ) ▶₀ #vk.14 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( 'SHA256'
                                                                           ) @ #vk.15 ) )
                                                                case coerce
                                                                step( solve( !KD( 'SHA256'
                                                                             ) ▶₀ #vk.15 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.51 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.51 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Issuer_KeyReveal
                                                                  step( solve( !Ltk( I, x.1, y.1
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Issuer_Init
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case pub
                                                                step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))
                                                                             ) @ #vk.16 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify
                                                                  MIRRORED
                                                                next
                                                                  case c_QPub
                                                                  step( solve( !KU( multp(~g2,
                                                                                          ~genP2)
                                                                               ) @ #vk.18 ) )
                                                                    case c_multp
                                                                    by step( solve( !KU( ~g2
                                                                                    ) @ #vk.19 ) )
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.12 ) )
                                                    qed
                                                  next
                                                    case c_multp
                                                    by step( solve( !KU( ~sl_2 ) @ #vk.12 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_2 ) @ #vk.12 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_2 ) @ #vk.12 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.12 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.12 ) )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
                                  case plus
                                  step( solve( !KU( plus(~r_cv1_1,
                                                         multp(H_n_2(Nonce(~rnd_n_C2),
                                                                     H_k_2(H_k_6('CredentialData',
                                                                                 multp(~sl_2,
                                                                                       multp(~r2,
                                                                                             'P1')),
                                                                                 multp(~sl_2,
                                                                                       multp(~y,
                                                                                             multp(~r2,
                                                                                                   'P1'))),
                                                                                 multp(~sl_2,
                                                                                       plus(multp(~x,
                                                                                                  multp(~r2,
                                                                                                        'P1')),
                                                                                            multp(multp(multp(~r2,
                                                                                                              ~x),
                                                                                                        ~y),
                                                                                                  multp(~f2,
                                                                                                        'P1')))),
                                                                                 multp(~sl_2,
                                                                                       multp(multp(~r2,
                                                                                                   ~y),
                                                                                             multp(~f2,
                                                                                                   'P1'))),
                                                                                 E_S(~r_cv1_1,
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))))),
                                                                           H_6(certData('certificationData',
                                                                                        QName('SHA256',
                                                                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                            multp(~g2,
                                                                                                                  ~genP2)))))))),
                                                               ~f2))
                                               ) @ #vk ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_plus
                                    by step( solve( !KU( ~r_cv1_1 ) @ #vk.1 ) )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
                                  case Nonce
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.1 ) )
                                  qed
                                qed
                              next
                                case pair
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.1 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.2 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.3 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.3 ) )
                                qed
                              qed
                            next
                              case pair
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.2 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.3 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.4 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.5 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.5 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.5 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.6 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.7 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.6 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.7 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.8 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.8 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.33 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.33 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.33 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.9 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))
                                                           ) @ #vk.10 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1'))))
                                                             ) @ #vk.11 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( multp(~sl_2,
                                                                          multp(multp(~r2, ~y),
                                                                                multp(~f2, 'P1')))
                                                               ) @ #vk.12 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( E_S(~r_cv1_1,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))
                                                                 ) @ #vk.13 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      step( solve( !KU( certData('certificationData',
                                                                                 QName('SHA256',
                                                                                       H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                     multp(~g2,
                                                                                                           ~genP2)))))
                                                                   ) @ #vk.14 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_certData
                                                        step( solve( !KU( QName('SHA256',
                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                              multp(~g2,
                                                                                                    ~genP2))))
                                                                     ) @ #vk.16 ) )
                                                          case c_QName
                                                          step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g2,
                                                                                                ~genP2)))
                                                                       ) @ #vk.18 ) )
                                                            case c_H_SHA256
                                                            step( solve( !KU( 'certificationData'
                                                                         ) @ #vk.17 ) )
                                                              case coerce
                                                              step( solve( !KD( 'certificationData'
                                                                           ) ▶₀ #vk.17 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( 'SHA256'
                                                                           ) @ #vk.18 ) )
                                                                case coerce
                                                                step( solve( !KD( 'SHA256'
                                                                             ) ▶₀ #vk.18 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.60 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.60 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Issuer_KeyReveal
                                                                  step( solve( !Ltk( I, x.1, y.1
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Issuer_Init
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case pub
                                                                step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))
                                                                             ) @ #vk.19 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify
                                                                  MIRRORED
                                                                next
                                                                  case c_QPub
                                                                  step( solve( !KU( multp(~g2,
                                                                                          ~genP2)
                                                                               ) @ #vk.21 ) )
                                                                    case c_multp
                                                                    by step( solve( !KU( ~g2
                                                                                    ) @ #vk.22 ) )
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.15 ) )
                                                    qed
                                                  next
                                                    case c_multp
                                                    by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.15 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.15 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pair
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.3 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.4 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.5 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.6 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.7 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.7 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.7 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.8 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.9 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.8 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.9 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.10 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.10 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.40 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.40 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.40 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.11 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))
                                                           ) @ #vk.12 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1'))))
                                                             ) @ #vk.13 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( E_S(~r_cv1_1,
                                                                        multp(~sl_2,
                                                                              multp(~y,
                                                                                    multp(~r2,
                                                                                          'P1'))))
                                                               ) @ #vk.14 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( certData('certificationData',
                                                                               QName('SHA256',
                                                                                     H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                   multp(~g2,
                                                                                                         ~genP2)))))
                                                                 ) @ #vk.15 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      MIRRORED
                                                    next
                                                      case c_certData
                                                      step( solve( !KU( QName('SHA256',
                                                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                                                            multp(~g2,
                                                                                                  ~genP2))))
                                                                   ) @ #vk.17 ) )
                                                        case c_QName
                                                        step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g2,
                                                                                              ~genP2)))
                                                                     ) @ #vk.19 ) )
                                                          case c_H_SHA256
                                                          step( solve( !KU( 'certificationData'
                                                                       ) @ #vk.18 ) )
                                                            case coerce
                                                            step( solve( !KD( 'certificationData'
                                                                         ) ▶₀ #vk.18 ) )
                                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Issuer_KeyReveal
                                                              step( solve( !Ltk( I, x.1, y.1
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case pub
                                                            step( solve( !KU( 'SHA256'
                                                                         ) @ #vk.19 ) )
                                                              case coerce
                                                              step( solve( !KD( 'SHA256'
                                                                           ) ▶₀ #vk.19 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.59 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.59 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                     multp(~g2,
                                                                                           ~genP2))
                                                                           ) @ #vk.20 ) )
                                                                case Diff_DAA_CERTIFY_no_verify
                                                                MIRRORED
                                                              next
                                                                case c_QPub
                                                                step( solve( !KU( multp(~g2, ~genP2)
                                                                             ) @ #vk.22 ) )
                                                                  case c_multp
                                                                  by step( solve( !KU( ~g2
                                                                                  ) @ #vk.23 ) )
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case c_E_S
                                                    by step( solve( !KU( ~r_cv1_1 ) @ #vk.16 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_2 ) @ #vk.16 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_2 ) @ #vk.16 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.16 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.16 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.16 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.7 ) )
                            qed
                          qed
                        next
                          case pair
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.4 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.5 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.6 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.7 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.8 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.9 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.9 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.9 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.10 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.11 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.10 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.11 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.12 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.12 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.46 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.46 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.46 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.13 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))
                                                           ) @ #vk.14 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))
                                                             ) @ #vk.15 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g2,
                                                                                                       ~genP2)))))
                                                               ) @ #vk.16 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    MIRRORED
                                                  next
                                                    case c_certData
                                                    step( solve( !KU( QName('SHA256',
                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g2,
                                                                                                ~genP2))))
                                                                 ) @ #vk.18 ) )
                                                      case c_QName
                                                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g2,
                                                                                            ~genP2)))
                                                                   ) @ #vk.20 ) )
                                                        case c_H_SHA256
                                                        step( solve( !KU( 'certificationData'
                                                                     ) @ #vk.19 ) )
                                                          case coerce
                                                          step( solve( !KD( 'certificationData'
                                                                       ) ▶₀ #vk.19 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( 'SHA256' ) @ #vk.20 ) )
                                                            case coerce
                                                            step( solve( !KD( 'SHA256'
                                                                         ) ▶₀ #vk.20 ) )
                                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.58 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.58 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Issuer_KeyReveal
                                                              step( solve( !Ltk( I, x.1, y.1
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case pub
                                                            step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                   multp(~g2,
                                                                                         ~genP2))
                                                                         ) @ #vk.21 ) )
                                                              case Diff_DAA_CERTIFY_no_verify
                                                              MIRRORED
                                                            next
                                                              case c_QPub
                                                              step( solve( !KU( multp(~g2, ~genP2)
                                                                           ) @ #vk.23 ) )
                                                                case c_multp
                                                                by step( solve( !KU( ~g2
                                                                                ) @ #vk.24 ) )
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case c_E_S
                                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.17 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.17 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.17 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.9 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.9 ) )
                          qed
                        qed
                      next
                        case pair
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.5 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.6 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.7 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.8 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.9 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.10 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.11 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.11 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.11 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.12 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.13 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.12 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.13 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.14 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.14 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.51 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.51 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.51 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.15 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( E_S(~r_cv1_1,
                                                                    multp(~sl_2,
                                                                          multp(~y,
                                                                                multp(~r2, 'P1'))))
                                                           ) @ #vk.16 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g2,
                                                                                                     ~genP2)))))
                                                             ) @ #vk.17 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  MIRRORED
                                                next
                                                  case c_certData
                                                  step( solve( !KU( QName('SHA256',
                                                                          H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g2,
                                                                                              ~genP2))))
                                                               ) @ #vk.19 ) )
                                                    case c_QName
                                                    step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                    multp(~g2,
                                                                                          ~genP2)))
                                                                 ) @ #vk.21 ) )
                                                      case c_H_SHA256
                                                      step( solve( !KU( 'certificationData'
                                                                   ) @ #vk.20 ) )
                                                        case coerce
                                                        step( solve( !KD( 'certificationData'
                                                                     ) ▶₀ #vk.20 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( 'SHA256' ) @ #vk.21 ) )
                                                          case coerce
                                                          step( solve( !KD( 'SHA256' ) ▶₀ #vk.21 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.57 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.57 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                 multp(~g2, ~genP2))
                                                                       ) @ #vk.22 ) )
                                                            case Diff_DAA_CERTIFY_no_verify
                                                            MIRRORED
                                                          next
                                                            case c_QPub
                                                            step( solve( !KU( multp(~g2, ~genP2)
                                                                         ) @ #vk.24 ) )
                                                              case c_multp
                                                              by step( solve( !KU( ~g2
                                                                              ) @ #vk.25 ) )
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_1 ) @ #vk.18 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.18 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.18 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.18 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.11 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.11 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.11 ) )
                        qed
                      qed
                    next
                      case pair
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.6 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.7 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.8 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.9 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.10 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.11 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.12 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.13 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.13 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.13 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.14 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.15 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.14 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.15 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.16 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.16 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.55 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.55 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.55 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))
                                                         ) @ #vk.17 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))
                                                           ) @ #vk.18 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_certData
                                                step( solve( !KU( QName('SHA256',
                                                                        H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g2,
                                                                                            ~genP2))))
                                                             ) @ #vk.20 ) )
                                                  case c_QName
                                                  step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                  multp(~g2,
                                                                                        ~genP2)))
                                                               ) @ #vk.22 ) )
                                                    case c_H_SHA256
                                                    step( solve( !KU( 'certificationData'
                                                                 ) @ #vk.21 ) )
                                                      case coerce
                                                      step( solve( !KD( 'certificationData'
                                                                   ) ▶₀ #vk.21 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( 'SHA256' ) @ #vk.22 ) )
                                                        case coerce
                                                        step( solve( !KD( 'SHA256' ) ▶₀ #vk.22 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.56 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.56 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                               multp(~g2, ~genP2))
                                                                     ) @ #vk.23 ) )
                                                          case Diff_DAA_CERTIFY_no_verify
                                                          MIRRORED
                                                        next
                                                          case c_QPub
                                                          step( solve( !KU( multp(~g2, ~genP2)
                                                                       ) @ #vk.25 ) )
                                                            case c_multp
                                                            by step( solve( !KU( ~g2 ) @ #vk.26 ) )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_1 ) @ #vk.19 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.19 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.19 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.13 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.13 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.13 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( BSN(~basename2) ) @ #vk.7 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.8 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.9 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.10 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.11 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.12 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.13 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.14 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.15 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.15 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.15 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.16 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.17 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.16 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.17 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.18 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.18 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.58 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.58 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.58 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.58 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.58 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.58 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.58 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))
                                                         ) @ #vk.19 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))
                                                           ) @ #vk.20 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_certData
                                                step( solve( !KU( QName('SHA256',
                                                                        H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g2,
                                                                                            ~genP2))))
                                                             ) @ #vk.22 ) )
                                                  case c_QName
                                                  step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                  multp(~g2,
                                                                                        ~genP2)))
                                                               ) @ #vk.24 ) )
                                                    case c_H_SHA256
                                                    step( solve( !KU( 'certificationData'
                                                                 ) @ #vk.23 ) )
                                                      case coerce
                                                      step( solve( !KD( 'certificationData'
                                                                   ) ▶₀ #vk.23 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( 'SHA256' ) @ #vk.24 ) )
                                                        case coerce
                                                        step( solve( !KD( 'SHA256' ) ▶₀ #vk.24 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.59 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                               multp(~g2, ~genP2))
                                                                     ) @ #vk.25 ) )
                                                          case Diff_DAA_CERTIFY_no_verify
                                                          MIRRORED
                                                        next
                                                          case c_QPub
                                                          step( solve( !KU( multp(~g2, ~genP2)
                                                                       ) @ #vk.27 ) )
                                                            case c_multp
                                                            by step( solve( !KU( ~g2 ) @ #vk.28 ) )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_1 ) @ #vk.21 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.21 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.21 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                      qed
                    next
                      case c_BSN
                      by step( solve( !KU( ~basename2 ) @ #vk.15 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g2, ~genP2)))))
                               ) @ #vk.8 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN(~basename2) ) @ #vk.9 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.10 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.11 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.12 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.13 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.14 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.15 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.16 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.17 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.17 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.17 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.18 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.19 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.18 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.19 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.20 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.20 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.60 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.60 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.60 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.60 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.60 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.60 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.60 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.60 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.60 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.60 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))
                                                         ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              MIRRORED
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_1 ) @ #vk.22 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.22 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.22 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                      qed
                    next
                      case c_BSN
                      by step( solve( !KU( ~basename2 ) @ #vk.17 ) )
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g2, ~genP2))))
                                 ) @ #vk.18 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g2, ~genP2)))
                                   ) @ #vk.20 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN(~basename2) ) @ #vk.11 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.12 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                         ) @ #vk.13 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_2,
                                                      plus(multp(~x, multp(~r2, 'P1')),
                                                           multp(multp(multp(~r2, ~x), ~y),
                                                                 multp(~f2, 'P1'))))
                                           ) @ #vk.14 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_2,
                                                        multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                             ) @ #vk.15 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_2,
                                                                            multp(~r2, 'P1')),
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))),
                                                                      multp(~sl_2,
                                                                            plus(multp(~x,
                                                                                       multp(~r2,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r2,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f2,
                                                                                             'P1')))),
                                                                      multp(~sl_2,
                                                                            multp(multp(~r2, ~y),
                                                                                  multp(~f2,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_1,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g2,
                                                                                                       ~genP2))))))))
                                               ) @ #vk.16 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_1,
                                                           multp(H_n_2(Nonce(~rnd_n_C2),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_2,
                                                                                         multp(~r2,
                                                                                               'P1')),
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))),
                                                                                   multp(~sl_2,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r2,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r2,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f2,
                                                                                                          'P1')))),
                                                                                   multp(~sl_2,
                                                                                         multp(multp(~r2,
                                                                                                     ~y),
                                                                                               multp(~f2,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_1,
                                                                                       multp(~sl_2,
                                                                                             multp(~y,
                                                                                                   multp(~r2,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g2,
                                                                                                                    ~genP2)))))))),
                                                                 ~f2))
                                                 ) @ #vk.17 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.18 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.19 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.19 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.66 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.20 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.20 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.66 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.66 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.66 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                   multp(~g2, ~genP2))
                                                         ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              MIRRORED
                                            next
                                              case c_QPub
                                              step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.23 ) )
                                                case c_multp
                                                by step( solve( !KU( ~g2 ) @ #vk.24 ) )
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C2 ) @ #vk.22 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.22 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))))
                                                 ) @ #vk.22 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1')))))
                                                   ) @ #vk.23 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g2,
                                                                                                 ~genP2))))))
                                                     ) @ #vk.24 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_1,
                                                                 multp(H_n_2(Nonce(~rnd_n_C2),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_2,
                                                                                               multp(~r2,
                                                                                                     'P1')),
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))),
                                                                                         multp(~sl_2,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r2,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r2,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f2,
                                                                                                                'P1')))),
                                                                                         multp(~sl_2,
                                                                                               multp(multp(~r2,
                                                                                                           ~y),
                                                                                                     multp(~f2,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_1,
                                                                                             multp(~sl_2,
                                                                                                   multp(~y,
                                                                                                         multp(~r2,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g2,
                                                                                                                          ~genP2)))))))),
                                                                       ~f2))
                                                       ) @ #vk.20 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.22 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.22 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.23 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.23 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.57 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.57 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                         multp(~g2, ~genP2))
                                                               ) @ #vk.24 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( 'CredentialData'
                                                                 ) @ #vk.25 ) )
                                                      case coerce
                                                      step( solve( !KD( 'CredentialData'
                                                                   ) ▶₀ #vk.25 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( E_S(~r_cv1_1,
                                                                            multp(~sl_2,
                                                                                  multp(~y,
                                                                                        multp(~r2,
                                                                                              'P1'))))
                                                                   ) @ #vk.26 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_E_S
                                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.27 ) )
                                                      qed
                                                    qed
                                                  next
                                                    case c_QPub
                                                    step( solve( !KU( multp(~g2, ~genP2)
                                                                 ) @ #vk.28 ) )
                                                      case c_multp
                                                      by step( solve( !KU( ~g2 ) @ #vk.29 ) )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C2 ) @ #vk.27 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_1 ) @ #vk.27 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_2 ) @ #vk.22 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_2 ) @ #vk.22 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.22 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.22 ) )
                          qed
                        next
                          case c_BSN
                          by step( solve( !KU( ~basename2 ) @ #vk.22 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( QPub('Generic_DAA_public_data',
                                       multp(~g2, ~genP2))
                             ) @ #vk.9 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g2, ~genP2)))))
                               ) @ #vk.10 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN(~basename2) ) @ #vk.11 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.12 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.13 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.14 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.15 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.16 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.17 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.18 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.19 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.19 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.19 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.20 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.21 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.20 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.21 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.22 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.22 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.61 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.61 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.61 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))
                                                         ) @ #vk.23 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              MIRRORED
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_1 ) @ #vk.24 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.24 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.24 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.19 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.19 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.19 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.19 ) )
                      qed
                    next
                      case c_BSN
                      by step( solve( !KU( ~basename2 ) @ #vk.19 ) )
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g2, ~genP2))))
                                 ) @ #vk.20 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g2, ~genP2)))
                                   ) @ #vk.22 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN(~basename2) ) @ #vk.13 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.14 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                         ) @ #vk.15 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_2,
                                                      plus(multp(~x, multp(~r2, 'P1')),
                                                           multp(multp(multp(~r2, ~x), ~y),
                                                                 multp(~f2, 'P1'))))
                                           ) @ #vk.16 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_2,
                                                        multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                             ) @ #vk.17 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_2,
                                                                            multp(~r2, 'P1')),
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))),
                                                                      multp(~sl_2,
                                                                            plus(multp(~x,
                                                                                       multp(~r2,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r2,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f2,
                                                                                             'P1')))),
                                                                      multp(~sl_2,
                                                                            multp(multp(~r2, ~y),
                                                                                  multp(~f2,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_1,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g2,
                                                                                                       ~genP2))))))))
                                               ) @ #vk.18 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_1,
                                                           multp(H_n_2(Nonce(~rnd_n_C2),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_2,
                                                                                         multp(~r2,
                                                                                               'P1')),
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))),
                                                                                   multp(~sl_2,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r2,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r2,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f2,
                                                                                                          'P1')))),
                                                                                   multp(~sl_2,
                                                                                         multp(multp(~r2,
                                                                                                     ~y),
                                                                                               multp(~f2,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_1,
                                                                                       multp(~sl_2,
                                                                                             multp(~y,
                                                                                                   multp(~r2,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g2,
                                                                                                                    ~genP2)))))))),
                                                                 ~f2))
                                                 ) @ #vk.19 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.20 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.21 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.21 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.67 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.22 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.22 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.67 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.67 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.67 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            MIRRORED
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C2 ) @ #vk.23 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.23 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))))
                                                 ) @ #vk.23 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1')))))
                                                   ) @ #vk.24 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g2,
                                                                                                 ~genP2))))))
                                                     ) @ #vk.25 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_1,
                                                                 multp(H_n_2(Nonce(~rnd_n_C2),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_2,
                                                                                               multp(~r2,
                                                                                                     'P1')),
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))),
                                                                                         multp(~sl_2,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r2,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r2,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f2,
                                                                                                                'P1')))),
                                                                                         multp(~sl_2,
                                                                                               multp(multp(~r2,
                                                                                                           ~y),
                                                                                                     multp(~f2,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_1,
                                                                                             multp(~sl_2,
                                                                                                   multp(~y,
                                                                                                         multp(~r2,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g2,
                                                                                                                          ~genP2)))))))),
                                                                       ~f2))
                                                       ) @ #vk.22 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.23 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.24 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.24 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.25 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.25 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( 'CredentialData' ) @ #vk.26 ) )
                                                    case coerce
                                                    step( solve( !KD( 'CredentialData'
                                                                 ) ▶₀ #vk.26 ) )
                                                      case Diff_DAA_CERTIFY_no_verify_case_1
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_2
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.58 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.58 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_3
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Issuer_KeyReveal
                                                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case pub
                                                    step( solve( !KU( E_S(~r_cv1_1,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))
                                                                 ) @ #vk.27 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      MIRRORED
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.28 ) )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C2 ) @ #vk.28 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_1 ) @ #vk.28 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_2 ) @ #vk.23 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_2 ) @ #vk.23 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.23 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.23 ) )
                          qed
                        next
                          case c_BSN
                          by step( solve( !KU( ~basename2 ) @ #vk.23 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case c_QPub
                  step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.20 ) )
                    case c_multp
                    by step( solve( !KU( ~g2 ) @ #vk.21 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( E_S(~r_cv1_1,
                                    multp(~sl_2, multp(~y, multp(~r2, 'P1'))))
                           ) @ #vk.10 ) )
                case Diff_DAA_CERTIFY_no_verify
                step( solve( !KU( QPub('Generic_DAA_public_data',
                                       multp(~g2, ~genP2))
                             ) @ #vk.11 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g2, ~genP2)))))
                               ) @ #vk.12 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN(~basename2) ) @ #vk.13 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.14 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.15 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.16 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.17 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.18 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_1,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_1,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.19 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.20 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.21 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_1 ) @ #vk.21 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.21 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_1,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.22 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.23 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_1,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_1,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.22 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.23 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.24 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.24 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.61 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.61 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.61 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            MIRRORED
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.25 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_1 ) @ #vk.25 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.21 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.21 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.21 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.21 ) )
                      qed
                    next
                      case c_BSN
                      by step( solve( !KU( ~basename2 ) @ #vk.21 ) )
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g2, ~genP2))))
                                 ) @ #vk.22 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g2, ~genP2)))
                                   ) @ #vk.24 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN(~basename2) ) @ #vk.15 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.16 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                         ) @ #vk.17 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_2,
                                                      plus(multp(~x, multp(~r2, 'P1')),
                                                           multp(multp(multp(~r2, ~x), ~y),
                                                                 multp(~f2, 'P1'))))
                                           ) @ #vk.18 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_2,
                                                        multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                             ) @ #vk.19 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_2,
                                                                            multp(~r2, 'P1')),
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))),
                                                                      multp(~sl_2,
                                                                            plus(multp(~x,
                                                                                       multp(~r2,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r2,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f2,
                                                                                             'P1')))),
                                                                      multp(~sl_2,
                                                                            multp(multp(~r2, ~y),
                                                                                  multp(~f2,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_1,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g2,
                                                                                                       ~genP2))))))))
                                               ) @ #vk.20 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_1,
                                                           multp(H_n_2(Nonce(~rnd_n_C2),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_2,
                                                                                         multp(~r2,
                                                                                               'P1')),
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))),
                                                                                   multp(~sl_2,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r2,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r2,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f2,
                                                                                                          'P1')))),
                                                                                   multp(~sl_2,
                                                                                         multp(multp(~r2,
                                                                                                     ~y),
                                                                                               multp(~f2,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_1,
                                                                                       multp(~sl_2,
                                                                                             multp(~y,
                                                                                                   multp(~r2,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g2,
                                                                                                                    ~genP2)))))))),
                                                                 ~f2))
                                                 ) @ #vk.21 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.22 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.23 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.23 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.67 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.24 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.24 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.67 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.67 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.67 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            MIRRORED
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C2 ) @ #vk.25 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_1 ) @ #vk.25 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_1,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))))
                                                 ) @ #vk.25 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_1,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1')))))
                                                   ) @ #vk.26 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g2,
                                                                                                 ~genP2))))))
                                                     ) @ #vk.27 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_1,
                                                                 multp(H_n_2(Nonce(~rnd_n_C2),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_2,
                                                                                               multp(~r2,
                                                                                                     'P1')),
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))),
                                                                                         multp(~sl_2,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r2,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r2,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f2,
                                                                                                                'P1')))),
                                                                                         multp(~sl_2,
                                                                                               multp(multp(~r2,
                                                                                                           ~y),
                                                                                                     multp(~f2,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_1,
                                                                                             multp(~sl_2,
                                                                                                   multp(~y,
                                                                                                         multp(~r2,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g2,
                                                                                                                          ~genP2)))))))),
                                                                       ~f2))
                                                       ) @ #vk.24 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.25 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.26 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.26 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.27 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.27 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( 'CredentialData' ) @ #vk.28 ) )
                                                    case coerce
                                                    step( solve( !KD( 'CredentialData'
                                                                 ) ▶₀ #vk.28 ) )
                                                      case Diff_DAA_CERTIFY_no_verify_case_1
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_2
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.58 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.58 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_3
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Issuer_KeyReveal
                                                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case pub
                                                    MIRRORED
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C2 ) @ #vk.29 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_1 ) @ #vk.29 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_2 ) @ #vk.25 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_2 ) @ #vk.25 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.25 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.25 ) )
                          qed
                        next
                          case c_BSN
                          by step( solve( !KU( ~basename2 ) @ #vk.25 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case c_QPub
                  step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.22 ) )
                    case c_multp
                    by step( solve( !KU( ~g2 ) @ #vk.23 ) )
                  qed
                qed
              next
                case c_E_S
                by step( solve( !KU( ~r_cv1_1 ) @ #vk.21 ) )
              qed
            qed
          qed
        qed
      qed
    next
      case Issuer_Init
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case PkX
          step( solve( !KU( PkX(~x, 'P2') ) @ #vk ) )
            case Issuer_Init
            MIRRORED
          next
            case c_PkX
            step( solve( !KU( ~x ) @ #vk.1 ) )
              case Issuer_KeyReveal
              step( solve( !KU( 'P2' ) @ #vk.2 ) )
                case coerce
                step( solve( !KD( 'P2' ) ▶₀ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.4 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case PkY
          step( solve( !KU( PkY(~y, 'P2') ) @ #vk ) )
            case Issuer_Init
            MIRRORED
          next
            case c_PkY
            step( solve( !KU( ~y ) @ #vk.1 ) )
              case Issuer_KeyReveal
              step( solve( !KU( 'P2' ) @ #vk.2 ) )
                case coerce
                step( solve( !KD( 'P2' ) ▶₀ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.4 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !KU( PkX(~x, 'P2') ) @ #vk.1 ) )
          case Issuer_Init
          step( solve( !KU( PkY(~y, 'P2') ) @ #vk.2 ) )
            case Issuer_Init
            MIRRORED
          next
            case c_PkY
            step( solve( !KU( ~y ) @ #vk.3 ) )
              case Issuer_KeyReveal
              step( solve( !KU( 'P2' ) @ #vk.4 ) )
                case coerce
                step( solve( !KD( 'P2' ) ▶₀ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.4 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          qed
        next
          case c_PkX
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case Issuer_KeyReveal
            step( solve( !KU( PkY(~y, 'P2') ) @ #vk.3 ) )
              case Issuer_Init
              step( solve( !KU( 'P2' ) @ #vk.4 ) )
                case coerce
                step( solve( !KD( 'P2' ) ▶₀ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.4 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                MIRRORED
              qed
            next
              case c_PkY
              step( solve( !KU( ~y ) @ #vk.5 ) )
                case Issuer_KeyReveal
                step( solve( !KU( 'P2' ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( 'P2' ) ▶₀ #vk.5 ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                   T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                   T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                   T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                   T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                   T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                   T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.1, y ) ▶₀ #vr ) )
        case Issuer_Init
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case Var_fresh_1_x
            step( solve( !KU( ~x ) @ #vk ) )
              case Issuer_KeyReveal
              MIRRORED
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case Var_fresh_y
            step( solve( !KU( ~y ) @ #vk ) )
              case Issuer_KeyReveal
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( !KU( ~x ) @ #vk.1 ) )
            case Issuer_KeyReveal
            step( solve( !KU( ~y ) @ #vk.2 ) )
              case Issuer_KeyReveal
              MIRRORED
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case Diff_DAA_CERTIFY_no_verify_case_1
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_FirstTPM
                step( solve( !KU( 'FirstTPM' ) @ #vk ) )
                  case coerce
                  step( solve( !KD( 'FirstTPM' ) ▶₀ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.6 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case pk
                  step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_pk
                    step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.1 ) )
                      case c_KDF_EK
                      by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.2 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_DAA_public_data
                    step( solve( !KU( 'DAA_public_data' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify_case_1
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_2
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_3
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      next
                        case Issuer_KeyReveal
                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                          case Issuer_Init
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case multp
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.1 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.1 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.2 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.3 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.4 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.5 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.5 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( 'FirstTPM' ) @ #vk.3 ) )
                case coerce
                step( solve( !KD( 'FirstTPM' ) ▶₀ #vk.3 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.5 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.6 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.7 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_FirstTPM
                step( solve( !KU( 'FirstTPM' ) @ #vk ) )
                  case coerce
                  step( solve( !KD( 'FirstTPM' ) ▶₀ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.6 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case pk
                  step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_pk
                    step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.1 ) )
                      case c_KDF_EK
                      by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.2 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_DAA_public_data
                    step( solve( !KU( 'DAA_public_data' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify_case_1
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_2
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_3
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      next
                        case Issuer_KeyReveal
                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                          case Issuer_Init
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case multp
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.1 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.1 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.2 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.3 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.4 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.5 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.5 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( 'FirstTPM' ) @ #vk.3 ) )
                case coerce
                step( solve( !KD( 'FirstTPM' ) ▶₀ #vk.3 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed1)) ) @ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.5 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f1, 'P1') ) @ #vk.6 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f1 ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed1) ) @ #vk.7 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed1 ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_2
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_SecondTPM
                step( solve( !KU( 'SecondTPM' ) @ #vk ) )
                  case coerce
                  step( solve( !KD( 'SecondTPM' ) ▶₀ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.6 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case pk
                  step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_pk
                    step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.1 ) )
                      case c_KDF_EK
                      by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.2 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_DAA_public_data
                    step( solve( !KU( 'DAA_public_data' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify_case_1
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_2
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_3
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      next
                        case Issuer_KeyReveal
                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                          case Issuer_Init
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case multp
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.1 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.1 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.2 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.3 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.4 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.5 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.5 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( 'SecondTPM' ) @ #vk.3 ) )
                case coerce
                step( solve( !KD( 'SecondTPM' ) ▶₀ #vk.3 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.5 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.6 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.7 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_SecondTPM
                step( solve( !KU( 'SecondTPM' ) @ #vk ) )
                  case coerce
                  step( solve( !KD( 'SecondTPM' ) ▶₀ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.6 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.6 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                   S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                   S2, T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.6 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.6 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case pk
                  step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_pk
                    step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.1 ) )
                      case c_KDF_EK
                      by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.2 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_DAA_public_data
                    step( solve( !KU( 'DAA_public_data' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify_case_1
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_2
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                              case Generate_TPM_DAA_CERTIFY
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case Diff_DAA_CERTIFY_no_verify_case_3
                        step( solve( Shuffle_Sigmas( (
                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, 
                                                       R1, S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, 
                                                       R2, S2, T2, W2, h2_host2, small_s2, n_C2>
                                                     )
                                     ) ▶₀ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY_case_1
                          by step( contradiction /* impossible chain */ )
                        next
                          case Generate_TPM_DAA_CERTIFY_case_2
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      next
                        case Issuer_KeyReveal
                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                          case Issuer_Init
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case multp
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.1 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.1 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.2 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.3 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.8 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.4 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.5 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.5 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.6 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( 'SecondTPM' ) @ #vk.3 ) )
                case coerce
                step( solve( !KD( 'SecondTPM' ) ▶₀ #vk.3 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.5 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                step( solve( !KU( pk(KDF_EK(~TPM_EK_Seed2)) ) @ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( 'DAA_public_data' ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( 'DAA_public_data' ) ▶₀ #vk.5 ) )
                      case Diff_DAA_CERTIFY_no_verify_case_1
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_2
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.7 ) )
                          case Generate_TPM_DAA_CERTIFY
                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.7 ) )
                            case Generate_TPM_DAA_CERTIFY
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case Diff_DAA_CERTIFY_no_verify_case_3
                      step( solve( Shuffle_Sigmas( (
                                                    <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, bsn1, R1, 
                                                     S1, T1, W1, h2_host1, small_s1, n_C1>+
                                                    <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, bsn2, R2, 
                                                     S2, T2, W2, h2_host2, small_s2, n_C2>
                                                   )
                                   ) ▶₀ #vr.7 ) )
                        case Generate_TPM_DAA_CERTIFY_case_1
                        by step( contradiction /* impossible chain */ )
                      next
                        case Generate_TPM_DAA_CERTIFY_case_2
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    next
                      case Issuer_KeyReveal
                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.7 ) )
                        case Issuer_Init
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( multp(~f2, 'P1') ) @ #vk.6 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_multp
                      by step( solve( !KU( ~f2 ) @ #vk.7 ) )
                    qed
                  qed
                next
                  case c_pk
                  step( solve( !KU( KDF_EK(~TPM_EK_Seed2) ) @ #vk.7 ) )
                    case c_KDF_EK
                    by step( solve( !KU( ~TPM_EK_Seed2 ) @ #vk.8 ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Diff_DAA_CERTIFY_no_verify_case_3
      step( solve( Shuffle_Sigmas( (
                                    <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, T1, W1, 
                                     h2_host1, small_s1, n_C1>+
                                    <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, T2, W2, 
                                     h2_host2, small_s2, n_C2>
                                   )
                   ) ▶₀ #vr ) )
        case Generate_TPM_DAA_CERTIFY_case_1
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case E_S
                step( solve( !KU( E_S(~r_cv1_2,
                                      multp(~sl_2, multp(~y, multp(~r2, 'P1'))))
                             ) @ #vk ) )
                  case Diff_DAA_CERTIFY_no_verify
                  MIRRORED
                next
                  case c_E_S
                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case QPub
                  step( solve( !KU( QPub('Generic_DAA_public_data',
                                         multp(~g2, ~genP2))
                               ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_QPub
                    step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.2 ) )
                      case c_multp
                      by step( solve( !KU( ~g2 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case certData
                    step( solve( !KU( certData('certificationData',
                                               QName('SHA256',
                                                     H_SHA256(QPub('Generic_DAA_public_data',
                                                                   multp(~g2, ~genP2)))))
                                 ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_certData
                      step( solve( !KU( QName('SHA256',
                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                            multp(~g2, ~genP2))))
                                   ) @ #vk.2 ) )
                        case c_QName
                        step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                        multp(~g2, ~genP2)))
                                     ) @ #vk.4 ) )
                          case c_H_SHA256
                          step( solve( !KU( 'certificationData' ) @ #vk.3 ) )
                            case coerce
                            step( solve( !KD( 'certificationData' ) ▶₀ #vk.3 ) )
                              case Diff_DAA_CERTIFY_no_verify_case_1
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case Diff_DAA_CERTIFY_no_verify_case_2
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Diff_DAA_CERTIFY_no_verify_case_3
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                by step( contradiction /* impossible chain */ )
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Issuer_Init
                              by step( contradiction /* impossible chain */ )
                            next
                              case Issuer_KeyReveal
                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                                case Issuer_Init
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( 'SHA256' ) @ #vk.4 ) )
                              case coerce
                              step( solve( !KD( 'SHA256' ) ▶₀ #vk.4 ) )
                                case Diff_DAA_CERTIFY_no_verify_case_1
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case Diff_DAA_CERTIFY_no_verify_case_2
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                      case Generate_TPM_DAA_CERTIFY
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                      case Generate_TPM_DAA_CERTIFY
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Diff_DAA_CERTIFY_no_verify_case_3
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Issuer_Init
                                by step( contradiction /* impossible chain */ )
                              next
                                case Issuer_KeyReveal
                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                                  case Issuer_Init
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( QPub('Generic_DAA_public_data',
                                                     multp(~g2, ~genP2))
                                           ) @ #vk.5 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                MIRRORED
                              next
                                case c_QPub
                                step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.7 ) )
                                  case c_multp
                                  by step( solve( !KU( ~g2 ) @ #vk.8 ) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case BSN
                      step( solve( !KU( BSN(~basename2) ) @ #vk ) )
                        case Diff_DAA_CERTIFY_no_verify
                        MIRRORED
                      next
                        case c_BSN
                        by step( solve( !KU( ~basename2 ) @ #vk.1 ) )
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case multp
                        step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk ) )
                          case Diff_DAA_CERTIFY_no_verify
                          MIRRORED
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.1 ) )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                       ) @ #vk ) )
                            case Diff_DAA_CERTIFY_no_verify
                            MIRRORED
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~sl_2,
                                                    plus(multp(~x, multp(~r2, 'P1')),
                                                         multp(multp(multp(~r2, ~x), ~y),
                                                               multp(~f2, 'P1'))))
                                         ) @ #vk ) )
                              case Diff_DAA_CERTIFY_no_verify
                              MIRRORED
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                              case multp
                              step( solve( !KU( multp(~sl_2,
                                                      multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                           ) @ #vk ) )
                                case Diff_DAA_CERTIFY_no_verify
                                MIRRORED
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_2 ) @ #vk.1 ) )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                case H_n_2
                                step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                        H_k_2(H_k_6('CredentialData',
                                                                    multp(~sl_2, multp(~r2, 'P1')),
                                                                    multp(~sl_2,
                                                                          multp(~y,
                                                                                multp(~r2, 'P1'))),
                                                                    multp(~sl_2,
                                                                          plus(multp(~x,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(multp(multp(~r2,
                                                                                                 ~x),
                                                                                           ~y),
                                                                                     multp(~f2,
                                                                                           'P1')))),
                                                                    multp(~sl_2,
                                                                          multp(multp(~r2, ~y),
                                                                                multp(~f2, 'P1'))),
                                                                    E_S(~r_cv1_2,
                                                                        multp(~sl_2,
                                                                              multp(~y,
                                                                                    multp(~r2,
                                                                                          'P1'))))),
                                                              H_6(certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g2,
                                                                                                     ~genP2))))))))
                                             ) @ #vk ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  MIRRORED
                                next
                                  case c_H_n_2
                                  step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                multp(~sl_2, multp(~r2, 'P1')),
                                                                multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1'))),
                                                                multp(~sl_2,
                                                                      plus(multp(~x,
                                                                                 multp(~r2, 'P1')),
                                                                           multp(multp(multp(~r2,
                                                                                             ~x),
                                                                                       ~y),
                                                                                 multp(~f2,
                                                                                       'P1')))),
                                                                multp(~sl_2,
                                                                      multp(multp(~r2, ~y),
                                                                            multp(~f2, 'P1'))),
                                                                E_S(~r_cv1_2,
                                                                    multp(~sl_2,
                                                                          multp(~y,
                                                                                multp(~r2,
                                                                                      'P1'))))),
                                                          H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g2,
                                                                                                 ~genP2)))))))
                                               ) @ #vk.2 ) )
                                    case c_H_k_2
                                    step( solve( !KU( H_k_6('CredentialData',
                                                            multp(~sl_2, multp(~r2, 'P1')),
                                                            multp(~sl_2,
                                                                  multp(~y, multp(~r2, 'P1'))),
                                                            multp(~sl_2,
                                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                                       multp(multp(multp(~r2, ~x),
                                                                                   ~y),
                                                                             multp(~f2, 'P1')))),
                                                            multp(~sl_2,
                                                                  multp(multp(~r2, ~y),
                                                                        multp(~f2, 'P1'))),
                                                            E_S(~r_cv1_2,
                                                                multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))))
                                                 ) @ #vk.3 ) )
                                      case c_H_k_6
                                      step( solve( !KU( H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2))))))
                                                   ) @ #vk.4 ) )
                                        case c_H_6
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.4 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.5 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.5 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.24 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.24 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.24 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.6 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))
                                                           ) @ #vk.7 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1'))))
                                                             ) @ #vk.8 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( multp(~sl_2,
                                                                          multp(multp(~r2, ~y),
                                                                                multp(~f2, 'P1')))
                                                               ) @ #vk.9 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( E_S(~r_cv1_2,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))
                                                                 ) @ #vk.10 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      step( solve( !KU( certData('certificationData',
                                                                                 QName('SHA256',
                                                                                       H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                     multp(~g2,
                                                                                                           ~genP2)))))
                                                                   ) @ #vk.11 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_certData
                                                        step( solve( !KU( QName('SHA256',
                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                              multp(~g2,
                                                                                                    ~genP2))))
                                                                     ) @ #vk.13 ) )
                                                          case c_QName
                                                          step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g2,
                                                                                                ~genP2)))
                                                                       ) @ #vk.15 ) )
                                                            case c_H_SHA256
                                                            step( solve( !KU( 'certificationData'
                                                                         ) @ #vk.14 ) )
                                                              case coerce
                                                              step( solve( !KD( 'certificationData'
                                                                           ) ▶₀ #vk.14 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( 'SHA256'
                                                                           ) @ #vk.15 ) )
                                                                case coerce
                                                                step( solve( !KD( 'SHA256'
                                                                             ) ▶₀ #vk.15 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.51 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.51 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Issuer_KeyReveal
                                                                  step( solve( !Ltk( I, x.1, y.1
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Issuer_Init
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case pub
                                                                step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))
                                                                             ) @ #vk.16 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify
                                                                  MIRRORED
                                                                next
                                                                  case c_QPub
                                                                  step( solve( !KU( multp(~g2,
                                                                                          ~genP2)
                                                                               ) @ #vk.18 ) )
                                                                    case c_multp
                                                                    by step( solve( !KU( ~g2
                                                                                    ) @ #vk.19 ) )
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.12 ) )
                                                    qed
                                                  next
                                                    case c_multp
                                                    by step( solve( !KU( ~sl_2 ) @ #vk.12 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_2 ) @ #vk.12 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_2 ) @ #vk.12 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.12 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.12 ) )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
                                  case plus
                                  step( solve( !KU( plus(~r_cv1_2,
                                                         multp(H_n_2(Nonce(~rnd_n_C2),
                                                                     H_k_2(H_k_6('CredentialData',
                                                                                 multp(~sl_2,
                                                                                       multp(~r2,
                                                                                             'P1')),
                                                                                 multp(~sl_2,
                                                                                       multp(~y,
                                                                                             multp(~r2,
                                                                                                   'P1'))),
                                                                                 multp(~sl_2,
                                                                                       plus(multp(~x,
                                                                                                  multp(~r2,
                                                                                                        'P1')),
                                                                                            multp(multp(multp(~r2,
                                                                                                              ~x),
                                                                                                        ~y),
                                                                                                  multp(~f2,
                                                                                                        'P1')))),
                                                                                 multp(~sl_2,
                                                                                       multp(multp(~r2,
                                                                                                   ~y),
                                                                                             multp(~f2,
                                                                                                   'P1'))),
                                                                                 E_S(~r_cv1_2,
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))))),
                                                                           H_6(certData('certificationData',
                                                                                        QName('SHA256',
                                                                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                            multp(~g2,
                                                                                                                  ~genP2)))))))),
                                                               ~f2))
                                               ) @ #vk ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_plus
                                    by step( solve( !KU( ~r_cv1_2 ) @ #vk.1 ) )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
                                  case Nonce
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.1 ) )
                                  qed
                                qed
                              next
                                case pair
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.1 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.2 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.3 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.3 ) )
                                qed
                              qed
                            next
                              case pair
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.2 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.3 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.4 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.5 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.5 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.5 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.6 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.7 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.6 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.7 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.8 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.8 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.33 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.33 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.33 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.9 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))
                                                           ) @ #vk.10 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1'))))
                                                             ) @ #vk.11 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( multp(~sl_2,
                                                                          multp(multp(~r2, ~y),
                                                                                multp(~f2, 'P1')))
                                                               ) @ #vk.12 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( E_S(~r_cv1_2,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))
                                                                 ) @ #vk.13 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      step( solve( !KU( certData('certificationData',
                                                                                 QName('SHA256',
                                                                                       H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                     multp(~g2,
                                                                                                           ~genP2)))))
                                                                   ) @ #vk.14 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_certData
                                                        step( solve( !KU( QName('SHA256',
                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                              multp(~g2,
                                                                                                    ~genP2))))
                                                                     ) @ #vk.16 ) )
                                                          case c_QName
                                                          step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g2,
                                                                                                ~genP2)))
                                                                       ) @ #vk.18 ) )
                                                            case c_H_SHA256
                                                            step( solve( !KU( 'certificationData'
                                                                         ) @ #vk.17 ) )
                                                              case coerce
                                                              step( solve( !KD( 'certificationData'
                                                                           ) ▶₀ #vk.17 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( 'SHA256'
                                                                           ) @ #vk.18 ) )
                                                                case coerce
                                                                step( solve( !KD( 'SHA256'
                                                                             ) ▶₀ #vk.18 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.60 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.60 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Issuer_KeyReveal
                                                                  step( solve( !Ltk( I, x.1, y.1
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Issuer_Init
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case pub
                                                                step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))
                                                                             ) @ #vk.19 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify
                                                                  MIRRORED
                                                                next
                                                                  case c_QPub
                                                                  step( solve( !KU( multp(~g2,
                                                                                          ~genP2)
                                                                               ) @ #vk.21 ) )
                                                                    case c_multp
                                                                    by step( solve( !KU( ~g2
                                                                                    ) @ #vk.22 ) )
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.15 ) )
                                                    qed
                                                  next
                                                    case c_multp
                                                    by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.15 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.15 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pair
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.3 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.4 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.5 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.6 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.7 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.7 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.7 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.8 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.9 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.8 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.9 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.10 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.10 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.40 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.40 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.40 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.11 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))
                                                           ) @ #vk.12 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1'))))
                                                             ) @ #vk.13 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( E_S(~r_cv1_2,
                                                                        multp(~sl_2,
                                                                              multp(~y,
                                                                                    multp(~r2,
                                                                                          'P1'))))
                                                               ) @ #vk.14 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( certData('certificationData',
                                                                               QName('SHA256',
                                                                                     H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                   multp(~g2,
                                                                                                         ~genP2)))))
                                                                 ) @ #vk.15 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      MIRRORED
                                                    next
                                                      case c_certData
                                                      step( solve( !KU( QName('SHA256',
                                                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                                                            multp(~g2,
                                                                                                  ~genP2))))
                                                                   ) @ #vk.17 ) )
                                                        case c_QName
                                                        step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g2,
                                                                                              ~genP2)))
                                                                     ) @ #vk.19 ) )
                                                          case c_H_SHA256
                                                          step( solve( !KU( 'certificationData'
                                                                       ) @ #vk.18 ) )
                                                            case coerce
                                                            step( solve( !KD( 'certificationData'
                                                                         ) ▶₀ #vk.18 ) )
                                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Issuer_KeyReveal
                                                              step( solve( !Ltk( I, x.1, y.1
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case pub
                                                            step( solve( !KU( 'SHA256'
                                                                         ) @ #vk.19 ) )
                                                              case coerce
                                                              step( solve( !KD( 'SHA256'
                                                                           ) ▶₀ #vk.19 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.59 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.59 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                     multp(~g2,
                                                                                           ~genP2))
                                                                           ) @ #vk.20 ) )
                                                                case Diff_DAA_CERTIFY_no_verify
                                                                MIRRORED
                                                              next
                                                                case c_QPub
                                                                step( solve( !KU( multp(~g2, ~genP2)
                                                                             ) @ #vk.22 ) )
                                                                  case c_multp
                                                                  by step( solve( !KU( ~g2
                                                                                  ) @ #vk.23 ) )
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case c_E_S
                                                    by step( solve( !KU( ~r_cv1_2 ) @ #vk.16 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_2 ) @ #vk.16 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_2 ) @ #vk.16 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.16 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.16 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.16 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.7 ) )
                            qed
                          qed
                        next
                          case pair
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.4 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.5 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.6 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.7 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.8 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.9 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.9 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.9 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.10 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.11 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.10 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.11 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.12 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.12 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.46 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.46 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.46 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.13 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_2,
                                                                      multp(~y, multp(~r2, 'P1')))
                                                           ) @ #vk.14 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))
                                                             ) @ #vk.15 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g2,
                                                                                                       ~genP2)))))
                                                               ) @ #vk.16 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    MIRRORED
                                                  next
                                                    case c_certData
                                                    step( solve( !KU( QName('SHA256',
                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g2,
                                                                                                ~genP2))))
                                                                 ) @ #vk.18 ) )
                                                      case c_QName
                                                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g2,
                                                                                            ~genP2)))
                                                                   ) @ #vk.20 ) )
                                                        case c_H_SHA256
                                                        step( solve( !KU( 'certificationData'
                                                                     ) @ #vk.19 ) )
                                                          case coerce
                                                          step( solve( !KD( 'certificationData'
                                                                       ) ▶₀ #vk.19 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( 'SHA256' ) @ #vk.20 ) )
                                                            case coerce
                                                            step( solve( !KD( 'SHA256'
                                                                         ) ▶₀ #vk.20 ) )
                                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.58 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.58 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Issuer_KeyReveal
                                                              step( solve( !Ltk( I, x.1, y.1
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case pub
                                                            step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                   multp(~g2,
                                                                                         ~genP2))
                                                                         ) @ #vk.21 ) )
                                                              case Diff_DAA_CERTIFY_no_verify
                                                              MIRRORED
                                                            next
                                                              case c_QPub
                                                              step( solve( !KU( multp(~g2, ~genP2)
                                                                           ) @ #vk.23 ) )
                                                                case c_multp
                                                                by step( solve( !KU( ~g2
                                                                                ) @ #vk.24 ) )
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case c_E_S
                                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.17 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.17 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.17 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.9 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.9 ) )
                          qed
                        qed
                      next
                        case pair
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.5 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.6 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.7 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.8 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.9 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.10 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.11 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.11 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.11 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.12 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.13 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.12 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.13 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.14 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.14 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.51 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.51 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.51 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_2, multp(~r2, 'P1'))
                                                         ) @ #vk.15 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( E_S(~r_cv1_2,
                                                                    multp(~sl_2,
                                                                          multp(~y,
                                                                                multp(~r2, 'P1'))))
                                                           ) @ #vk.16 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g2,
                                                                                                     ~genP2)))))
                                                             ) @ #vk.17 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  MIRRORED
                                                next
                                                  case c_certData
                                                  step( solve( !KU( QName('SHA256',
                                                                          H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g2,
                                                                                              ~genP2))))
                                                               ) @ #vk.19 ) )
                                                    case c_QName
                                                    step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                    multp(~g2,
                                                                                          ~genP2)))
                                                                 ) @ #vk.21 ) )
                                                      case c_H_SHA256
                                                      step( solve( !KU( 'certificationData'
                                                                   ) @ #vk.20 ) )
                                                        case coerce
                                                        step( solve( !KD( 'certificationData'
                                                                     ) ▶₀ #vk.20 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( 'SHA256' ) @ #vk.21 ) )
                                                          case coerce
                                                          step( solve( !KD( 'SHA256' ) ▶₀ #vk.21 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.57 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.57 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                 multp(~g2, ~genP2))
                                                                       ) @ #vk.22 ) )
                                                            case Diff_DAA_CERTIFY_no_verify
                                                            MIRRORED
                                                          next
                                                            case c_QPub
                                                            step( solve( !KU( multp(~g2, ~genP2)
                                                                         ) @ #vk.24 ) )
                                                              case c_multp
                                                              by step( solve( !KU( ~g2
                                                                              ) @ #vk.25 ) )
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_2 ) @ #vk.18 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_2 ) @ #vk.18 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.18 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.18 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.11 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.11 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.11 ) )
                        qed
                      qed
                    next
                      case pair
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.6 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.7 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.8 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.9 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.10 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.11 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.12 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.13 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.13 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.13 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.14 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.15 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.14 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.15 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.16 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.16 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.55 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.55 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.55 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))
                                                         ) @ #vk.17 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))
                                                           ) @ #vk.18 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_certData
                                                step( solve( !KU( QName('SHA256',
                                                                        H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g2,
                                                                                            ~genP2))))
                                                             ) @ #vk.20 ) )
                                                  case c_QName
                                                  step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                  multp(~g2,
                                                                                        ~genP2)))
                                                               ) @ #vk.22 ) )
                                                    case c_H_SHA256
                                                    step( solve( !KU( 'certificationData'
                                                                 ) @ #vk.21 ) )
                                                      case coerce
                                                      step( solve( !KD( 'certificationData'
                                                                   ) ▶₀ #vk.21 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( 'SHA256' ) @ #vk.22 ) )
                                                        case coerce
                                                        step( solve( !KD( 'SHA256' ) ▶₀ #vk.22 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.56 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.56 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                               multp(~g2, ~genP2))
                                                                     ) @ #vk.23 ) )
                                                          case Diff_DAA_CERTIFY_no_verify
                                                          MIRRORED
                                                        next
                                                          case c_QPub
                                                          step( solve( !KU( multp(~g2, ~genP2)
                                                                       ) @ #vk.25 ) )
                                                            case c_multp
                                                            by step( solve( !KU( ~g2 ) @ #vk.26 ) )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_2 ) @ #vk.19 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.19 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.19 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.13 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.13 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.13 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( BSN(~basename2) ) @ #vk.7 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.8 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.9 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.10 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.11 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.12 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.13 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.14 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.15 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.15 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.15 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.16 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.17 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.16 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.17 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.18 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.18 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.58 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.58 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.58 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.58 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.58 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.58 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.58 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))
                                                         ) @ #vk.19 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))
                                                           ) @ #vk.20 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_certData
                                                step( solve( !KU( QName('SHA256',
                                                                        H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g2,
                                                                                            ~genP2))))
                                                             ) @ #vk.22 ) )
                                                  case c_QName
                                                  step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                  multp(~g2,
                                                                                        ~genP2)))
                                                               ) @ #vk.24 ) )
                                                    case c_H_SHA256
                                                    step( solve( !KU( 'certificationData'
                                                                 ) @ #vk.23 ) )
                                                      case coerce
                                                      step( solve( !KD( 'certificationData'
                                                                   ) ▶₀ #vk.23 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( 'SHA256' ) @ #vk.24 ) )
                                                        case coerce
                                                        step( solve( !KD( 'SHA256' ) ▶₀ #vk.24 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.59 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                               multp(~g2, ~genP2))
                                                                     ) @ #vk.25 ) )
                                                          case Diff_DAA_CERTIFY_no_verify
                                                          MIRRORED
                                                        next
                                                          case c_QPub
                                                          step( solve( !KU( multp(~g2, ~genP2)
                                                                       ) @ #vk.27 ) )
                                                            case c_multp
                                                            by step( solve( !KU( ~g2 ) @ #vk.28 ) )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_2 ) @ #vk.21 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.21 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.21 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.15 ) )
                      qed
                    next
                      case c_BSN
                      by step( solve( !KU( ~basename2 ) @ #vk.15 ) )
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g2, ~genP2)))))
                               ) @ #vk.8 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN(~basename2) ) @ #vk.9 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.10 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.11 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.12 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.13 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.14 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.15 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.16 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.17 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.17 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.17 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.18 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.19 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.18 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.19 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.20 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.20 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.60 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.60 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.60 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.60 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.60 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.60 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.60 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.60 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.60 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.60 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))
                                                         ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              MIRRORED
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_2 ) @ #vk.22 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.22 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.22 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.17 ) )
                      qed
                    next
                      case c_BSN
                      by step( solve( !KU( ~basename2 ) @ #vk.17 ) )
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g2, ~genP2))))
                                 ) @ #vk.18 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g2, ~genP2)))
                                   ) @ #vk.20 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN(~basename2) ) @ #vk.11 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.12 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                         ) @ #vk.13 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_2,
                                                      plus(multp(~x, multp(~r2, 'P1')),
                                                           multp(multp(multp(~r2, ~x), ~y),
                                                                 multp(~f2, 'P1'))))
                                           ) @ #vk.14 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_2,
                                                        multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                             ) @ #vk.15 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_2,
                                                                            multp(~r2, 'P1')),
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))),
                                                                      multp(~sl_2,
                                                                            plus(multp(~x,
                                                                                       multp(~r2,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r2,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f2,
                                                                                             'P1')))),
                                                                      multp(~sl_2,
                                                                            multp(multp(~r2, ~y),
                                                                                  multp(~f2,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_2,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g2,
                                                                                                       ~genP2))))))))
                                               ) @ #vk.16 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_2,
                                                           multp(H_n_2(Nonce(~rnd_n_C2),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_2,
                                                                                         multp(~r2,
                                                                                               'P1')),
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))),
                                                                                   multp(~sl_2,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r2,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r2,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f2,
                                                                                                          'P1')))),
                                                                                   multp(~sl_2,
                                                                                         multp(multp(~r2,
                                                                                                     ~y),
                                                                                               multp(~f2,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_2,
                                                                                       multp(~sl_2,
                                                                                             multp(~y,
                                                                                                   multp(~r2,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g2,
                                                                                                                    ~genP2)))))))),
                                                                 ~f2))
                                                 ) @ #vk.17 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.18 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.19 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.19 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.66 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.20 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.20 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.66 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.66 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.66 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.66 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.66 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                   multp(~g2, ~genP2))
                                                         ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              MIRRORED
                                            next
                                              case c_QPub
                                              step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.23 ) )
                                                case c_multp
                                                by step( solve( !KU( ~g2 ) @ #vk.24 ) )
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C2 ) @ #vk.22 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.22 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))))
                                                 ) @ #vk.22 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1')))))
                                                   ) @ #vk.23 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g2,
                                                                                                 ~genP2))))))
                                                     ) @ #vk.24 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_2,
                                                                 multp(H_n_2(Nonce(~rnd_n_C2),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_2,
                                                                                               multp(~r2,
                                                                                                     'P1')),
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))),
                                                                                         multp(~sl_2,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r2,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r2,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f2,
                                                                                                                'P1')))),
                                                                                         multp(~sl_2,
                                                                                               multp(multp(~r2,
                                                                                                           ~y),
                                                                                                     multp(~f2,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_2,
                                                                                             multp(~sl_2,
                                                                                                   multp(~y,
                                                                                                         multp(~r2,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g2,
                                                                                                                          ~genP2)))))))),
                                                                       ~f2))
                                                       ) @ #vk.20 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.22 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.22 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.23 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.23 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.57 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.57 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.57 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                         multp(~g2, ~genP2))
                                                               ) @ #vk.24 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( 'CredentialData'
                                                                 ) @ #vk.25 ) )
                                                      case coerce
                                                      step( solve( !KD( 'CredentialData'
                                                                   ) ▶₀ #vk.25 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.59 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.59 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.59 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( E_S(~r_cv1_2,
                                                                            multp(~sl_2,
                                                                                  multp(~y,
                                                                                        multp(~r2,
                                                                                              'P1'))))
                                                                   ) @ #vk.26 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_E_S
                                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.27 ) )
                                                      qed
                                                    qed
                                                  next
                                                    case c_QPub
                                                    step( solve( !KU( multp(~g2, ~genP2)
                                                                 ) @ #vk.28 ) )
                                                      case c_multp
                                                      by step( solve( !KU( ~g2 ) @ #vk.29 ) )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C2 ) @ #vk.27 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_2 ) @ #vk.27 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_2 ) @ #vk.22 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_2 ) @ #vk.22 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.22 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.22 ) )
                          qed
                        next
                          case c_BSN
                          by step( solve( !KU( ~basename2 ) @ #vk.22 ) )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( QPub('Generic_DAA_public_data',
                                       multp(~g2, ~genP2))
                             ) @ #vk.9 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g2, ~genP2)))))
                               ) @ #vk.10 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN(~basename2) ) @ #vk.11 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.12 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.13 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.14 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.15 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.16 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.17 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.18 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.19 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.19 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.19 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.20 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.21 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.20 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.21 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.22 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.22 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.61 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.61 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.61 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))
                                                         ) @ #vk.23 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              MIRRORED
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_2 ) @ #vk.24 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.24 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.24 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.19 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.19 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.19 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.19 ) )
                      qed
                    next
                      case c_BSN
                      by step( solve( !KU( ~basename2 ) @ #vk.19 ) )
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g2, ~genP2))))
                                 ) @ #vk.20 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g2, ~genP2)))
                                   ) @ #vk.22 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN(~basename2) ) @ #vk.13 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.14 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                         ) @ #vk.15 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_2,
                                                      plus(multp(~x, multp(~r2, 'P1')),
                                                           multp(multp(multp(~r2, ~x), ~y),
                                                                 multp(~f2, 'P1'))))
                                           ) @ #vk.16 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_2,
                                                        multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                             ) @ #vk.17 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_2,
                                                                            multp(~r2, 'P1')),
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))),
                                                                      multp(~sl_2,
                                                                            plus(multp(~x,
                                                                                       multp(~r2,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r2,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f2,
                                                                                             'P1')))),
                                                                      multp(~sl_2,
                                                                            multp(multp(~r2, ~y),
                                                                                  multp(~f2,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_2,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g2,
                                                                                                       ~genP2))))))))
                                               ) @ #vk.18 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_2,
                                                           multp(H_n_2(Nonce(~rnd_n_C2),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_2,
                                                                                         multp(~r2,
                                                                                               'P1')),
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))),
                                                                                   multp(~sl_2,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r2,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r2,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f2,
                                                                                                          'P1')))),
                                                                                   multp(~sl_2,
                                                                                         multp(multp(~r2,
                                                                                                     ~y),
                                                                                               multp(~f2,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_2,
                                                                                       multp(~sl_2,
                                                                                             multp(~y,
                                                                                                   multp(~r2,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g2,
                                                                                                                    ~genP2)))))))),
                                                                 ~f2))
                                                 ) @ #vk.19 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.20 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.21 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.21 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.67 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.22 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.22 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.67 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.67 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.67 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            MIRRORED
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C2 ) @ #vk.23 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.23 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))))
                                                 ) @ #vk.23 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1')))))
                                                   ) @ #vk.24 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g2,
                                                                                                 ~genP2))))))
                                                     ) @ #vk.25 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_2,
                                                                 multp(H_n_2(Nonce(~rnd_n_C2),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_2,
                                                                                               multp(~r2,
                                                                                                     'P1')),
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))),
                                                                                         multp(~sl_2,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r2,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r2,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f2,
                                                                                                                'P1')))),
                                                                                         multp(~sl_2,
                                                                                               multp(multp(~r2,
                                                                                                           ~y),
                                                                                                     multp(~f2,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_2,
                                                                                             multp(~sl_2,
                                                                                                   multp(~y,
                                                                                                         multp(~r2,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g2,
                                                                                                                          ~genP2)))))))),
                                                                       ~f2))
                                                       ) @ #vk.22 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.23 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.24 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.24 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.25 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.25 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( 'CredentialData' ) @ #vk.26 ) )
                                                    case coerce
                                                    step( solve( !KD( 'CredentialData'
                                                                 ) ▶₀ #vk.26 ) )
                                                      case Diff_DAA_CERTIFY_no_verify_case_1
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_2
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.58 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.58 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_3
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Issuer_KeyReveal
                                                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case pub
                                                    step( solve( !KU( E_S(~r_cv1_2,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))
                                                                 ) @ #vk.27 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      MIRRORED
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.28 ) )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C2 ) @ #vk.28 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_2 ) @ #vk.28 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_2 ) @ #vk.23 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_2 ) @ #vk.23 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.23 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.23 ) )
                          qed
                        next
                          case c_BSN
                          by step( solve( !KU( ~basename2 ) @ #vk.23 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case c_QPub
                  step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.20 ) )
                    case c_multp
                    by step( solve( !KU( ~g2 ) @ #vk.21 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( E_S(~r_cv1_2,
                                    multp(~sl_2, multp(~y, multp(~r2, 'P1'))))
                           ) @ #vk.10 ) )
                case Diff_DAA_CERTIFY_no_verify
                step( solve( !KU( QPub('Generic_DAA_public_data',
                                       multp(~g2, ~genP2))
                             ) @ #vk.11 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g2, ~genP2)))))
                               ) @ #vk.12 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN(~basename2) ) @ #vk.13 ) )
                      case Diff_DAA_CERTIFY_no_verify
                      step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.14 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                     ) @ #vk.15 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2,
                                                  plus(multp(~x, multp(~r2, 'P1')),
                                                       multp(multp(multp(~r2, ~x), ~y),
                                                             multp(~f2, 'P1'))))
                                       ) @ #vk.16 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2,
                                                    multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                         ) @ #vk.17 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2))))))))
                                           ) @ #vk.18 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C2),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_2,
                                                                                     multp(~r2,
                                                                                           'P1')),
                                                                               multp(~sl_2,
                                                                                     multp(~y,
                                                                                           multp(~r2,
                                                                                                 'P1'))),
                                                                               multp(~sl_2,
                                                                                     plus(multp(~x,
                                                                                                multp(~r2,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r2,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f2,
                                                                                                      'P1')))),
                                                                               multp(~sl_2,
                                                                                     multp(multp(~r2,
                                                                                                 ~y),
                                                                                           multp(~f2,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g2,
                                                                                                                ~genP2)))))))),
                                                             ~f2))
                                             ) @ #vk.19 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.20 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C2 ) @ #vk.21 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.21 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g2,
                                                                                               ~genP2)))))))
                                             ) @ #vk.21 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_2, multp(~r2, 'P1')),
                                                          multp(~sl_2, multp(~y, multp(~r2, 'P1'))),
                                                          multp(~sl_2,
                                                                plus(multp(~x, multp(~r2, 'P1')),
                                                                     multp(multp(multp(~r2, ~x),
                                                                                 ~y),
                                                                           multp(~f2, 'P1')))),
                                                          multp(~sl_2,
                                                                multp(multp(~r2, ~y),
                                                                      multp(~f2, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1')))))
                                               ) @ #vk.22 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g2,
                                                                                             ~genP2))))))
                                                 ) @ #vk.23 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C2),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_2,
                                                                                           multp(~r2,
                                                                                                 'P1')),
                                                                                     multp(~sl_2,
                                                                                           multp(~y,
                                                                                                 multp(~r2,
                                                                                                       'P1'))),
                                                                                     multp(~sl_2,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r2,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r2,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f2,
                                                                                                            'P1')))),
                                                                                     multp(~sl_2,
                                                                                           multp(multp(~r2,
                                                                                                       ~y),
                                                                                                 multp(~f2,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g2,
                                                                                                                      ~genP2)))))))),
                                                                   ~f2))
                                                   ) @ #vk.22 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.23 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.24 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.24 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.61 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.61 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.61 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.61 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.61 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            MIRRORED
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C2 ) @ #vk.25 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.25 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.21 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.21 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_2 ) @ #vk.21 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_2 ) @ #vk.21 ) )
                      qed
                    next
                      case c_BSN
                      by step( solve( !KU( ~basename2 ) @ #vk.21 ) )
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g2, ~genP2))))
                                 ) @ #vk.22 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g2, ~genP2)))
                                   ) @ #vk.24 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN(~basename2) ) @ #vk.15 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_2, multp(~r2, 'P1')) ) @ #vk.16 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_2, multp(~y, multp(~r2, 'P1')))
                                         ) @ #vk.17 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_2,
                                                      plus(multp(~x, multp(~r2, 'P1')),
                                                           multp(multp(multp(~r2, ~x), ~y),
                                                                 multp(~f2, 'P1'))))
                                           ) @ #vk.18 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_2,
                                                        multp(multp(~r2, ~y), multp(~f2, 'P1')))
                                             ) @ #vk.19 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C2),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_2,
                                                                            multp(~r2, 'P1')),
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))),
                                                                      multp(~sl_2,
                                                                            plus(multp(~x,
                                                                                       multp(~r2,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r2,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f2,
                                                                                             'P1')))),
                                                                      multp(~sl_2,
                                                                            multp(multp(~r2, ~y),
                                                                                  multp(~f2,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_2,
                                                                          multp(~sl_2,
                                                                                multp(~y,
                                                                                      multp(~r2,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g2,
                                                                                                       ~genP2))))))))
                                               ) @ #vk.20 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_2,
                                                           multp(H_n_2(Nonce(~rnd_n_C2),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_2,
                                                                                         multp(~r2,
                                                                                               'P1')),
                                                                                   multp(~sl_2,
                                                                                         multp(~y,
                                                                                               multp(~r2,
                                                                                                     'P1'))),
                                                                                   multp(~sl_2,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r2,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r2,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f2,
                                                                                                          'P1')))),
                                                                                   multp(~sl_2,
                                                                                         multp(multp(~r2,
                                                                                                     ~y),
                                                                                               multp(~f2,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_2,
                                                                                       multp(~sl_2,
                                                                                             multp(~y,
                                                                                                   multp(~r2,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g2,
                                                                                                                    ~genP2)))))))),
                                                                 ~f2))
                                                 ) @ #vk.21 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.22 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.23 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.23 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.67 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.67 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.24 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.24 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.67 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.67 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.67 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.67 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.67 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            MIRRORED
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C2 ) @ #vk.25 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.25 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_2, multp(~r2, 'P1')),
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1'))),
                                                                  multp(~sl_2,
                                                                        plus(multp(~x,
                                                                                   multp(~r2,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r2,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f2,
                                                                                         'P1')))),
                                                                  multp(~sl_2,
                                                                        multp(multp(~r2, ~y),
                                                                              multp(~f2, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_2,
                                                                            multp(~y,
                                                                                  multp(~r2,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g2,
                                                                                                   ~genP2)))))))
                                                 ) @ #vk.25 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_2, multp(~r2, 'P1')),
                                                              multp(~sl_2,
                                                                    multp(~y, multp(~r2, 'P1'))),
                                                              multp(~sl_2,
                                                                    plus(multp(~x,
                                                                               multp(~r2, 'P1')),
                                                                         multp(multp(multp(~r2, ~x),
                                                                                     ~y),
                                                                               multp(~f2, 'P1')))),
                                                              multp(~sl_2,
                                                                    multp(multp(~r2, ~y),
                                                                          multp(~f2, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_2,
                                                                        multp(~y,
                                                                              multp(~r2, 'P1')))))
                                                   ) @ #vk.26 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g2,
                                                                                                 ~genP2))))))
                                                     ) @ #vk.27 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_2,
                                                                 multp(H_n_2(Nonce(~rnd_n_C2),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_2,
                                                                                               multp(~r2,
                                                                                                     'P1')),
                                                                                         multp(~sl_2,
                                                                                               multp(~y,
                                                                                                     multp(~r2,
                                                                                                           'P1'))),
                                                                                         multp(~sl_2,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r2,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r2,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f2,
                                                                                                                'P1')))),
                                                                                         multp(~sl_2,
                                                                                               multp(multp(~r2,
                                                                                                           ~y),
                                                                                                     multp(~f2,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_2,
                                                                                             multp(~sl_2,
                                                                                                   multp(~y,
                                                                                                         multp(~r2,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g2,
                                                                                                                          ~genP2)))))))),
                                                                       ~f2))
                                                       ) @ #vk.24 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C2) ) @ #vk.25 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.26 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.26 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.58 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.27 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.27 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.58 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( 'CredentialData' ) @ #vk.28 ) )
                                                    case coerce
                                                    step( solve( !KD( 'CredentialData'
                                                                 ) ▶₀ #vk.28 ) )
                                                      case Diff_DAA_CERTIFY_no_verify_case_1
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_2
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.58 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.58 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.58 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_3
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.58 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Issuer_KeyReveal
                                                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.58 ) )
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case pub
                                                    MIRRORED
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C2 ) @ #vk.29 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_2 ) @ #vk.29 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_2 ) @ #vk.25 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_2 ) @ #vk.25 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_2 ) @ #vk.25 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_2 ) @ #vk.25 ) )
                          qed
                        next
                          case c_BSN
                          by step( solve( !KU( ~basename2 ) @ #vk.25 ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case c_QPub
                  step( solve( !KU( multp(~g2, ~genP2) ) @ #vk.22 ) )
                    case c_multp
                    by step( solve( !KU( ~g2 ) @ #vk.23 ) )
                  qed
                qed
              next
                case c_E_S
                by step( solve( !KU( ~r_cv1_2 ) @ #vk.21 ) )
              qed
            qed
          qed
        qed
      next
        case Generate_TPM_DAA_CERTIFY_case_2
        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr ) )
          case Generate_TPM_DAA_CERTIFY
          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr ) )
            case Generate_TPM_DAA_CERTIFY
            step( solve( (#vl, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case E_S
                step( solve( !KU( E_S(~r_cv1_2,
                                      multp(~sl_1, multp(~y, multp(~r1, 'P1'))))
                             ) @ #vk ) )
                  case Diff_DAA_CERTIFY_no_verify
                  MIRRORED
                next
                  case c_E_S
                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.1 ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case QPub
                  step( solve( !KU( QPub('Generic_DAA_public_data',
                                         multp(~g1, ~genP1))
                               ) @ #vk ) )
                    case Diff_DAA_CERTIFY_no_verify
                    MIRRORED
                  next
                    case c_QPub
                    step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.2 ) )
                      case c_multp
                      by step( solve( !KU( ~g1 ) @ #vk.3 ) )
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case certData
                    step( solve( !KU( certData('certificationData',
                                               QName('SHA256',
                                                     H_SHA256(QPub('Generic_DAA_public_data',
                                                                   multp(~g1, ~genP1)))))
                                 ) @ #vk ) )
                      case Diff_DAA_CERTIFY_no_verify
                      MIRRORED
                    next
                      case c_certData
                      step( solve( !KU( QName('SHA256',
                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                            multp(~g1, ~genP1))))
                                   ) @ #vk.2 ) )
                        case c_QName
                        step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                        multp(~g1, ~genP1)))
                                     ) @ #vk.4 ) )
                          case c_H_SHA256
                          step( solve( !KU( 'certificationData' ) @ #vk.3 ) )
                            case coerce
                            step( solve( !KD( 'certificationData' ) ▶₀ #vk.3 ) )
                              case Diff_DAA_CERTIFY_no_verify_case_1
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case Diff_DAA_CERTIFY_no_verify_case_2
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case Diff_DAA_CERTIFY_no_verify_case_3
                              step( solve( Shuffle_Sigmas( (
                                                            <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                             bsn1, R1, S1, T1, W1, h2_host1, 
                                                             small_s1, n_C1>+
                                                            <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                             bsn2, R2, S2, T2, W2, h2_host2, 
                                                             small_s2, n_C2>
                                                           )
                                           ) ▶₀ #vr.8 ) )
                                case Generate_TPM_DAA_CERTIFY_case_1
                                by step( contradiction /* impossible chain */ )
                              next
                                case Generate_TPM_DAA_CERTIFY_case_2
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Issuer_Init
                              by step( contradiction /* impossible chain */ )
                            next
                              case Issuer_KeyReveal
                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                                case Issuer_Init
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( 'SHA256' ) @ #vk.4 ) )
                              case coerce
                              step( solve( !KD( 'SHA256' ) ▶₀ #vk.4 ) )
                                case Diff_DAA_CERTIFY_no_verify_case_1
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case Diff_DAA_CERTIFY_no_verify_case_2
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                      case Generate_TPM_DAA_CERTIFY
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.8 ) )
                                    case Generate_TPM_DAA_CERTIFY
                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.8 ) )
                                      case Generate_TPM_DAA_CERTIFY
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case Diff_DAA_CERTIFY_no_verify_case_3
                                step( solve( Shuffle_Sigmas( (
                                                              <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                               bsn1, R1, S1, T1, W1, h2_host1, 
                                                               small_s1, n_C1>+
                                                              <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                               bsn2, R2, S2, T2, W2, h2_host2, 
                                                               small_s2, n_C2>
                                                             )
                                             ) ▶₀ #vr.8 ) )
                                  case Generate_TPM_DAA_CERTIFY_case_1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case Generate_TPM_DAA_CERTIFY_case_2
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case Issuer_Init
                                by step( contradiction /* impossible chain */ )
                              next
                                case Issuer_KeyReveal
                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.8 ) )
                                  case Issuer_Init
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( QPub('Generic_DAA_public_data',
                                                     multp(~g1, ~genP1))
                                           ) @ #vk.5 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                MIRRORED
                              next
                                case c_QPub
                                step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.7 ) )
                                  case c_multp
                                  by step( solve( !KU( ~g1 ) @ #vk.8 ) )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case BSN
                      step( solve( !KU( BSN('bottom') ) @ #vk ) )
                        case c_BSN
                        step( solve( !KU( 'bottom' ) @ #vk.1 ) )
                          case coerce
                          step( solve( !KD( 'bottom' ) ▶₀ #vk.1 ) )
                            case Diff_DAA_CERTIFY_no_verify_case_1
                            step( solve( Shuffle_Sigmas( (
                                                          <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                           bsn1, R1, S1, T1, W1, h2_host1, 
                                                           small_s1, n_C1>+
                                                          <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                           bsn2, R2, S2, T2, W2, h2_host2, 
                                                           small_s2, n_C2>
                                                         )
                                         ) ▶₀ #vr.9 ) )
                              case Generate_TPM_DAA_CERTIFY_case_1
                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.9 ) )
                                case Generate_TPM_DAA_CERTIFY
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case Generate_TPM_DAA_CERTIFY_case_2
                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.9 ) )
                                case Generate_TPM_DAA_CERTIFY
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case Diff_DAA_CERTIFY_no_verify_case_2
                            step( solve( Shuffle_Sigmas( (
                                                          <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                           bsn1, R1, S1, T1, W1, h2_host1, 
                                                           small_s1, n_C1>+
                                                          <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                           bsn2, R2, S2, T2, W2, h2_host2, 
                                                           small_s2, n_C2>
                                                         )
                                         ) ▶₀ #vr.9 ) )
                              case Generate_TPM_DAA_CERTIFY_case_1
                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.9 ) )
                                case Generate_TPM_DAA_CERTIFY
                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.9 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case Generate_TPM_DAA_CERTIFY_case_2
                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.9 ) )
                                case Generate_TPM_DAA_CERTIFY
                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.9 ) )
                                  case Generate_TPM_DAA_CERTIFY
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case Diff_DAA_CERTIFY_no_verify_case_3
                            step( solve( Shuffle_Sigmas( (
                                                          <E_S(r_cv1_1.3, S1), Qk_PD1, curlyA1, 
                                                           bsn1, R1, S1, T1, W1, h2_host1, 
                                                           small_s1, n_C1>+
                                                          <E_S(r_cv1_2.3, S2), Qk_PD2, curlyA2, 
                                                           bsn2, R2, S2, T2, W2, h2_host2, 
                                                           small_s2, n_C2>
                                                         )
                                         ) ▶₀ #vr.9 ) )
                              case Generate_TPM_DAA_CERTIFY_case_1
                              by step( contradiction /* impossible chain */ )
                            next
                              case Generate_TPM_DAA_CERTIFY_case_2
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case Issuer_Init
                            by step( contradiction /* impossible chain */ )
                          next
                            case Issuer_KeyReveal
                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.9 ) )
                              case Issuer_Init
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case multp
                        step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk ) )
                          case Diff_DAA_CERTIFY_no_verify
                          MIRRORED
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.1 ) )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                          case multp
                          step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                       ) @ #vk ) )
                            case Diff_DAA_CERTIFY_no_verify
                            MIRRORED
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                            case multp
                            step( solve( !KU( multp(~sl_1,
                                                    plus(multp(~x, multp(~r1, 'P1')),
                                                         multp(multp(multp(~r1, ~x), ~y),
                                                               multp(~f1, 'P1'))))
                                         ) @ #vk ) )
                              case Diff_DAA_CERTIFY_no_verify
                              MIRRORED
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                            case d_0_fst
                            step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                              case multp
                              step( solve( !KU( multp(~sl_1,
                                                      multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                           ) @ #vk ) )
                                case Diff_DAA_CERTIFY_no_verify
                                MIRRORED
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_1 ) @ #vk.1 ) )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                              case d_0_fst
                              step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                case H_n_2
                                step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                        H_k_2(H_k_6('CredentialData',
                                                                    multp(~sl_1, multp(~r1, 'P1')),
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))),
                                                                    multp(~sl_1,
                                                                          plus(multp(~x,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(multp(multp(~r1,
                                                                                                 ~x),
                                                                                           ~y),
                                                                                     multp(~f1,
                                                                                           'P1')))),
                                                                    multp(~sl_1,
                                                                          multp(multp(~r1, ~y),
                                                                                multp(~f1, 'P1'))),
                                                                    E_S(~r_cv1_2,
                                                                        multp(~sl_1,
                                                                              multp(~y,
                                                                                    multp(~r1,
                                                                                          'P1'))))),
                                                              H_6(certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g1,
                                                                                                     ~genP1))))))))
                                             ) @ #vk ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  MIRRORED
                                next
                                  case c_H_n_2
                                  step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                multp(~sl_1, multp(~r1, 'P1')),
                                                                multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1'))),
                                                                multp(~sl_1,
                                                                      plus(multp(~x,
                                                                                 multp(~r1, 'P1')),
                                                                           multp(multp(multp(~r1,
                                                                                             ~x),
                                                                                       ~y),
                                                                                 multp(~f1,
                                                                                       'P1')))),
                                                                multp(~sl_1,
                                                                      multp(multp(~r1, ~y),
                                                                            multp(~f1, 'P1'))),
                                                                E_S(~r_cv1_2,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1,
                                                                                      'P1'))))),
                                                          H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g1,
                                                                                                 ~genP1)))))))
                                               ) @ #vk.2 ) )
                                    case c_H_k_2
                                    step( solve( !KU( H_k_6('CredentialData',
                                                            multp(~sl_1, multp(~r1, 'P1')),
                                                            multp(~sl_1,
                                                                  multp(~y, multp(~r1, 'P1'))),
                                                            multp(~sl_1,
                                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                                       multp(multp(multp(~r1, ~x),
                                                                                   ~y),
                                                                             multp(~f1, 'P1')))),
                                                            multp(~sl_1,
                                                                  multp(multp(~r1, ~y),
                                                                        multp(~f1, 'P1'))),
                                                            E_S(~r_cv1_2,
                                                                multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))))
                                                 ) @ #vk.3 ) )
                                      case c_H_k_6
                                      step( solve( !KU( H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1))))))
                                                   ) @ #vk.4 ) )
                                        case c_H_6
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.4 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.5 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.5 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.24 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.24 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.24 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.24 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.24 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.6 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))
                                                           ) @ #vk.7 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1'))))
                                                             ) @ #vk.8 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( multp(~sl_1,
                                                                          multp(multp(~r1, ~y),
                                                                                multp(~f1, 'P1')))
                                                               ) @ #vk.9 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( E_S(~r_cv1_2,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))
                                                                 ) @ #vk.10 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      step( solve( !KU( certData('certificationData',
                                                                                 QName('SHA256',
                                                                                       H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                     multp(~g1,
                                                                                                           ~genP1)))))
                                                                   ) @ #vk.11 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_certData
                                                        step( solve( !KU( QName('SHA256',
                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                              multp(~g1,
                                                                                                    ~genP1))))
                                                                     ) @ #vk.13 ) )
                                                          case c_QName
                                                          step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g1,
                                                                                                ~genP1)))
                                                                       ) @ #vk.15 ) )
                                                            case c_H_SHA256
                                                            step( solve( !KU( 'certificationData'
                                                                         ) @ #vk.14 ) )
                                                              case coerce
                                                              step( solve( !KD( 'certificationData'
                                                                           ) ▶₀ #vk.14 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.51 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( 'SHA256'
                                                                           ) @ #vk.15 ) )
                                                                case coerce
                                                                step( solve( !KD( 'SHA256'
                                                                             ) ▶₀ #vk.15 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.51 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.51 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.51 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Issuer_KeyReveal
                                                                  step( solve( !Ltk( I, x.1, y.1
                                                                               ) ▶₀ #vr.51 ) )
                                                                    case Issuer_Init
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case pub
                                                                step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))
                                                                             ) @ #vk.16 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify
                                                                  MIRRORED
                                                                next
                                                                  case c_QPub
                                                                  step( solve( !KU( multp(~g1,
                                                                                          ~genP1)
                                                                               ) @ #vk.18 ) )
                                                                    case c_multp
                                                                    by step( solve( !KU( ~g1
                                                                                    ) @ #vk.19 ) )
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.12 ) )
                                                    qed
                                                  next
                                                    case c_multp
                                                    by step( solve( !KU( ~sl_1 ) @ #vk.12 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_1 ) @ #vk.12 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_1 ) @ #vk.12 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.12 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.12 ) )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                                case d_0_fst
                                step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
                                  case plus
                                  step( solve( !KU( plus(~r_cv1_2,
                                                         multp(H_n_2(Nonce(~rnd_n_C1),
                                                                     H_k_2(H_k_6('CredentialData',
                                                                                 multp(~sl_1,
                                                                                       multp(~r1,
                                                                                             'P1')),
                                                                                 multp(~sl_1,
                                                                                       multp(~y,
                                                                                             multp(~r1,
                                                                                                   'P1'))),
                                                                                 multp(~sl_1,
                                                                                       plus(multp(~x,
                                                                                                  multp(~r1,
                                                                                                        'P1')),
                                                                                            multp(multp(multp(~r1,
                                                                                                              ~x),
                                                                                                        ~y),
                                                                                                  multp(~f1,
                                                                                                        'P1')))),
                                                                                 multp(~sl_1,
                                                                                       multp(multp(~r1,
                                                                                                   ~y),
                                                                                             multp(~f1,
                                                                                                   'P1'))),
                                                                                 E_S(~r_cv1_2,
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))))),
                                                                           H_6(certData('certificationData',
                                                                                        QName('SHA256',
                                                                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                            multp(~g1,
                                                                                                                  ~genP1)))))))),
                                                               ~f1))
                                               ) @ #vk ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_plus
                                    by step( solve( !KU( ~r_cv1_2 ) @ #vk.1 ) )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( (#vr.14, 0) ~~> (#i, 1) ) )
                                  case Nonce
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.1 ) )
                                  qed
                                qed
                              next
                                case pair
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.1 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.2 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.3 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.3 ) )
                                qed
                              qed
                            next
                              case pair
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.2 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.3 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.4 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.5 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.5 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.5 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.6 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.7 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.6 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.7 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.8 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.8 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.33 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.33 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.33 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.33 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.33 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.9 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))
                                                           ) @ #vk.10 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1'))))
                                                             ) @ #vk.11 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( multp(~sl_1,
                                                                          multp(multp(~r1, ~y),
                                                                                multp(~f1, 'P1')))
                                                               ) @ #vk.12 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( E_S(~r_cv1_2,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))
                                                                 ) @ #vk.13 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      step( solve( !KU( certData('certificationData',
                                                                                 QName('SHA256',
                                                                                       H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                     multp(~g1,
                                                                                                           ~genP1)))))
                                                                   ) @ #vk.14 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_certData
                                                        step( solve( !KU( QName('SHA256',
                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                              multp(~g1,
                                                                                                    ~genP1))))
                                                                     ) @ #vk.16 ) )
                                                          case c_QName
                                                          step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g1,
                                                                                                ~genP1)))
                                                                       ) @ #vk.18 ) )
                                                            case c_H_SHA256
                                                            step( solve( !KU( 'certificationData'
                                                                         ) @ #vk.17 ) )
                                                              case coerce
                                                              step( solve( !KD( 'certificationData'
                                                                           ) ▶₀ #vk.17 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.60 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( 'SHA256'
                                                                           ) @ #vk.18 ) )
                                                                case coerce
                                                                step( solve( !KD( 'SHA256'
                                                                             ) ▶₀ #vk.18 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.60 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    step( solve( TPM_EK_QPD1( <
                                                                                               pk(e1), 
                                                                                               Q_PD1
                                                                                              >
                                                                                 ) ▶₁ #vr.60 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      step( solve( TPM_EK_QPD2( <
                                                                                                 pk(e2), 
                                                                                                 Q_PD2
                                                                                                >
                                                                                   ) ▶₂ #vr.60 ) )
                                                                        case Generate_TPM_DAA_CERTIFY
                                                                        by step( contradiction
                                                                                 /* impossible chain
                                                                                 */ )
                                                                      qed
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                                  step( solve( Shuffle_Sigmas( (
                                                                                                <
                                                                                                 E_S(r_cv1_1.3,
                                                                                                     S1), 
                                                                                                 Qk_PD1, 
                                                                                                 curlyA1, 
                                                                                                 bsn1, 
                                                                                                 R1, 
                                                                                                 S1, 
                                                                                                 T1, 
                                                                                                 W1, 
                                                                                                 h2_host1, 
                                                                                                 small_s1, 
                                                                                                 n_C1
                                                                                                >+
                                                                                                <
                                                                                                 E_S(r_cv1_2.3,
                                                                                                     S2), 
                                                                                                 Qk_PD2, 
                                                                                                 curlyA2, 
                                                                                                 bsn2, 
                                                                                                 R2, 
                                                                                                 S2, 
                                                                                                 T2, 
                                                                                                 W2, 
                                                                                                 h2_host2, 
                                                                                                 small_s2, 
                                                                                                 n_C2
                                                                                                >
                                                                                               )
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  next
                                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Issuer_KeyReveal
                                                                  step( solve( !Ltk( I, x.1, y.1
                                                                               ) ▶₀ #vr.60 ) )
                                                                    case Issuer_Init
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case pub
                                                                step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))
                                                                             ) @ #vk.19 ) )
                                                                  case Diff_DAA_CERTIFY_no_verify
                                                                  MIRRORED
                                                                next
                                                                  case c_QPub
                                                                  step( solve( !KU( multp(~g1,
                                                                                          ~genP1)
                                                                               ) @ #vk.21 ) )
                                                                    case c_multp
                                                                    by step( solve( !KU( ~g1
                                                                                    ) @ #vk.22 ) )
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case c_E_S
                                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.15 ) )
                                                    qed
                                                  next
                                                    case c_multp
                                                    by step( solve( !KU( ~sl_1 ) @ #vk.15 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_1 ) @ #vk.15 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_1 ) @ #vk.15 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.15 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.15 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.15 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pair
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.3 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.4 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.5 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.6 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.7 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.7 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.7 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.8 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.9 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.8 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.9 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.10 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.10 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.40 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.40 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.40 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.40 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.40 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.11 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))
                                                           ) @ #vk.12 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1'))))
                                                             ) @ #vk.13 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( E_S(~r_cv1_2,
                                                                        multp(~sl_1,
                                                                              multp(~y,
                                                                                    multp(~r1,
                                                                                          'P1'))))
                                                               ) @ #vk.14 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( certData('certificationData',
                                                                               QName('SHA256',
                                                                                     H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                   multp(~g1,
                                                                                                         ~genP1)))))
                                                                 ) @ #vk.15 ) )
                                                      case Diff_DAA_CERTIFY_no_verify
                                                      MIRRORED
                                                    next
                                                      case c_certData
                                                      step( solve( !KU( QName('SHA256',
                                                                              H_SHA256(QPub('Generic_DAA_public_data',
                                                                                            multp(~g1,
                                                                                                  ~genP1))))
                                                                   ) @ #vk.17 ) )
                                                        case c_QName
                                                        step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g1,
                                                                                              ~genP1)))
                                                                     ) @ #vk.19 ) )
                                                          case c_H_SHA256
                                                          step( solve( !KU( 'certificationData'
                                                                       ) @ #vk.18 ) )
                                                            case coerce
                                                            step( solve( !KD( 'certificationData'
                                                                         ) ▶₀ #vk.18 ) )
                                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Issuer_KeyReveal
                                                              step( solve( !Ltk( I, x.1, y.1
                                                                           ) ▶₀ #vr.59 ) )
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case pub
                                                            step( solve( !KU( 'SHA256'
                                                                         ) @ #vk.19 ) )
                                                              case coerce
                                                              step( solve( !KD( 'SHA256'
                                                                           ) ▶₀ #vk.19 ) )
                                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.59 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  step( solve( TPM_EK_QPD1( <
                                                                                             pk(e1), 
                                                                                             Q_PD1>
                                                                               ) ▶₁ #vr.59 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    step( solve( TPM_EK_QPD2( <
                                                                                               pk(e2), 
                                                                                               Q_PD2
                                                                                              >
                                                                                 ) ▶₂ #vr.59 ) )
                                                                      case Generate_TPM_DAA_CERTIFY
                                                                      by step( contradiction
                                                                               /* impossible chain
                                                                               */ )
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                                step( solve( Shuffle_Sigmas( (
                                                                                              <
                                                                                               E_S(r_cv1_1.3,
                                                                                                   S1), 
                                                                                               Qk_PD1, 
                                                                                               curlyA1, 
                                                                                               bsn1, 
                                                                                               R1, 
                                                                                               S1, 
                                                                                               T1, 
                                                                                               W1, 
                                                                                               h2_host1, 
                                                                                               small_s1, 
                                                                                               n_C1
                                                                                              >+
                                                                                              <
                                                                                               E_S(r_cv1_2.3,
                                                                                                   S2), 
                                                                                               Qk_PD2, 
                                                                                               curlyA2, 
                                                                                               bsn2, 
                                                                                               R2, 
                                                                                               S2, 
                                                                                               T2, 
                                                                                               W2, 
                                                                                               h2_host2, 
                                                                                               small_s2, 
                                                                                               n_C2>
                                                                                             )
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                next
                                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Issuer_KeyReveal
                                                                step( solve( !Ltk( I, x.1, y.1
                                                                             ) ▶₀ #vr.59 ) )
                                                                  case Issuer_Init
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case pub
                                                              step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                     multp(~g1,
                                                                                           ~genP1))
                                                                           ) @ #vk.20 ) )
                                                                case Diff_DAA_CERTIFY_no_verify
                                                                MIRRORED
                                                              next
                                                                case c_QPub
                                                                step( solve( !KU( multp(~g1, ~genP1)
                                                                             ) @ #vk.22 ) )
                                                                  case c_multp
                                                                  by step( solve( !KU( ~g1
                                                                                  ) @ #vk.23 ) )
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case c_E_S
                                                    by step( solve( !KU( ~r_cv1_2 ) @ #vk.16 ) )
                                                  qed
                                                next
                                                  case c_multp
                                                  by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.16 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.16 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.7 ) )
                            qed
                          qed
                        next
                          case pair
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.4 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.5 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.6 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.7 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.8 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.9 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.9 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.9 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.10 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.11 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.10 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.11 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.12 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.12 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.46 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.46 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.46 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.46 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.46 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.13 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( multp(~sl_1,
                                                                      multp(~y, multp(~r1, 'P1')))
                                                           ) @ #vk.14 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))
                                                             ) @ #vk.15 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  step( solve( !KU( certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g1,
                                                                                                       ~genP1)))))
                                                               ) @ #vk.16 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    MIRRORED
                                                  next
                                                    case c_certData
                                                    step( solve( !KU( QName('SHA256',
                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                          multp(~g1,
                                                                                                ~genP1))))
                                                                 ) @ #vk.18 ) )
                                                      case c_QName
                                                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g1,
                                                                                            ~genP1)))
                                                                   ) @ #vk.20 ) )
                                                        case c_H_SHA256
                                                        step( solve( !KU( 'certificationData'
                                                                     ) @ #vk.19 ) )
                                                          case coerce
                                                          step( solve( !KD( 'certificationData'
                                                                       ) ▶₀ #vk.19 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.58 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( 'SHA256' ) @ #vk.20 ) )
                                                            case coerce
                                                            step( solve( !KD( 'SHA256'
                                                                         ) ▶₀ #vk.20 ) )
                                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.58 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                           Q_PD1>
                                                                             ) ▶₁ #vr.58 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  step( solve( TPM_EK_QPD2( <
                                                                                             pk(e2), 
                                                                                             Q_PD2>
                                                                               ) ▶₂ #vr.58 ) )
                                                                    case Generate_TPM_DAA_CERTIFY
                                                                    by step( contradiction
                                                                             /* impossible chain
                                                                             */ )
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                                              step( solve( Shuffle_Sigmas( (
                                                                                            <
                                                                                             E_S(r_cv1_1.3,
                                                                                                 S1), 
                                                                                             Qk_PD1, 
                                                                                             curlyA1, 
                                                                                             bsn1, 
                                                                                             R1, 
                                                                                             S1, 
                                                                                             T1, 
                                                                                             W1, 
                                                                                             h2_host1, 
                                                                                             small_s1, 
                                                                                             n_C1>+
                                                                                            <
                                                                                             E_S(r_cv1_2.3,
                                                                                                 S2), 
                                                                                             Qk_PD2, 
                                                                                             curlyA2, 
                                                                                             bsn2, 
                                                                                             R2, 
                                                                                             S2, 
                                                                                             T2, 
                                                                                             W2, 
                                                                                             h2_host2, 
                                                                                             small_s2, 
                                                                                             n_C2>
                                                                                           )
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              next
                                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Issuer_KeyReveal
                                                              step( solve( !Ltk( I, x.1, y.1
                                                                           ) ▶₀ #vr.58 ) )
                                                                case Issuer_Init
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case pub
                                                            step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                   multp(~g1,
                                                                                         ~genP1))
                                                                         ) @ #vk.21 ) )
                                                              case Diff_DAA_CERTIFY_no_verify
                                                              MIRRORED
                                                            next
                                                              case c_QPub
                                                              step( solve( !KU( multp(~g1, ~genP1)
                                                                           ) @ #vk.23 ) )
                                                                case c_multp
                                                                by step( solve( !KU( ~g1
                                                                                ) @ #vk.24 ) )
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case c_E_S
                                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.17 ) )
                                                qed
                                              next
                                                case c_multp
                                                by step( solve( !KU( ~sl_1 ) @ #vk.17 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.17 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.17 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.17 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.9 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.9 ) )
                          qed
                        qed
                      next
                        case pair
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.5 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.6 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.7 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.8 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.9 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.10 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.11 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.11 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.11 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.12 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.13 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.12 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.13 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.14 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.14 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.51 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.51 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.51 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.51 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.51 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( multp(~sl_1, multp(~r1, 'P1'))
                                                         ) @ #vk.15 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( E_S(~r_cv1_2,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))))
                                                           ) @ #vk.16 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g1,
                                                                                                     ~genP1)))))
                                                             ) @ #vk.17 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  MIRRORED
                                                next
                                                  case c_certData
                                                  step( solve( !KU( QName('SHA256',
                                                                          H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g1,
                                                                                              ~genP1))))
                                                               ) @ #vk.19 ) )
                                                    case c_QName
                                                    step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                    multp(~g1,
                                                                                          ~genP1)))
                                                                 ) @ #vk.21 ) )
                                                      case c_H_SHA256
                                                      step( solve( !KU( 'certificationData'
                                                                   ) @ #vk.20 ) )
                                                        case coerce
                                                        step( solve( !KD( 'certificationData'
                                                                     ) ▶₀ #vk.20 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.57 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( 'SHA256' ) @ #vk.21 ) )
                                                          case coerce
                                                          step( solve( !KD( 'SHA256' ) ▶₀ #vk.21 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.57 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.57 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.57 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.57 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                 multp(~g1, ~genP1))
                                                                       ) @ #vk.22 ) )
                                                            case Diff_DAA_CERTIFY_no_verify
                                                            MIRRORED
                                                          next
                                                            case c_QPub
                                                            step( solve( !KU( multp(~g1, ~genP1)
                                                                         ) @ #vk.24 ) )
                                                              case c_multp
                                                              by step( solve( !KU( ~g1
                                                                              ) @ #vk.25 ) )
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_2 ) @ #vk.18 ) )
                                              qed
                                            next
                                              case c_multp
                                              by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.18 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.18 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.11 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.11 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.11 ) )
                        qed
                      qed
                    next
                      case pair
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.6 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.7 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.8 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.9 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.10 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.11 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.12 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    MIRRORED
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.13 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.13 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.13 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.14 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.15 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.14 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.15 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'CredentialData' ) @ #vk.16 ) )
                                            case coerce
                                            step( solve( !KD( 'CredentialData' ) ▶₀ #vk.16 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.55 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.55 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.55 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.55 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.55 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))
                                                         ) @ #vk.17 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1)))))
                                                           ) @ #vk.18 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_certData
                                                step( solve( !KU( QName('SHA256',
                                                                        H_SHA256(QPub('Generic_DAA_public_data',
                                                                                      multp(~g1,
                                                                                            ~genP1))))
                                                             ) @ #vk.20 ) )
                                                  case c_QName
                                                  step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                  multp(~g1,
                                                                                        ~genP1)))
                                                               ) @ #vk.22 ) )
                                                    case c_H_SHA256
                                                    step( solve( !KU( 'certificationData'
                                                                 ) @ #vk.21 ) )
                                                      case coerce
                                                      step( solve( !KD( 'certificationData'
                                                                   ) ▶₀ #vk.21 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.56 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( 'SHA256' ) @ #vk.22 ) )
                                                        case coerce
                                                        step( solve( !KD( 'SHA256' ) ▶₀ #vk.22 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.56 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.56 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.56 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.56 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                               multp(~g1, ~genP1))
                                                                     ) @ #vk.23 ) )
                                                          case Diff_DAA_CERTIFY_no_verify
                                                          MIRRORED
                                                        next
                                                          case c_QPub
                                                          step( solve( !KU( multp(~g1, ~genP1)
                                                                       ) @ #vk.25 ) )
                                                            case c_multp
                                                            by step( solve( !KU( ~g1 ) @ #vk.26 ) )
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_E_S
                                              by step( solve( !KU( ~r_cv1_2 ) @ #vk.19 ) )
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.19 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.19 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.13 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.13 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.13 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.13 ) )
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( BSN('bottom') ) @ #vk.7 ) )
                      case c_BSN
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.8 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.9 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.10 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.11 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.12 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.13 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.14 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( 'bottom' ) @ #vk.15 ) )
                                      case coerce
                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.15 ) )
                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.63 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.63 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.63 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.63 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.63 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.63 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.63 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case Issuer_Init
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case Issuer_KeyReveal
                                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                          case Issuer_Init
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case pub
                                      MIRRORED
                                    qed
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.16 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.16 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.16 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.17 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.18 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.16 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.17 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'bottom' ) @ #vk.18 ) )
                                            case coerce
                                            step( solve( !KD( 'bottom' ) ▶₀ #vk.18 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.54 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.54 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.54 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'CredentialData' ) @ #vk.19 ) )
                                              case coerce
                                              step( solve( !KD( 'CredentialData' ) ▶₀ #vk.19 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.54 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              step( solve( !KU( E_S(~r_cv1_2,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))))
                                                           ) @ #vk.20 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                step( solve( !KU( certData('certificationData',
                                                                           QName('SHA256',
                                                                                 H_SHA256(QPub('Generic_DAA_public_data',
                                                                                               multp(~g1,
                                                                                                     ~genP1)))))
                                                             ) @ #vk.21 ) )
                                                  case Diff_DAA_CERTIFY_no_verify
                                                  MIRRORED
                                                next
                                                  case c_certData
                                                  step( solve( !KU( QName('SHA256',
                                                                          H_SHA256(QPub('Generic_DAA_public_data',
                                                                                        multp(~g1,
                                                                                              ~genP1))))
                                                               ) @ #vk.23 ) )
                                                    case c_QName
                                                    step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                                                    multp(~g1,
                                                                                          ~genP1)))
                                                                 ) @ #vk.25 ) )
                                                      case c_H_SHA256
                                                      step( solve( !KU( 'certificationData'
                                                                   ) @ #vk.24 ) )
                                                        case coerce
                                                        step( solve( !KD( 'certificationData'
                                                                     ) ▶₀ #vk.24 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( 'SHA256' ) @ #vk.25 ) )
                                                          case coerce
                                                          step( solve( !KD( 'SHA256' ) ▶₀ #vk.25 ) )
                                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.55 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              step( solve( TPM_EK_QPD1( <pk(e1), 
                                                                                         Q_PD1>
                                                                           ) ▶₁ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                           Q_PD2>
                                                                             ) ▶₂ #vr.55 ) )
                                                                  case Generate_TPM_DAA_CERTIFY
                                                                  by step( contradiction
                                                                           /* impossible chain */ )
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                                            step( solve( Shuffle_Sigmas( (
                                                                                          <
                                                                                           E_S(r_cv1_1.3,
                                                                                               S1), 
                                                                                           Qk_PD1, 
                                                                                           curlyA1, 
                                                                                           bsn1, 
                                                                                           R1, S1, 
                                                                                           T1, W1, 
                                                                                           h2_host1, 
                                                                                           small_s1, 
                                                                                           n_C1>+
                                                                                          <
                                                                                           E_S(r_cv1_2.3,
                                                                                               S2), 
                                                                                           Qk_PD2, 
                                                                                           curlyA2, 
                                                                                           bsn2, 
                                                                                           R2, S2, 
                                                                                           T2, W2, 
                                                                                           h2_host2, 
                                                                                           small_s2, 
                                                                                           n_C2>
                                                                                         )
                                                                         ) ▶₀ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY_case_1
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            next
                                                              case Generate_TPM_DAA_CERTIFY_case_2
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Issuer_KeyReveal
                                                            step( solve( !Ltk( I, x.1, y.1
                                                                         ) ▶₀ #vr.55 ) )
                                                              case Issuer_Init
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case pub
                                                          step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                                 multp(~g1, ~genP1))
                                                                       ) @ #vk.26 ) )
                                                            case Diff_DAA_CERTIFY_no_verify
                                                            MIRRORED
                                                          next
                                                            case c_QPub
                                                            step( solve( !KU( multp(~g1, ~genP1)
                                                                         ) @ #vk.28 ) )
                                                              case c_multp
                                                              by step( solve( !KU( ~g1
                                                                              ) @ #vk.29 ) )
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_2 ) @ #vk.22 ) )
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.22 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.22 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.16 ) )
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g1, ~genP1)))))
                               ) @ #vk.8 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN('bottom') ) @ #vk.9 ) )
                      case c_BSN
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.10 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.11 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.12 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.13 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.14 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.15 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.16 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( 'bottom' ) @ #vk.17 ) )
                                      case coerce
                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.17 ) )
                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.65 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.65 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.65 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.65 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.65 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.65 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.65 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.65 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.65 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case Issuer_Init
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case Issuer_KeyReveal
                                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.65 ) )
                                          case Issuer_Init
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case pub
                                      MIRRORED
                                    qed
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.18 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.18 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.18 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.19 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.20 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.18 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.19 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'bottom' ) @ #vk.20 ) )
                                            case coerce
                                            step( solve( !KD( 'bottom' ) ▶₀ #vk.20 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.56 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.56 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.56 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.56 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'CredentialData' ) @ #vk.21 ) )
                                              case coerce
                                              step( solve( !KD( 'CredentialData' ) ▶₀ #vk.21 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.56 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.56 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.56 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.56 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.56 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              step( solve( !KU( E_S(~r_cv1_2,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))))
                                                           ) @ #vk.22 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_2 ) @ #vk.23 ) )
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.23 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.23 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.18 ) )
                      qed
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g1, ~genP1))))
                                 ) @ #vk.18 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g1, ~genP1)))
                                   ) @ #vk.20 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN('bottom') ) @ #vk.11 ) )
                          case c_BSN
                          step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.12 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                         ) @ #vk.13 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_1,
                                                      plus(multp(~x, multp(~r1, 'P1')),
                                                           multp(multp(multp(~r1, ~x), ~y),
                                                                 multp(~f1, 'P1'))))
                                           ) @ #vk.14 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_1,
                                                        multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                             ) @ #vk.15 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_1,
                                                                            multp(~r1, 'P1')),
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))),
                                                                      multp(~sl_1,
                                                                            plus(multp(~x,
                                                                                       multp(~r1,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r1,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f1,
                                                                                             'P1')))),
                                                                      multp(~sl_1,
                                                                            multp(multp(~r1, ~y),
                                                                                  multp(~f1,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_2,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g1,
                                                                                                       ~genP1))))))))
                                               ) @ #vk.16 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_2,
                                                           multp(H_n_2(Nonce(~rnd_n_C1),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_1,
                                                                                         multp(~r1,
                                                                                               'P1')),
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))),
                                                                                   multp(~sl_1,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r1,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r1,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f1,
                                                                                                          'P1')))),
                                                                                   multp(~sl_1,
                                                                                         multp(multp(~r1,
                                                                                                     ~y),
                                                                                               multp(~f1,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_2,
                                                                                       multp(~sl_1,
                                                                                             multp(~y,
                                                                                                   multp(~r1,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g1,
                                                                                                                    ~genP1)))))))),
                                                                 ~f1))
                                                 ) @ #vk.17 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.18 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.19 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.19 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.62 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.62 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.62 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.62 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.20 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.20 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.62 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.62 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.62 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.62 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.62 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                   multp(~g1, ~genP1))
                                                         ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'bottom' ) @ #vk.22 ) )
                                                case coerce
                                                step( solve( !KD( 'bottom' ) ▶₀ #vk.22 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.64 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.64 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.64 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.64 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.64 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.64 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.64 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.64 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.64 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.64 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                MIRRORED
                                              qed
                                            next
                                              case c_QPub
                                              step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.24 ) )
                                                case c_multp
                                                by step( solve( !KU( ~g1 ) @ #vk.25 ) )
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C1 ) @ #vk.23 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.23 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1)))))))
                                                 ) @ #vk.23 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1')))))
                                                   ) @ #vk.24 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g1,
                                                                                                 ~genP1))))))
                                                     ) @ #vk.25 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_2,
                                                                 multp(H_n_2(Nonce(~rnd_n_C1),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_1,
                                                                                               multp(~r1,
                                                                                                     'P1')),
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))),
                                                                                         multp(~sl_1,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r1,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r1,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f1,
                                                                                                                'P1')))),
                                                                                         multp(~sl_1,
                                                                                               multp(multp(~r1,
                                                                                                           ~y),
                                                                                                     multp(~f1,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_2,
                                                                                             multp(~sl_1,
                                                                                                   multp(~y,
                                                                                                         multp(~r1,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g1,
                                                                                                                          ~genP1)))))))),
                                                                       ~f1))
                                                       ) @ #vk.20 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.21 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.22 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.22 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.53 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.53 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.53 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.53 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.23 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.23 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.53 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.53 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.53 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.53 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.53 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( QPub('Generic_DAA_public_data',
                                                                         multp(~g1, ~genP1))
                                                               ) @ #vk.24 ) )
                                                    case Diff_DAA_CERTIFY_no_verify
                                                    step( solve( !KU( 'bottom' ) @ #vk.25 ) )
                                                      case coerce
                                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.25 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.55 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.55 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.55 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.55 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( 'CredentialData'
                                                                   ) @ #vk.26 ) )
                                                        case coerce
                                                        step( solve( !KD( 'CredentialData'
                                                                     ) ▶₀ #vk.26 ) )
                                                          case Diff_DAA_CERTIFY_no_verify_case_1
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_2
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1
                                                                                      >
                                                                         ) ▶₁ #vr.55 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              step( solve( TPM_EK_QPD2( <pk(e2), 
                                                                                         Q_PD2>
                                                                           ) ▶₂ #vr.55 ) )
                                                                case Generate_TPM_DAA_CERTIFY
                                                                by step( contradiction
                                                                         /* impossible chain */ )
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case Diff_DAA_CERTIFY_no_verify_case_3
                                                          step( solve( Shuffle_Sigmas( (
                                                                                        <
                                                                                         E_S(r_cv1_1.3,
                                                                                             S1), 
                                                                                         Qk_PD1, 
                                                                                         curlyA1, 
                                                                                         bsn1, R1, 
                                                                                         S1, T1, 
                                                                                         W1, 
                                                                                         h2_host1, 
                                                                                         small_s1, 
                                                                                         n_C1>+
                                                                                        <
                                                                                         E_S(r_cv1_2.3,
                                                                                             S2), 
                                                                                         Qk_PD2, 
                                                                                         curlyA2, 
                                                                                         bsn2, R2, 
                                                                                         S2, T2, 
                                                                                         W2, 
                                                                                         h2_host2, 
                                                                                         small_s2, 
                                                                                         n_C2>
                                                                                       )
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Generate_TPM_DAA_CERTIFY_case_1
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          next
                                                            case Generate_TPM_DAA_CERTIFY_case_2
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Issuer_KeyReveal
                                                          step( solve( !Ltk( I, x.1, y.1
                                                                       ) ▶₀ #vr.55 ) )
                                                            case Issuer_Init
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case pub
                                                        step( solve( !KU( E_S(~r_cv1_2,
                                                                              multp(~sl_1,
                                                                                    multp(~y,
                                                                                          multp(~r1,
                                                                                                'P1'))))
                                                                     ) @ #vk.27 ) )
                                                          case Diff_DAA_CERTIFY_no_verify
                                                          MIRRORED
                                                        next
                                                          case c_E_S
                                                          by step( solve( !KU( ~r_cv1_2
                                                                          ) @ #vk.28 ) )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case c_QPub
                                                    step( solve( !KU( multp(~g1, ~genP1)
                                                                 ) @ #vk.29 ) )
                                                      case c_multp
                                                      by step( solve( !KU( ~g1 ) @ #vk.30 ) )
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C1 ) @ #vk.28 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_2 ) @ #vk.28 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_1 ) @ #vk.23 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_1 ) @ #vk.23 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.23 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.23 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( QPub('Generic_DAA_public_data',
                                       multp(~g1, ~genP1))
                             ) @ #vk.9 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g1, ~genP1)))))
                               ) @ #vk.10 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN('bottom') ) @ #vk.11 ) )
                      case c_BSN
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.12 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.13 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.14 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.15 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.16 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.17 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.18 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( 'bottom' ) @ #vk.19 ) )
                                      case coerce
                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.19 ) )
                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case Issuer_Init
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case Issuer_KeyReveal
                                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.66 ) )
                                          case Issuer_Init
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case pub
                                      MIRRORED
                                    qed
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.20 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.20 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.20 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.21 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.22 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.20 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.21 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'bottom' ) @ #vk.22 ) )
                                            case coerce
                                            step( solve( !KD( 'bottom' ) ▶₀ #vk.22 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'CredentialData' ) @ #vk.23 ) )
                                              case coerce
                                              step( solve( !KD( 'CredentialData' ) ▶₀ #vk.23 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              step( solve( !KU( E_S(~r_cv1_2,
                                                                    multp(~sl_1,
                                                                          multp(~y,
                                                                                multp(~r1, 'P1'))))
                                                           ) @ #vk.24 ) )
                                                case Diff_DAA_CERTIFY_no_verify
                                                MIRRORED
                                              next
                                                case c_E_S
                                                by step( solve( !KU( ~r_cv1_2 ) @ #vk.25 ) )
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.25 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.25 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.20 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.20 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.20 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.20 ) )
                      qed
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g1, ~genP1))))
                                 ) @ #vk.20 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g1, ~genP1)))
                                   ) @ #vk.22 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN('bottom') ) @ #vk.13 ) )
                          case c_BSN
                          step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.14 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                         ) @ #vk.15 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_1,
                                                      plus(multp(~x, multp(~r1, 'P1')),
                                                           multp(multp(multp(~r1, ~x), ~y),
                                                                 multp(~f1, 'P1'))))
                                           ) @ #vk.16 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_1,
                                                        multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                             ) @ #vk.17 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_1,
                                                                            multp(~r1, 'P1')),
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))),
                                                                      multp(~sl_1,
                                                                            plus(multp(~x,
                                                                                       multp(~r1,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r1,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f1,
                                                                                             'P1')))),
                                                                      multp(~sl_1,
                                                                            multp(multp(~r1, ~y),
                                                                                  multp(~f1,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_2,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g1,
                                                                                                       ~genP1))))))))
                                               ) @ #vk.18 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_2,
                                                           multp(H_n_2(Nonce(~rnd_n_C1),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_1,
                                                                                         multp(~r1,
                                                                                               'P1')),
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))),
                                                                                   multp(~sl_1,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r1,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r1,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f1,
                                                                                                          'P1')))),
                                                                                   multp(~sl_1,
                                                                                         multp(multp(~r1,
                                                                                                     ~y),
                                                                                               multp(~f1,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_2,
                                                                                       multp(~sl_1,
                                                                                             multp(~y,
                                                                                                   multp(~r1,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g1,
                                                                                                                    ~genP1)))))))),
                                                                 ~f1))
                                                 ) @ #vk.19 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.20 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.21 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.21 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.22 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.22 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'bottom' ) @ #vk.23 ) )
                                              case coerce
                                              step( solve( !KD( 'bottom' ) ▶₀ #vk.23 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.63 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.63 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              MIRRORED
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C1 ) @ #vk.24 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.24 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1)))))))
                                                 ) @ #vk.24 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1')))))
                                                   ) @ #vk.25 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g1,
                                                                                                 ~genP1))))))
                                                     ) @ #vk.26 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_2,
                                                                 multp(H_n_2(Nonce(~rnd_n_C1),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_1,
                                                                                               multp(~r1,
                                                                                                     'P1')),
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))),
                                                                                         multp(~sl_1,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r1,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r1,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f1,
                                                                                                                'P1')))),
                                                                                         multp(~sl_1,
                                                                                               multp(multp(~r1,
                                                                                                           ~y),
                                                                                                     multp(~f1,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_2,
                                                                                             multp(~sl_1,
                                                                                                   multp(~y,
                                                                                                         multp(~r1,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g1,
                                                                                                                          ~genP1)))))))),
                                                                       ~f1))
                                                       ) @ #vk.22 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.23 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.24 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.24 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.25 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.25 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( 'bottom' ) @ #vk.26 ) )
                                                    case coerce
                                                    step( solve( !KD( 'bottom' ) ▶₀ #vk.26 ) )
                                                      case Diff_DAA_CERTIFY_no_verify_case_1
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_2
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_3
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Issuer_KeyReveal
                                                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case pub
                                                    step( solve( !KU( 'CredentialData'
                                                                 ) @ #vk.27 ) )
                                                      case coerce
                                                      step( solve( !KD( 'CredentialData'
                                                                   ) ▶₀ #vk.27 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.54 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.54 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      step( solve( !KU( E_S(~r_cv1_2,
                                                                            multp(~sl_1,
                                                                                  multp(~y,
                                                                                        multp(~r1,
                                                                                              'P1'))))
                                                                   ) @ #vk.28 ) )
                                                        case Diff_DAA_CERTIFY_no_verify
                                                        MIRRORED
                                                      next
                                                        case c_E_S
                                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.29 ) )
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C1 ) @ #vk.29 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_2 ) @ #vk.29 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_1 ) @ #vk.24 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_1 ) @ #vk.24 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.24 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.24 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_QPub
                  step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.20 ) )
                    case c_multp
                    by step( solve( !KU( ~g1 ) @ #vk.21 ) )
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( E_S(~r_cv1_2,
                                    multp(~sl_1, multp(~y, multp(~r1, 'P1'))))
                           ) @ #vk.10 ) )
                case Diff_DAA_CERTIFY_no_verify
                step( solve( !KU( QPub('Generic_DAA_public_data',
                                       multp(~g1, ~genP1))
                             ) @ #vk.11 ) )
                  case Diff_DAA_CERTIFY_no_verify
                  step( solve( !KU( certData('certificationData',
                                             QName('SHA256',
                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                 multp(~g1, ~genP1)))))
                               ) @ #vk.12 ) )
                    case Diff_DAA_CERTIFY_no_verify
                    step( solve( !KU( BSN('bottom') ) @ #vk.13 ) )
                      case c_BSN
                      step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.14 ) )
                        case Diff_DAA_CERTIFY_no_verify
                        step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                     ) @ #vk.15 ) )
                          case Diff_DAA_CERTIFY_no_verify
                          step( solve( !KU( multp(~sl_1,
                                                  plus(multp(~x, multp(~r1, 'P1')),
                                                       multp(multp(multp(~r1, ~x), ~y),
                                                             multp(~f1, 'P1'))))
                                       ) @ #vk.16 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1,
                                                    multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                         ) @ #vk.17 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                      H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1))))))))
                                           ) @ #vk.18 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( plus(~r_cv1_2,
                                                       multp(H_n_2(Nonce(~rnd_n_C1),
                                                                   H_k_2(H_k_6('CredentialData',
                                                                               multp(~sl_1,
                                                                                     multp(~r1,
                                                                                           'P1')),
                                                                               multp(~sl_1,
                                                                                     multp(~y,
                                                                                           multp(~r1,
                                                                                                 'P1'))),
                                                                               multp(~sl_1,
                                                                                     plus(multp(~x,
                                                                                                multp(~r1,
                                                                                                      'P1')),
                                                                                          multp(multp(multp(~r1,
                                                                                                            ~x),
                                                                                                      ~y),
                                                                                                multp(~f1,
                                                                                                      'P1')))),
                                                                               multp(~sl_1,
                                                                                     multp(multp(~r1,
                                                                                                 ~y),
                                                                                           multp(~f1,
                                                                                                 'P1'))),
                                                                               E_S(~r_cv1_2,
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))))),
                                                                         H_6(certData('certificationData',
                                                                                      QName('SHA256',
                                                                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                          multp(~g1,
                                                                                                                ~genP1)))))))),
                                                             ~f1))
                                             ) @ #vk.19 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.20 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( 'bottom' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'bottom' ) ▶₀ #vk.21 ) )
                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.66 ) )
                                            case Generate_TPM_DAA_CERTIFY
                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                         ) ▶₂ #vr.66 ) )
                                              case Generate_TPM_DAA_CERTIFY
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                        step( solve( Shuffle_Sigmas( (
                                                                      <E_S(r_cv1_1.3, S1), Qk_PD1, 
                                                                       curlyA1, bsn1, R1, S1, T1, 
                                                                       W1, h2_host1, small_s1, n_C1
                                                                      >+
                                                                      <E_S(r_cv1_2.3, S2), Qk_PD2, 
                                                                       curlyA2, bsn2, R2, S2, T2, 
                                                                       W2, h2_host2, small_s2, n_C2>
                                                                     )
                                                     ) ▶₀ #vr.66 ) )
                                          case Generate_TPM_DAA_CERTIFY_case_1
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case Generate_TPM_DAA_CERTIFY_case_2
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case Issuer_Init
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case Issuer_KeyReveal
                                        step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.66 ) )
                                          case Issuer_Init
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case pub
                                      MIRRORED
                                    qed
                                  next
                                    case c_Nonce
                                    by step( solve( !KU( ~rnd_n_C1 ) @ #vk.22 ) )
                                  qed
                                next
                                  case c_plus
                                  by step( solve( !KU( ~r_cv1_2 ) @ #vk.22 ) )
                                qed
                              next
                                case c_H_n_2
                                step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))))),
                                                        H_6(certData('certificationData',
                                                                     QName('SHA256',
                                                                           H_SHA256(QPub('Generic_DAA_public_data',
                                                                                         multp(~g1,
                                                                                               ~genP1)))))))
                                             ) @ #vk.22 ) )
                                  case c_H_k_2
                                  step( solve( !KU( H_k_6('CredentialData',
                                                          multp(~sl_1, multp(~r1, 'P1')),
                                                          multp(~sl_1, multp(~y, multp(~r1, 'P1'))),
                                                          multp(~sl_1,
                                                                plus(multp(~x, multp(~r1, 'P1')),
                                                                     multp(multp(multp(~r1, ~x),
                                                                                 ~y),
                                                                           multp(~f1, 'P1')))),
                                                          multp(~sl_1,
                                                                multp(multp(~r1, ~y),
                                                                      multp(~f1, 'P1'))),
                                                          E_S(~r_cv1_2,
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1')))))
                                               ) @ #vk.23 ) )
                                    case c_H_k_6
                                    step( solve( !KU( H_6(certData('certificationData',
                                                                   QName('SHA256',
                                                                         H_SHA256(QPub('Generic_DAA_public_data',
                                                                                       multp(~g1,
                                                                                             ~genP1))))))
                                                 ) @ #vk.24 ) )
                                      case c_H_6
                                      step( solve( !KU( plus(~r_cv1_2,
                                                             multp(H_n_2(Nonce(~rnd_n_C1),
                                                                         H_k_2(H_k_6('CredentialData',
                                                                                     multp(~sl_1,
                                                                                           multp(~r1,
                                                                                                 'P1')),
                                                                                     multp(~sl_1,
                                                                                           multp(~y,
                                                                                                 multp(~r1,
                                                                                                       'P1'))),
                                                                                     multp(~sl_1,
                                                                                           plus(multp(~x,
                                                                                                      multp(~r1,
                                                                                                            'P1')),
                                                                                                multp(multp(multp(~r1,
                                                                                                                  ~x),
                                                                                                            ~y),
                                                                                                      multp(~f1,
                                                                                                            'P1')))),
                                                                                     multp(~sl_1,
                                                                                           multp(multp(~r1,
                                                                                                       ~y),
                                                                                                 multp(~f1,
                                                                                                       'P1'))),
                                                                                     E_S(~r_cv1_2,
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))))),
                                                                               H_6(certData('certificationData',
                                                                                            QName('SHA256',
                                                                                                  H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                multp(~g1,
                                                                                                                      ~genP1)))))))),
                                                                   ~f1))
                                                   ) @ #vk.22 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.23 ) )
                                          case Diff_DAA_CERTIFY_no_verify
                                          step( solve( !KU( 'bottom' ) @ #vk.24 ) )
                                            case coerce
                                            step( solve( !KD( 'bottom' ) ▶₀ #vk.24 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.57 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'CredentialData' ) @ #vk.25 ) )
                                              case coerce
                                              step( solve( !KD( 'CredentialData' ) ▶₀ #vk.25 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.57 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.57 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.57 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.57 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              MIRRORED
                                            qed
                                          qed
                                        next
                                          case c_Nonce
                                          by step( solve( !KU( ~rnd_n_C1 ) @ #vk.26 ) )
                                        qed
                                      next
                                        case c_plus
                                        by step( solve( !KU( ~r_cv1_2 ) @ #vk.26 ) )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.22 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.22 ) )
                          qed
                        next
                          case c_multp
                          by step( solve( !KU( ~sl_1 ) @ #vk.22 ) )
                        qed
                      next
                        case c_multp
                        by step( solve( !KU( ~sl_1 ) @ #vk.22 ) )
                      qed
                    qed
                  next
                    case c_certData
                    step( solve( !KU( QName('SHA256',
                                            H_SHA256(QPub('Generic_DAA_public_data',
                                                          multp(~g1, ~genP1))))
                                 ) @ #vk.22 ) )
                      case c_QName
                      step( solve( !KU( H_SHA256(QPub('Generic_DAA_public_data',
                                                      multp(~g1, ~genP1)))
                                   ) @ #vk.24 ) )
                        case c_H_SHA256
                        step( solve( !KU( BSN('bottom') ) @ #vk.15 ) )
                          case c_BSN
                          step( solve( !KU( multp(~sl_1, multp(~r1, 'P1')) ) @ #vk.16 ) )
                            case Diff_DAA_CERTIFY_no_verify
                            step( solve( !KU( multp(~sl_1, multp(~y, multp(~r1, 'P1')))
                                         ) @ #vk.17 ) )
                              case Diff_DAA_CERTIFY_no_verify
                              step( solve( !KU( multp(~sl_1,
                                                      plus(multp(~x, multp(~r1, 'P1')),
                                                           multp(multp(multp(~r1, ~x), ~y),
                                                                 multp(~f1, 'P1'))))
                                           ) @ #vk.18 ) )
                                case Diff_DAA_CERTIFY_no_verify
                                step( solve( !KU( multp(~sl_1,
                                                        multp(multp(~r1, ~y), multp(~f1, 'P1')))
                                             ) @ #vk.19 ) )
                                  case Diff_DAA_CERTIFY_no_verify
                                  step( solve( !KU( H_n_2(Nonce(~rnd_n_C1),
                                                          H_k_2(H_k_6('CredentialData',
                                                                      multp(~sl_1,
                                                                            multp(~r1, 'P1')),
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))),
                                                                      multp(~sl_1,
                                                                            plus(multp(~x,
                                                                                       multp(~r1,
                                                                                             'P1')),
                                                                                 multp(multp(multp(~r1,
                                                                                                   ~x),
                                                                                             ~y),
                                                                                       multp(~f1,
                                                                                             'P1')))),
                                                                      multp(~sl_1,
                                                                            multp(multp(~r1, ~y),
                                                                                  multp(~f1,
                                                                                        'P1'))),
                                                                      E_S(~r_cv1_2,
                                                                          multp(~sl_1,
                                                                                multp(~y,
                                                                                      multp(~r1,
                                                                                            'P1'))))),
                                                                H_6(certData('certificationData',
                                                                             QName('SHA256',
                                                                                   H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                 multp(~g1,
                                                                                                       ~genP1))))))))
                                               ) @ #vk.20 ) )
                                    case Diff_DAA_CERTIFY_no_verify
                                    step( solve( !KU( plus(~r_cv1_2,
                                                           multp(H_n_2(Nonce(~rnd_n_C1),
                                                                       H_k_2(H_k_6('CredentialData',
                                                                                   multp(~sl_1,
                                                                                         multp(~r1,
                                                                                               'P1')),
                                                                                   multp(~sl_1,
                                                                                         multp(~y,
                                                                                               multp(~r1,
                                                                                                     'P1'))),
                                                                                   multp(~sl_1,
                                                                                         plus(multp(~x,
                                                                                                    multp(~r1,
                                                                                                          'P1')),
                                                                                              multp(multp(multp(~r1,
                                                                                                                ~x),
                                                                                                          ~y),
                                                                                                    multp(~f1,
                                                                                                          'P1')))),
                                                                                   multp(~sl_1,
                                                                                         multp(multp(~r1,
                                                                                                     ~y),
                                                                                               multp(~f1,
                                                                                                     'P1'))),
                                                                                   E_S(~r_cv1_2,
                                                                                       multp(~sl_1,
                                                                                             multp(~y,
                                                                                                   multp(~r1,
                                                                                                         'P1'))))),
                                                                             H_6(certData('certificationData',
                                                                                          QName('SHA256',
                                                                                                H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                              multp(~g1,
                                                                                                                    ~genP1)))))))),
                                                                 ~f1))
                                                 ) @ #vk.21 ) )
                                      case Diff_DAA_CERTIFY_no_verify
                                      step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.22 ) )
                                        case Diff_DAA_CERTIFY_no_verify
                                        step( solve( !KU( 'certificationData' ) @ #vk.23 ) )
                                          case coerce
                                          step( solve( !KD( 'certificationData' ) ▶₀ #vk.23 ) )
                                            case Diff_DAA_CERTIFY_no_verify_case_1
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_2
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                           ) ▶₁ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY
                                                step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                             ) ▶₂ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          next
                                            case Diff_DAA_CERTIFY_no_verify_case_3
                                            step( solve( Shuffle_Sigmas( (
                                                                          <E_S(r_cv1_1.3, S1), 
                                                                           Qk_PD1, curlyA1, bsn1, 
                                                                           R1, S1, T1, W1, 
                                                                           h2_host1, small_s1, n_C1
                                                                          >+
                                                                          <E_S(r_cv1_2.3, S2), 
                                                                           Qk_PD2, curlyA2, bsn2, 
                                                                           R2, S2, T2, W2, 
                                                                           h2_host2, small_s2, n_C2>
                                                                         )
                                                         ) ▶₀ #vr.63 ) )
                                              case Generate_TPM_DAA_CERTIFY_case_1
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Generate_TPM_DAA_CERTIFY_case_2
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case Issuer_Init
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case Issuer_KeyReveal
                                            step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( 'SHA256' ) @ #vk.24 ) )
                                            case coerce
                                            step( solve( !KD( 'SHA256' ) ▶₀ #vk.24 ) )
                                              case Diff_DAA_CERTIFY_no_verify_case_1
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_2
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                             ) ▶₁ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY
                                                  step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                               ) ▶₂ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              qed
                                            next
                                              case Diff_DAA_CERTIFY_no_verify_case_3
                                              step( solve( Shuffle_Sigmas( (
                                                                            <E_S(r_cv1_1.3, S1), 
                                                                             Qk_PD1, curlyA1, bsn1, 
                                                                             R1, S1, T1, W1, 
                                                                             h2_host1, small_s1, 
                                                                             n_C1>+
                                                                            <E_S(r_cv1_2.3, S2), 
                                                                             Qk_PD2, curlyA2, bsn2, 
                                                                             R2, S2, T2, W2, 
                                                                             h2_host2, small_s2, 
                                                                             n_C2>
                                                                           )
                                                           ) ▶₀ #vr.63 ) )
                                                case Generate_TPM_DAA_CERTIFY_case_1
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Generate_TPM_DAA_CERTIFY_case_2
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case Issuer_Init
                                              by step( contradiction /* impossible chain */ )
                                            next
                                              case Issuer_KeyReveal
                                              step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case pub
                                            step( solve( !KU( 'bottom' ) @ #vk.25 ) )
                                              case coerce
                                              step( solve( !KD( 'bottom' ) ▶₀ #vk.25 ) )
                                                case Diff_DAA_CERTIFY_no_verify_case_1
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_2
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.63 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                               ) ▶₁ #vr.63 ) )
                                                    case Generate_TPM_DAA_CERTIFY
                                                    step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                 ) ▶₂ #vr.63 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case Diff_DAA_CERTIFY_no_verify_case_3
                                                step( solve( Shuffle_Sigmas( (
                                                                              <E_S(r_cv1_1.3, S1), 
                                                                               Qk_PD1, curlyA1, 
                                                                               bsn1, R1, S1, T1, 
                                                                               W1, h2_host1, 
                                                                               small_s1, n_C1>+
                                                                              <E_S(r_cv1_2.3, S2), 
                                                                               Qk_PD2, curlyA2, 
                                                                               bsn2, R2, S2, T2, 
                                                                               W2, h2_host2, 
                                                                               small_s2, n_C2>
                                                                             )
                                                             ) ▶₀ #vr.63 ) )
                                                  case Generate_TPM_DAA_CERTIFY_case_1
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Generate_TPM_DAA_CERTIFY_case_2
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              next
                                                case Issuer_Init
                                                by step( contradiction /* impossible chain */ )
                                              next
                                                case Issuer_KeyReveal
                                                step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.63 ) )
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case pub
                                              MIRRORED
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_Nonce
                                        by step( solve( !KU( ~rnd_n_C1 ) @ #vk.26 ) )
                                      qed
                                    next
                                      case c_plus
                                      by step( solve( !KU( ~r_cv1_2 ) @ #vk.26 ) )
                                    qed
                                  next
                                    case c_H_n_2
                                    step( solve( !KU( H_k_2(H_k_6('CredentialData',
                                                                  multp(~sl_1, multp(~r1, 'P1')),
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1'))),
                                                                  multp(~sl_1,
                                                                        plus(multp(~x,
                                                                                   multp(~r1,
                                                                                         'P1')),
                                                                             multp(multp(multp(~r1,
                                                                                               ~x),
                                                                                         ~y),
                                                                                   multp(~f1,
                                                                                         'P1')))),
                                                                  multp(~sl_1,
                                                                        multp(multp(~r1, ~y),
                                                                              multp(~f1, 'P1'))),
                                                                  E_S(~r_cv1_2,
                                                                      multp(~sl_1,
                                                                            multp(~y,
                                                                                  multp(~r1,
                                                                                        'P1'))))),
                                                            H_6(certData('certificationData',
                                                                         QName('SHA256',
                                                                               H_SHA256(QPub('Generic_DAA_public_data',
                                                                                             multp(~g1,
                                                                                                   ~genP1)))))))
                                                 ) @ #vk.26 ) )
                                      case c_H_k_2
                                      step( solve( !KU( H_k_6('CredentialData',
                                                              multp(~sl_1, multp(~r1, 'P1')),
                                                              multp(~sl_1,
                                                                    multp(~y, multp(~r1, 'P1'))),
                                                              multp(~sl_1,
                                                                    plus(multp(~x,
                                                                               multp(~r1, 'P1')),
                                                                         multp(multp(multp(~r1, ~x),
                                                                                     ~y),
                                                                               multp(~f1, 'P1')))),
                                                              multp(~sl_1,
                                                                    multp(multp(~r1, ~y),
                                                                          multp(~f1, 'P1'))),
                                                              E_S(~r_cv1_2,
                                                                  multp(~sl_1,
                                                                        multp(~y,
                                                                              multp(~r1, 'P1')))))
                                                   ) @ #vk.27 ) )
                                        case c_H_k_6
                                        step( solve( !KU( H_6(certData('certificationData',
                                                                       QName('SHA256',
                                                                             H_SHA256(QPub('Generic_DAA_public_data',
                                                                                           multp(~g1,
                                                                                                 ~genP1))))))
                                                     ) @ #vk.28 ) )
                                          case c_H_6
                                          step( solve( !KU( plus(~r_cv1_2,
                                                                 multp(H_n_2(Nonce(~rnd_n_C1),
                                                                             H_k_2(H_k_6('CredentialData',
                                                                                         multp(~sl_1,
                                                                                               multp(~r1,
                                                                                                     'P1')),
                                                                                         multp(~sl_1,
                                                                                               multp(~y,
                                                                                                     multp(~r1,
                                                                                                           'P1'))),
                                                                                         multp(~sl_1,
                                                                                               plus(multp(~x,
                                                                                                          multp(~r1,
                                                                                                                'P1')),
                                                                                                    multp(multp(multp(~r1,
                                                                                                                      ~x),
                                                                                                                ~y),
                                                                                                          multp(~f1,
                                                                                                                'P1')))),
                                                                                         multp(~sl_1,
                                                                                               multp(multp(~r1,
                                                                                                           ~y),
                                                                                                     multp(~f1,
                                                                                                           'P1'))),
                                                                                         E_S(~r_cv1_2,
                                                                                             multp(~sl_1,
                                                                                                   multp(~y,
                                                                                                         multp(~r1,
                                                                                                               'P1'))))),
                                                                                   H_6(certData('certificationData',
                                                                                                QName('SHA256',
                                                                                                      H_SHA256(QPub('Generic_DAA_public_data',
                                                                                                                    multp(~g1,
                                                                                                                          ~genP1)))))))),
                                                                       ~f1))
                                                       ) @ #vk.24 ) )
                                            case Diff_DAA_CERTIFY_no_verify
                                            step( solve( !KU( Nonce(~rnd_n_C1) ) @ #vk.25 ) )
                                              case Diff_DAA_CERTIFY_no_verify
                                              step( solve( !KU( 'certificationData' ) @ #vk.26 ) )
                                                case coerce
                                                step( solve( !KD( 'certificationData'
                                                             ) ▶₀ #vk.26 ) )
                                                  case Diff_DAA_CERTIFY_no_verify_case_1
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_2
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                 ) ▶₁ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY
                                                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                   ) ▶₂ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case Diff_DAA_CERTIFY_no_verify_case_3
                                                  step( solve( Shuffle_Sigmas( (
                                                                                <
                                                                                 E_S(r_cv1_1.3,
                                                                                     S1), 
                                                                                 Qk_PD1, curlyA1, 
                                                                                 bsn1, R1, S1, T1, 
                                                                                 W1, h2_host1, 
                                                                                 small_s1, n_C1>+
                                                                                <
                                                                                 E_S(r_cv1_2.3,
                                                                                     S2), 
                                                                                 Qk_PD2, curlyA2, 
                                                                                 bsn2, R2, S2, T2, 
                                                                                 W2, h2_host2, 
                                                                                 small_s2, n_C2>
                                                                               )
                                                               ) ▶₀ #vr.54 ) )
                                                    case Generate_TPM_DAA_CERTIFY_case_1
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Generate_TPM_DAA_CERTIFY_case_2
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                next
                                                  case Issuer_Init
                                                  by step( contradiction /* impossible chain */ )
                                                next
                                                  case Issuer_KeyReveal
                                                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  qed
                                                qed
                                              next
                                                case pub
                                                step( solve( !KU( 'SHA256' ) @ #vk.27 ) )
                                                  case coerce
                                                  step( solve( !KD( 'SHA256' ) ▶₀ #vk.27 ) )
                                                    case Diff_DAA_CERTIFY_no_verify_case_1
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_2
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                   ) ▶₁ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY
                                                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                     ) ▶₂ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case Diff_DAA_CERTIFY_no_verify_case_3
                                                    step( solve( Shuffle_Sigmas( (
                                                                                  <
                                                                                   E_S(r_cv1_1.3,
                                                                                       S1), 
                                                                                   Qk_PD1, curlyA1, 
                                                                                   bsn1, R1, S1, 
                                                                                   T1, W1, 
                                                                                   h2_host1, 
                                                                                   small_s1, n_C1>+
                                                                                  <
                                                                                   E_S(r_cv1_2.3,
                                                                                       S2), 
                                                                                   Qk_PD2, curlyA2, 
                                                                                   bsn2, R2, S2, 
                                                                                   T2, W2, 
                                                                                   h2_host2, 
                                                                                   small_s2, n_C2>
                                                                                 )
                                                                 ) ▶₀ #vr.54 ) )
                                                      case Generate_TPM_DAA_CERTIFY_case_1
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Generate_TPM_DAA_CERTIFY_case_2
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  next
                                                    case Issuer_Init
                                                    by step( contradiction /* impossible chain */ )
                                                  next
                                                    case Issuer_KeyReveal
                                                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    qed
                                                  qed
                                                next
                                                  case pub
                                                  step( solve( !KU( 'bottom' ) @ #vk.28 ) )
                                                    case coerce
                                                    step( solve( !KD( 'bottom' ) ▶₀ #vk.28 ) )
                                                      case Diff_DAA_CERTIFY_no_verify_case_1
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_2
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                     ) ▶₁ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY
                                                          step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2>
                                                                       ) ▶₂ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case Diff_DAA_CERTIFY_no_verify_case_3
                                                      step( solve( Shuffle_Sigmas( (
                                                                                    <
                                                                                     E_S(r_cv1_1.3,
                                                                                         S1), 
                                                                                     Qk_PD1, 
                                                                                     curlyA1, bsn1, 
                                                                                     R1, S1, T1, 
                                                                                     W1, h2_host1, 
                                                                                     small_s1, n_C1
                                                                                    >+
                                                                                    <
                                                                                     E_S(r_cv1_2.3,
                                                                                         S2), 
                                                                                     Qk_PD2, 
                                                                                     curlyA2, bsn2, 
                                                                                     R2, S2, T2, 
                                                                                     W2, h2_host2, 
                                                                                     small_s2, n_C2>
                                                                                   )
                                                                   ) ▶₀ #vr.54 ) )
                                                        case Generate_TPM_DAA_CERTIFY_case_1
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Generate_TPM_DAA_CERTIFY_case_2
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    next
                                                      case Issuer_Init
                                                      by step( contradiction
                                                               /* impossible chain */ )
                                                    next
                                                      case Issuer_KeyReveal
                                                      step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.54 ) )
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      qed
                                                    qed
                                                  next
                                                    case pub
                                                    step( solve( !KU( 'CredentialData'
                                                                 ) @ #vk.29 ) )
                                                      case coerce
                                                      step( solve( !KD( 'CredentialData'
                                                                   ) ▶₀ #vk.29 ) )
                                                        case Diff_DAA_CERTIFY_no_verify_case_1
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            by step( contradiction
                                                                     /* impossible chain */ )
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_2
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.54 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1>
                                                                       ) ▶₁ #vr.54 ) )
                                                            case Generate_TPM_DAA_CERTIFY
                                                            step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2
                                                                                      >
                                                                         ) ▶₂ #vr.54 ) )
                                                              case Generate_TPM_DAA_CERTIFY
                                                              by step( contradiction
                                                                       /* impossible chain */ )
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case Diff_DAA_CERTIFY_no_verify_case_3
                                                        step( solve( Shuffle_Sigmas( (
                                                                                      <
                                                                                       E_S(r_cv1_1.3,
                                                                                           S1), 
                                                                                       Qk_PD1, 
                                                                                       curlyA1, 
                                                                                       bsn1, R1, 
                                                                                       S1, T1, W1, 
                                                                                       h2_host1, 
                                                                                       small_s1, 
                                                                                       n_C1>+
                                                                                      <
                                                                                       E_S(r_cv1_2.3,
                                                                                           S2), 
                                                                                       Qk_PD2, 
                                                                                       curlyA2, 
                                                                                       bsn2, R2, 
                                                                                       S2, T2, W2, 
                                                                                       h2_host2, 
                                                                                       small_s2, 
                                                                                       n_C2>
                                                                                     )
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Generate_TPM_DAA_CERTIFY_case_1
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        next
                                                          case Generate_TPM_DAA_CERTIFY_case_2
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      next
                                                        case Issuer_Init
                                                        by step( contradiction
                                                                 /* impossible chain */ )
                                                      next
                                                        case Issuer_KeyReveal
                                                        step( solve( !Ltk( I, x.1, y.1
                                                                     ) ▶₀ #vr.54 ) )
                                                          case Issuer_Init
                                                          by step( contradiction
                                                                   /* impossible chain */ )
                                                        qed
                                                      qed
                                                    next
                                                      case pub
                                                      MIRRORED
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case c_Nonce
                                              by step( solve( !KU( ~rnd_n_C1 ) @ #vk.30 ) )
                                            qed
                                          next
                                            case c_plus
                                            by step( solve( !KU( ~r_cv1_2 ) @ #vk.30 ) )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_multp
                                  by step( solve( !KU( ~sl_1 ) @ #vk.26 ) )
                                qed
                              next
                                case c_multp
                                by step( solve( !KU( ~sl_1 ) @ #vk.26 ) )
                              qed
                            next
                              case c_multp
                              by step( solve( !KU( ~sl_1 ) @ #vk.26 ) )
                            qed
                          next
                            case c_multp
                            by step( solve( !KU( ~sl_1 ) @ #vk.26 ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_QPub
                  step( solve( !KU( multp(~g1, ~genP1) ) @ #vk.22 ) )
                    case c_multp
                    by step( solve( !KU( ~g1 ) @ #vk.23 ) )
                  qed
                qed
              next
                case c_E_S
                by step( solve( !KU( ~r_cv1_2 ) @ #vk.21 ) )
              qed
            qed
          qed
        qed
      qed
    next
      case Issuer_Init
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case PkX
          step( solve( !KU( PkX(~x, 'P2') ) @ #vk ) )
            case Issuer_Init
            MIRRORED
          next
            case c_PkX
            step( solve( !KU( ~x ) @ #vk.1 ) )
              case Issuer_KeyReveal
              step( solve( !KU( 'P2' ) @ #vk.2 ) )
                case coerce
                step( solve( !KD( 'P2' ) ▶₀ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.4 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case PkY
          step( solve( !KU( PkY(~y, 'P2') ) @ #vk ) )
            case Issuer_Init
            MIRRORED
          next
            case c_PkY
            step( solve( !KU( ~y ) @ #vk.1 ) )
              case Issuer_KeyReveal
              step( solve( !KU( 'P2' ) @ #vk.2 ) )
                case coerce
                step( solve( !KD( 'P2' ) ▶₀ #vk.2 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.4 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !KU( PkX(~x, 'P2') ) @ #vk.1 ) )
          case Issuer_Init
          step( solve( !KU( PkY(~y, 'P2') ) @ #vk.2 ) )
            case Issuer_Init
            MIRRORED
          next
            case c_PkY
            step( solve( !KU( ~y ) @ #vk.3 ) )
              case Issuer_KeyReveal
              step( solve( !KU( 'P2' ) @ #vk.4 ) )
                case coerce
                step( solve( !KD( 'P2' ) ▶₀ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.4 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                MIRRORED
              qed
            qed
          qed
        next
          case c_PkX
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case Issuer_KeyReveal
            step( solve( !KU( PkY(~y, 'P2') ) @ #vk.3 ) )
              case Issuer_Init
              step( solve( !KU( 'P2' ) @ #vk.4 ) )
                case coerce
                step( solve( !KD( 'P2' ) ▶₀ #vk.4 ) )
                  case Diff_DAA_CERTIFY_no_verify_case_1
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_2
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.4 ) )
                      case Generate_TPM_DAA_CERTIFY
                      step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.4 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case Diff_DAA_CERTIFY_no_verify_case_3
                  step( solve( Shuffle_Sigmas( (
                                                <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                 T1, W1, h2_host1, small_s1, n_C1>+
                                                <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                 T2, W2, h2_host2, small_s2, n_C2>
                                               )
                               ) ▶₀ #vr.4 ) )
                    case Generate_TPM_DAA_CERTIFY_case_1
                    by step( contradiction /* impossible chain */ )
                  next
                    case Generate_TPM_DAA_CERTIFY_case_2
                    by step( contradiction /* impossible chain */ )
                  qed
                next
                  case Issuer_Init
                  by step( contradiction /* impossible chain */ )
                next
                  case Issuer_KeyReveal
                  step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.4 ) )
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  qed
                qed
              next
                case pub
                MIRRORED
              qed
            next
              case c_PkY
              step( solve( !KU( ~y ) @ #vk.5 ) )
                case Issuer_KeyReveal
                step( solve( !KU( 'P2' ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( 'P2' ) ▶₀ #vk.5 ) )
                    case Diff_DAA_CERTIFY_no_verify_case_1
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                   T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                   T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_2
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                   T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                   T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      step( solve( TPM_EK_QPD1( <pk(e1), Q_PD1> ) ▶₁ #vr.5 ) )
                        case Generate_TPM_DAA_CERTIFY
                        step( solve( TPM_EK_QPD2( <pk(e2), Q_PD2> ) ▶₂ #vr.5 ) )
                          case Generate_TPM_DAA_CERTIFY
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case Diff_DAA_CERTIFY_no_verify_case_3
                    step( solve( Shuffle_Sigmas( (
                                                  <E_S(r_cv1_1, S1), Qk_PD1, curlyA1, bsn1, R1, S1, 
                                                   T1, W1, h2_host1, small_s1, n_C1>+
                                                  <E_S(r_cv1_2, S2), Qk_PD2, curlyA2, bsn2, R2, S2, 
                                                   T2, W2, h2_host2, small_s2, n_C2>
                                                 )
                                 ) ▶₀ #vr.5 ) )
                      case Generate_TPM_DAA_CERTIFY_case_1
                      by step( contradiction /* impossible chain */ )
                    next
                      case Generate_TPM_DAA_CERTIFY_case_2
                      by step( contradiction /* impossible chain */ )
                    qed
                  next
                    case Issuer_Init
                    by step( contradiction /* impossible chain */ )
                  next
                    case Issuer_KeyReveal
                    step( solve( !Ltk( I, x.1, y.1 ) ▶₀ #vr.5 ) )
                      case Issuer_Init
                      by step( contradiction /* impossible chain */ )
                    qed
                  qed
                next
                  case pub
                  MIRRORED
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case Issuer_KeyReveal
      step( solve( !Ltk( I, x.1, y ) ▶₀ #vr ) )
        case Issuer_Init
        step( solve( (#vl, 0) ~~> (#i, 1) ) )
          case d_0_fst
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case Var_fresh_1_x
            step( solve( !KU( ~x ) @ #vk ) )
              case Issuer_KeyReveal
              MIRRORED
            qed
          qed
        next
          case d_0_snd
          step( solve( (#vr.2, 0) ~~> (#i, 1) ) )
            case Var_fresh_y
            step( solve( !KU( ~y ) @ #vk ) )
              case Issuer_KeyReveal
              MIRRORED
            qed
          qed
        next
          case pair
          step( solve( !KU( ~x ) @ #vk.1 ) )
            case Issuer_KeyReveal
            step( solve( !KU( ~y ) @ #vk.2 ) )
              case Issuer_KeyReveal
              MIRRORED
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Generate_TPM_DAA_CERTIFY
  backward-search
    case LHS
    step( simplify )
    step( solve( !Pk( I, PkX(x, 'P2'), PkY(y, 'P2') ) ▶₀ #i ) )
      case Issuer_Init
      step( solve( !Ltk( 'Issuer', ~x, ~y ) ▶₁ #i ) )
        case Issuer_Init
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Pk( I, PkX(x, 'P2'), PkY(y, 'P2') ) ▶₀ #i ) )
      case Issuer_Init
      step( solve( !Ltk( 'Issuer', ~x, ~y ) ▶₁ #i ) )
        case Issuer_Init
        MIRRORED
      qed
    qed
  qed
next
  case Rule_Issuer_Init
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Issuer_KeyReveal
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
qed

end