theory minimal_predicates begin

builtins: multiset

predicates: Smaller(x,y) <=> Ex z. x + z = y
          , Equal(x,y)   <=> x = y
          , Added(x,y)   <=> Ex #a. A(x,y)@a & #a < #NOW

rule A:
  [In(x), In(y)] --[ _restrict(Smaller(x,y)), A(x,y), B('1','1'+'1')]-> [ X('A')]

rule B:
    [In(x), In(y)] --[ _restrict(Added(x,y))]-> []

rule C:
    [In(<x,x>)] --[ _restrict(Equal(x,x)), C() ]-> []

lemma one_smaller_two:
    "All x y #i. B(x,y)@i ==> Smaller(x,y)"

lemma unequal:
    "All x y #i. A(x,y)@i ==> not (Equal(x,y))"

lemma equal:
    exists-trace
    "Ex #i. C()@i"

end

