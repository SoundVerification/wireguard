theory OTYT06 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

/* looping facts with injective instances: Reader/2, Tag/2 */

rule (modulo E) Setup:
   [ Fr( ~k ) ]
  --[ Setup( ~k ), OnlyOnce( ) ]->
   [ Reader( ~k, ~k ), Tag( ~k, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) tag1:
   [ In( r1 ), Tag( ~k, x ) ]
  --[ Response( ~k, 'Tag' ), Challenge( x, 'Tag' ), Tag( ~k, x ) ]->
   [ Out( h((r1⊕x)) ), Tag( ~k, x ), TagRunning( ~k, x ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) tag1:
     [ In( r1 ), Tag( ~k, x ) ]
    --[ Response( ~k, 'Tag' ), Challenge( x, 'Tag' ), Tag( ~k, x ) ]->
     [ Out( h(z) ), Tag( ~k, x ), TagRunning( ~k, x ) ]
    variants (modulo AC)
    1. r1    = r1.6
       x     = r1.6
       z     = zero
    
    2. r1    = r1.6
       x     = x.7
       z     = (r1.6⊕x.7)
    
    3. r1    = r1.6
       x     = zero
       z     = r1.6
    
    4. r1    = r1.7
       x     = (r1.7⊕z.9)
       z     = z.9
    
    5. r1    = zero
       x     = x.6
       z     = x.6
    
    6. r1    = (x.7⊕z.8)
       x     = x.7
       z     = z.8
    
    7. r1    = (x.8⊕x.9)
       x     = (x.9⊕x.10)
       z     = (x.8⊕x.10)
    // loop breaker: [1]
  */

rule (modulo E) reader2:
   [ Initiated( ~r1 ), Reader( ~k, ~kp ), In( xoredhash ), Fr( ~k1 ) ]
  --[
  Reader( ~k, ~kp ), Alive( ~k, 'Tag' ), Response( ~k, 'Reader' ),
  Eq( xoredhash, h((~kp⊕~r1)) )
  ]->
   [ Out( (~k1⊕~kp) ), Reader( ~k, ~k1 ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) reader2:
     [ Initiated( ~r1 ), Reader( ~k, ~kp ), In( xoredhash ), Fr( ~k1 ) ]
    --[
    Reader( ~k, ~kp ), Alive( ~k, 'Tag' ), Response( ~k, 'Reader' ),
    Eq( xoredhash, h(z.1) )
    ]->
     [ Out( z ), Reader( ~k, ~k1 ) ]
    variants (modulo AC)
    1. ~k1   = ~k1.11
       ~kp   = ~k1.11
       ~r1   = ~k1.11
       z     = zero
       z.1   = zero
    
    2. ~k1   = ~k1.12
       ~kp   = ~kp.13
       ~r1   = ~kp.13
       z     = (~k1.12⊕~kp.13)
       z.1   = zero
    
    3. ~k1   = ~k1.13
       ~kp   = ~k1.13
       ~r1   = ~r1.15
       z     = zero
       z.1   = (~k1.13⊕~r1.15)
    
    4. ~k1   = ~k1.13
       ~kp   = ~kp.14
       ~r1   = ~r1.15
       z     = (~k1.13⊕~kp.14)
       z.1   = (~kp.14⊕~r1.15)
    // loop breaker: [1]
  */

rule (modulo E) tag2:
   [ In( newkey ), Tag( ~k, x ), TagRunning( ~k, x ) ]
  --[ Update( x, (newkey⊕x), 'Tag' ), Alive( ~k, 'Reader' ) ]->
   [ Tag( ~k, (newkey⊕x) ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) tag2:
     [ In( newkey ), Tag( ~k, x ), TagRunning( ~k, x ) ]
    --[ Update( x, z, 'Tag' ), Alive( ~k, 'Reader' ) ]->
     [ Tag( ~k, z ) ]
    variants (modulo AC)
    1. newkey
             = newkey.6
       x     = newkey.6
       z     = zero
    
    2. newkey
             = newkey.6
       x     = zero
       z     = newkey.6
    
    3. newkey
             = newkey.7
       x     = x.8
       z     = (newkey.7⊕x.8)
    
    4. newkey
             = newkey.8
       x     = (newkey.8⊕z.10)
       z     = z.10
    
    5. newkey
             = zero
       x     = x.6
       z     = x.6
    
    6. newkey
             = (x.7⊕z.8)
       x     = x.7
       z     = z.8
    
    7. newkey
             = (x.8⊕x.9)
       x     = (x.9⊕x.10)
       z     = (x.8⊕x.10)
    // loop breaker: [1]
  */

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma reader_start [reuse, use_induction]:
  all-traces
  "∀ x y #k.
    (Reader( x, y ) @ #k) ⇒ (∃ #i. (Setup( x ) @ #i) ∧ (#i < #k))"
/*
guarded formula characterizing all counter-examples:
"∃ x y #k.
  (Reader( x, y ) @ #k) ∧ ∀ #i. (Setup( x ) @ #i) ⇒ ¬(#i < #k)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#k))  ∥
         (∃ #i. (Setup( ~k.1 ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #k)) )
    case case_1
    solve( Reader( ~k.1, ~kp ) ▶₁ #k )
      case Setup
      by contradiction /* from formulas */
    next
      case reader2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma tag_start [reuse, use_induction]:
  all-traces
  "∀ x y #k.
    (Tag( x, y ) @ #k) ⇒ (∃ #i. (Setup( x ) @ #i) ∧ (#i < #k))"
/*
guarded formula characterizing all counter-examples:
"∃ x y #k.
  (Tag( x, y ) @ #k) ∧ ∀ #i. (Setup( x ) @ #i) ⇒ ¬(#i < #k)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( Tag( ~k.1, y ) ▶₁ #k )
    case Setup
    by contradiction /* from formulas */
  next
    case tag1
    by contradiction /* from formulas */
  next
    case tag2
    by contradiction /* from formulas */
  qed
qed

lemma recentalive_tag:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_reader:
  all-traces
  "∀ x #i.
    (Alive( x, 'Reader' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Reader' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
simplify
solve( Alive( x, 'Reader' ) @ #i )
  case tag2
  solve( TagRunning( ~k, x ) ▶₂ #i )
    case tag1
    solve( splitEqs(0) )
      case split_case_1
      by sorry /* removed */
    next
      case split_case_2
      solve( Tag( ~k, x ) ▶₁ #i )
        case Setup
        by sorry /* removed */
      next
        case tag1
        solve( Tag( ~k, x ) ▶₁ #vr )
          case Setup
          solve( Tag( ~k, ~k ) ▶₁ #vr.1 )
            case Setup
            solve( splitEqs(1) )
              case split_case_1
              by sorry
            next
              case split_case_2
              SOLVED // trace found
            next
              case split_case_3
              SOLVED // trace found
            next
              case split_case_4
              by sorry
            next
              case split_case_5
              by sorry
            qed
          next
            case tag1
            by sorry
          next
            case tag2
            by sorry
          qed
        next
          case tag1
          by sorry
        next
          case tag2
          by sorry
        qed
      next
        case tag2
        by sorry
      qed
    next
      case split_case_3
      by sorry
    next
      case split_case_4
      by sorry
    next
      case split_case_5
      by sorry
    next
      case split_case_6
      by sorry
    next
      case split_case_7
      by sorry
    next
      case split_case_8
      by sorry
    next
      case split_case_9
      by sorry
    qed
  qed
qed

lemma executable:
  exists-trace
  "∃ x y #i #j #k.
    (((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
     (Update( x, y, 'Tag' ) @ #k)) ∧
    (¬(∃ #l. (Response( x, 'Tag' ) @ #l) ∧ (¬(#j = #l))))"
/*
guarded formula characterizing all satisfying traces:
"∃ x y #i #j #k.
  (Alive( x, 'Tag' ) @ #i) ∧
  (Response( x, 'Tag' ) @ #j) ∧
  (Update( x, y, 'Tag' ) @ #k)
 ∧
  ∀ #l. (Response( x, 'Tag' ) @ #l) ⇒ #j = #l"
*/
simplify
solve( TagRunning( ~k.1, x ) ▶₂ #k )
  case tag1
  solve( Alive( x, 'Tag' ) @ #i.1 )
    case reader2
    solve( Initiated( ~r1.1 ) ▶₀ #i.1 )
      case reader1
      solve( Response( ~k, 'Tag' ) @ #j )
        case tag1
        solve( splitEqs(0) )
          case split_case_1
          by sorry
        next
          case split_case_2
          by sorry
        next
          case split_case_3
          solve( Tag( ~k, ~k ) ▶₁ #k.1 )
            case Setup
            by sorry /* removed */
          next
            case tag1
            solve( Tag( ~k, ~k ) ▶₁ #j )
              case Setup
              solve( Reader( ~k, ~kp ) ▶₁ #i.1 )
                case Setup
                solve( splitEqs(1) )
                  case split_case_1
                  by sorry /* removed */
                next
                  case split_case_2
                  solve( splitEqs(3) )
                    case split
                    solve( !KU( h((~k⊕~r1.1)) ) @ #vk.2 )
                      case c_h_case_1
                      by sorry /* removed */
                    next
                      case c_h_case_2
                      by sorry /* removed */
                    next
                      case tag1
                      solve( !KU( ~r1 ) @ #vk.2 )
                        case reader1
                        SOLVED // trace found
                      next
                        case reader2
                        by sorry /* removed */
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  by sorry
                next
                  case split_case_4
                  by sorry
                next
                  case split_case_5
                  by sorry
                qed
              next
                case reader2
                by sorry
              qed
            qed
          qed
        next
          case split_case_4
          by sorry
        next
          case split_case_5
          by sorry
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end