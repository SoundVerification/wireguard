theory OTYT06 begin

builtins: xor, hashing

/*
OTYT07: Reader R, RFID tag T, shared knowledge k
	This is a stateful protocol, the tag and reader's knowledge is updated
        after a successful run. 

   R: knows(k)
   T: knows(k)
   R: fresh(r1)
R->T: r1
T->R: h(k XOR r1)
   R: fresh(k1)
R->T: k XOR k1
   R: replace k by k1
   T: replace k by k1

Protocol satisfies recent aliveness of the tag, but not untracability.
Recent aliveness of reader is not satisfied. 

The model below only considers recent aliveness at the moment.
*/

rule Setup:
   [ Fr( ~k )
   ]
 --[ Setup(~k), OnlyOnce( ) ]-> 
   [ Reader( ~k, ~k )
   , Tag( ~k, ~k ) 
   ]

rule reader1:
   [ Fr( ~r1 ) ]
 --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 )
   , Initiated( ~r1 ) 
   ]

rule tag1:
   [ In( r1 )
   , Tag( ~k, x ) ]
 --[ Response( ~k, 'Tag' )
   , Challenge( x, 'Tag' )
   , Tag( ~k, x)
   ]->
   [ Out( h(x XOR r1) )
   , Tag( ~k, x )
   , TagRunning( ~k, x )
   ]

rule reader2:
   [ Initiated( ~r1 )
   , Reader( ~k, ~kp )
   , In( xoredhash )
   , Fr(~k1)
   ]
 --[ Reader( ~k, ~kp ) 
   , Alive( ~k, 'Tag' )
   , Response( ~k, 'Reader' )
   , Eq( xoredhash, h(~kp XOR ~r1) ) 
   ]->
   [ Out( ~kp XOR ~k1) 
   , Reader( ~k, ~k1 )
   ]

rule tag2:
   [ In( newkey )
   , Tag( ~k, x ) 
   , TagRunning( ~k, x )
   ]
 --[ Update( x, x XOR newkey, 'Tag' )
   , Alive( ~k, 'Reader' )
   ]->
   [ Tag( ~k, x XOR newkey )
   ]

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"

restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"

//PROOF FOUND MANUALLY (not using "splitEqs", but solving for Reader) (2017-03-29)
lemma reader_start [reuse,use_induction]:
"All x y #k. Reader(x, y) @k ==> Ex #i. Setup(x) @ #i & i<k"

//PROOF FOUND MANUALLY (not using "splitEqs", but solving for Tag) (2017-03-29)
lemma tag_start [reuse,use_induction]:
"All x y #k. Tag(x, y) @k ==> Ex #i. Setup(x) @ #i & i<k"

/*
lemma reader_tag_synch [reuse,use_induction]:
"All x y #i #j. Reader(x,y) @i & Tag(x, y) @j ==> not Ex #i. KU(y) @i"
*/

lemma recentalive_tag:
  all-traces "∀ x #i. (Alive( x, 'Tag' ) @ #i) ⇒ (∃ y #j #k. Challenge(y, 'Reader') @k & Response( x, 'Tag' ) @ #j & k < j & j < i)"

// ATTACK FOUND MANUALLY (see OTYT06-attacks-manual) (2017-03-28)
lemma recentalive_reader:
  all-traces "∀ x #i. (Alive( x, 'Reader' ) @ #i) ⇒ (∃ y #j #k. Challenge(y, 'Tag') @k & Response( x, 'Reader' ) @ #j & k < j & j < i)"


lemma executable:
  exists-trace "∃ x y #i #j #k. (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j) & (Update( x, y, 'Tag') @ #k)
           // further restriction to automatically get the desired execution
           ∧ (not Ex #l. Response( x, 'Tag' ) @ #l & (not (#j=#l)))"

end