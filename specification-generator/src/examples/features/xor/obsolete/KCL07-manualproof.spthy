theory KCL07 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) Setup:
   [ Fr( ~k ), Fr( ~id ) ]
  --[ OnlyOnce( ) ]->
   [ !Reader( ~k, ~id ), !Tag( ~k, ~id ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), !Tag( ~k, ~id ) ]
  --[ Response( ~k, 'Tag' ) ]->
   [ Out( <(~id⊕~r2), (~r2⊕h(<r1, ~k>))> ) ]

  /*
  rule (modulo AC) tag1:
     [ In( r1 ), Fr( ~r2 ), !Tag( ~k, ~id ) ]
    --[ Response( ~k, 'Tag' ) ]->
     [ Out( <z, (~r2⊕h(<r1, ~k>))> ) ]
    variants (modulo AC)
    1. ~id   = ~id.17
       ~r2   = ~id.17
       z     = zero
    
    2. ~id   = ~id.17
       ~r2   = ~r2.19
       z     = (~id.17⊕~r2.19)
  */

rule (modulo E) reader2:
   [ Initiated( ~r1 ), !Reader( ~k, ~id ), In( xoredhash ) ]
  --[ Alive( ~k, 'Tag' ), Eq( xoredhash, (~id⊕h(<~r1, ~k>)) ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma recentalive_tag:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
simplify
  case 1
  solve( Initiated( ~r1 ) ▶₀ #i )
    case reader1
    solve( !Reader( ~k, ~id ) ▶₁ #i )
      case Setup
      solve( !KD( (~id⊕h(<~r1, ~k>)) ) ▶₀ #vk )
        case reader1
        by contradiction /* impossible chain */
      next
        case tag1
        solve( (#vl, 0) ~~> (#vk, 0) )
          case d_0_fst
          solve( !Tag( ~k.1, ~id.1 ) ▶₂ #vr.2 )
            case Setup
            solve( splitEqs(1) )
              case split
              solve( (#vr.3, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                solve( (#vr.4, 0) ~~> (#vk, 0) )
                  case Xor
                  solve( !KD( (~r2⊕h(<~r1, ~k>)) ) ▶₀ #vk.1 )
                    case reader1
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      solve( !Tag( ~k.1, ~id.1 ) ▶₂ #vr.5 )
                        case Setup
                        solve( splitEqs(7) )
                          case split
                          solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                            case d_xor_case_1
                            by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          next
                            case d_xor_case_2
                            solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                              case Xor
                              by contradiction /* cyclic */
                            qed
                          next
                            case d_xor_case_3
                            by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          next
                            case d_xor_case_4
                            by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          next
                            case d_xor_case_5
                            solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                              case Xor
                              by contradiction /* cyclic */
                            qed
                          next
                            case d_xor_case_6
                            solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                              case Xor_case_1
                              by contradiction /* cyclic */
                            next
                              case Xor_case_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case d_xor_case_7
                            by contradiction /* impossible chain */
                          next
                            case d_xor_case_8
                            by contradiction /* impossible chain */
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                        case Xor
                        solve( !KU( ~r1 ) @ #vk.2 )
                          case reader1
                          by contradiction /* cyclic */
                        qed
                      next
                        case d_xor_case_1
                        solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          case Xor
                          solve( !KD( (h(<~r1, ~k>)⊕h(<r1.1, ~k>)) ) ▶₀ #vk.2 )
                            case reader1
                            by contradiction /* impossible chain */
                          next
                            case tag1
                            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                              case d_0_fst
                              solve( !Tag( ~k.1, ~id.1 ) ▶₂ #vr.7 )
                                case Setup
                                solve( splitEqs(12) )
                                  case split
                                  solve( (#vr.8, 0) ~~> (#vk.2, 0) )
                                    case d_xor_case_1
                                    by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  next
                                    case d_xor_case_2
                                    by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  next
                                    case d_xor_case_3
                                    by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  next
                                    case d_xor_case_4
                                    by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  next
                                    case d_xor_case_5
                                    by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  next
                                    case d_xor_case_6
                                    by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  next
                                    case d_xor_case_7
                                    by contradiction /* impossible chain */
                                  next
                                    case d_xor_case_8
                                    by contradiction /* impossible chain */
                                  qed
                                qed
                              qed
                            next
                              case d_0_snd
                              solve( (#vr.8, 0) ~~> (#vk.2, 0) )
                                case d_xor_case_1
                                by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                              next
                                case d_xor_case_2
                                solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  case Xor_case_1
                                  solve( !Tag( ~k, ~id.1 ) ▶₂ #vr.7 )
                                    case Setup
                                    solve( !KD( (~r2.1⊕h(<~r1, ~k>)) ) ▶₀ #vk.3 )
                                      case reader1
                                      by contradiction /* impossible chain */
                                    next
                                      case tag1
                                      solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                                        case d_0_fst
                                        solve( !Tag( ~k.1, ~id.1 ) ▶₂ #vr.10 )
                                          case Setup
                                          solve( splitEqs(12) )
                                            case split
                                            solve( splitEqs(17) )
                                              case split
                                              solve( (#vr.11, 0) ~~> (#vk.3, 0) )
                                                case d_xor_case_1
                                                by solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                              next
                                                case d_xor_case_2
                                                solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                                  case Xor
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case d_xor_case_3
                                                by solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                              next
                                                case d_xor_case_4
                                                by solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                              next
                                                case d_xor_case_5
                                                solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                                  case Xor
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case d_xor_case_6
                                                solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                                  case Xor_case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Xor_case_2
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case d_xor_case_7
                                                by contradiction /* impossible chain */
                                              next
                                                case d_xor_case_8
                                                by contradiction /* impossible chain */
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case d_0_snd
                                        solve( (#vr.11, 0) ~~> (#vk.3, 0) )
                                          case d_xor_case_1
                                          solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                            case Xor
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case d_xor_case_2
                                          solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                            case Xor
                                            solve( !KU( ~r1 ) @ #vk.6 )
                                              case reader1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case d_xor_case_3
                                          solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                            case Xor
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case d_xor_case_4
                                          solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                            case Xor_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case Xor_case_2
                                            by contradiction /* cyclic */
                                          next
                                            case Xor_case_3
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case d_xor_case_5
                                          solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                            case Xor
                                            solve( !KU( ~r1 ) @ #vk.6 )
                                              case reader1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case d_xor_case_6
                                          solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                            case Xor_case_1
                                            solve( !KU( ~r1 ) @ #vk.6 )
                                              case reader1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case Xor_case_2
                                            solve( !KU( ~r1 ) @ #vk.5 )
                                              case reader1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case d_xor_case_7
                                          by contradiction /* impossible chain */
                                        next
                                          case d_xor_case_8
                                          by solve( (#vr.12, 0) ~~> (#vk.3, 0) )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Xor_case_2
                                  solve( !KU( ~r1 ) @ #vk.5 )
                                    case reader1
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case d_xor_case_3
                                by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                              next
                                case d_xor_case_4
                                by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                              next
                                case d_xor_case_5
                                solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  case Xor_case_1
                                  solve( !KU( h(<~r1, ~k>) ) @ #vk.5 )
                                    case c_h
                                    by solve( !KU( ~k ) @ #vk.9 )
                                  next
                                    case tag1
                                    solve( !KU( ~r1 ) @ #vk.7 )
                                      case reader1
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Xor_case_2
                                  solve( !KU( ~r1 ) @ #vk.5 )
                                    case reader1
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case d_xor_case_6
                                solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                                  case Xor_case_1
                                  solve( !KU( h(<~r1, ~k>) ) @ #vk.5 )
                                    case c_h
                                    by solve( !KU( ~k ) @ #vk.9 )
                                  next
                                    case tag1
                                    solve( !KU( ~r1 ) @ #vk.7 )
                                      case reader1
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Xor_case_2
                                  solve( !KU( h(<~r1, ~k>) ) @ #vk.5 )
                                    case c_h
                                    by solve( !KU( ~k ) @ #vk.9 )
                                  next
                                    case tag1
                                    solve( !KU( ~r1 ) @ #vk.7 )
                                      case reader1
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Xor_case_3
                                  solve( !KU( ~r1 ) @ #vk.5 )
                                    case reader1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case Xor_case_4
                                  solve( !KU( ~r1 ) @ #vk.4 )
                                    case reader1
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              next
                                case d_xor_case_7
                                by contradiction /* impossible chain */
                              next
                                case d_xor_case_8
                                by solve( (#vr.9, 0) ~~> (#vk.2, 0) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case d_xor_case_2
                        solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          case Xor
                          solve( !KU( ~r1 ) @ #vk.4 )
                            case reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case d_xor_case_3
                        solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          case Xor
                          solve( !KU( h(<~r1, ~k>) ) @ #vk.4 )
                            case c_h
                            by solve( !KU( ~k ) @ #vk.8 )
                          next
                            case tag1
                            solve( !KU( ~r1 ) @ #vk.6 )
                              case reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case d_xor_case_4
                        solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          case Xor_case_1
                          solve( !KU( h(<~r1, ~k>) ) @ #vk.4 )
                            case c_h
                            by solve( !KU( ~k ) @ #vk.8 )
                          next
                            case tag1
                            solve( !KU( ~r1 ) @ #vk.6 )
                              case reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Xor_case_2
                          solve( !KU( h(<~r1, ~k>) ) @ #vk.4 )
                            case c_h
                            by solve( !KU( ~k ) @ #vk.8 )
                          next
                            case tag1
                            solve( !KU( ~r1 ) @ #vk.6 )
                              case reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case Xor_case_3
                          solve( !KU( h(<~r1, ~k>) ) @ #vk.4 )
                            case c_h
                            by solve( !KU( ~k ) @ #vk.8 )
                          next
                            case tag1
                            solve( !KU( ~r1 ) @ #vk.6 )
                              case reader1
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case d_xor_case_5
                        solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          case Xor
                          solve( !KU( ~r1 ) @ #vk.4 )
                            case reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case d_xor_case_6
                        solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                          case Xor_case_1
                          solve( !KU( ~r1 ) @ #vk.4 )
                            case reader1
                            by contradiction /* cyclic */
                          qed
                        next
                          case Xor_case_2
                          solve( !KU( ~r1 ) @ #vk.3 )
                            case reader1
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case d_xor_case_7
                        by contradiction /* impossible chain */
                      next
                        case d_xor_case_8
                        by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                      qed
                    qed
                  qed
                qed
              next
                case d_xor_case_2
                by solve( (#vr.4, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                solve( (#vr.4, 0) ~~> (#vk, 0) )
                  case Xor
                  solve( !KU( h(<~r1, ~k>) ) @ #vk.3 )
                    case c_h
                    by solve( !KU( ~k ) @ #vk.7 )
                  next
                    case tag1
                    solve( !KU( ~r1 ) @ #vk.5 )
                      case reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case d_xor_case_4
                solve( (#vr.4, 0) ~~> (#vk, 0) )
                  case Xor_case_1
                  solve( !KU( h(<~r1, ~k>) ) @ #vk.3 )
                    case c_h
                    by solve( !KU( ~k ) @ #vk.7 )
                  next
                    case tag1
                    solve( !KU( ~r1 ) @ #vk.5 )
                      case reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Xor_case_2
                  solve( !KU( h(<~r1, ~k>) ) @ #vk.3 )
                    case c_h
                    by solve( !KU( ~k ) @ #vk.7 )
                  next
                    case tag1
                    solve( !KU( ~r1 ) @ #vk.5 )
                      case reader1
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case d_xor_case_5
                by solve( (#vr.4, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_6
                by solve( (#vr.4, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_7
                by contradiction /* impossible chain */
              next
                case d_xor_case_8
                by contradiction /* impossible chain */
              qed
            qed
          qed
        next
          case d_0_snd
          solve( (#vr.3, 0) ~~> (#vk, 0) )
            case d_xor_case_1
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_xor_case_2
            solve( (#vr.4, 0) ~~> (#vk, 0) )
              case Xor
              solve( !KU( ~r1 ) @ #vk.2 )
                case reader1
                by contradiction /* cyclic */
              qed
            qed
          next
            case d_xor_case_3
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_xor_case_4
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          next
            case d_xor_case_5
            solve( (#vr.4, 0) ~~> (#vk, 0) )
              case Xor
              solve( !KU( ~r1 ) @ #vk.2 )
                case reader1
                by contradiction /* cyclic */
              qed
            qed
          next
            case d_xor_case_6
            solve( (#vr.4, 0) ~~> (#vk, 0) )
              case Xor_case_1
              solve( !KU( ~r1 ) @ #vk.2 )
                case reader1
                by contradiction /* cyclic */
              qed
            next
              case Xor_case_2
              solve( !KU( ~r1 ) @ #vk.1 )
                case reader1
                by contradiction /* cyclic */
              qed
            qed
          next
            case d_xor_case_7
            by contradiction /* impossible chain */
          next
            case d_xor_case_8
            by solve( (#vr.4, 0) ~~> (#vk, 0) )
          qed
        qed
      qed
    qed
  qed
next
  case 2
  solve( Initiated( ~r1 ) ▶₀ #i )
    case reader1
    solve( !Reader( ~k, ~id ) ▶₁ #i )
      case Setup
      solve( !KU( ~id ) @ #vk.2 )
        case tag1
        solve( !KU( h(<~r1, ~k>) ) @ #vk.2 )
          case c_h
          by solve( !KU( ~k ) @ #vk.7 )
        next
          case tag1
          solve( !KU( ~r1 ) @ #vk.5 )
            case reader1
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed

lemma executable:
  exists-trace
  "∃ x #i #j.
    ((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
    (¬(∃ #k. (Response( x, 'Tag' ) @ #k) ∧ (¬(#j = #k))))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
 ∧
  ∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ #j = #k"
*/
by sorry

/* All well-formedness checks were successful. */

end