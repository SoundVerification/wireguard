theory LAK06_UK begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) setup:
   [ Fr( ~k1 ), Fr( ~k2 ) ]
  --[ OnlyOnce( 'Setup' ) ]->
   [
   Tag( diff((~k1+~k1), (~k1+~k2)) ),
   Reader( diff((~k1+~k1), (~k1+~k2)) )
   ]

rule (modulo E) select_tag_reader:
   [ Tag( (x1+x2) ), Reader( (z1+z2) ) ]
  --[ OnlyOnce( 'pickUp' ) ]->
   [ TagRun( x1 ), ReaderRun( z1 ), TagRun( x2 ), ReaderRun( z2 ) ]

rule (modulo E) initiatereader:
   [ ReaderRun( ~k ), Fr( ~r0 ) ]
  -->
   [ ReaderState1( ~k, ~r0 ), Out( ~r0 ) ]

rule (modulo E) tag1:
   [ TagRun( ~k ), Fr( ~r1 ), In( r0 ) ]
  --[ Running( <'R', 'T', ~k, r0, ~r1> ) ]->
   [ TagState1( ~k, ~r1, r0 ), Out( <~r1, h((~k⊕~r1⊕r0))> ) ]

rule (modulo E) acceptreader:
   [ ReaderState1( ~k, ~r0 ), In( <r1, h((~k⊕~r0⊕r1))> ) ]
  --[
  Commit( <'R', 'T', ~k, ~r0, r1> ),
  Running( <'T', 'R', ~k, ~r0, r1> ), ReaderAccept( )
  ]->
   [ Out( h((~k⊕~r0⊕h((~k⊕~r0⊕r1)))) ) ]

rule (modulo E) accepttag:
   [ TagState1( ~k, ~r1, r0 ), In( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) ]
  --[ Commit( <'T', 'R', ~k, r0, ~r1> ), FinTag( ) ]->
   [ ]

restriction onylOnce [right]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

restriction onylOnce [left]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

lemma executable [right]:
  exists-trace
  "(∃ #i. FinTag( ) @ #i) ∧
   (∀ x #i1 #i2.
     ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (FinTag( ) @ #i)) ∧
 (∀ x #i1 #i2.
   (OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2) ⇒ #i1 = #i2)"
*/
by sorry

lemma executable [left]:
  exists-trace
  "(∃ #i. FinTag( ) @ #i) ∧
   (∀ x #i1 #i2.
     ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (FinTag( ) @ #i)) ∧
 (∀ x #i1 #i2.
   (OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2) ⇒ #i1 = #i2)"
*/
by sorry

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case acceptreader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case h
        step( solve( ReaderState1( ~k, ~r0 ) ▶₀ #vr ) )
          case initiatereader_case_1
          step( solve( !KU( h(z.1) ) @ #vk.3 ) )
            case acceptreader
            step( solve( !KU( h(z.2) ) @ #vk.6 ) )
              case tag1_case_1
              step( solve( !KU( h(z) ) @ #vk.4 ) )
                case acceptreader
                step( solve( splitEqs(0) ) )
                  case split_case_5
                  step( solve( !KU( ~r0 ) @ #vk.8 ) )
                    case initiatereader
                    step( solve( !KU( ~r0.1 ) @ #vk.9 ) )
                      case initiatereader
                      step( solve( splitEqs(1) ) )
                        case split_case_04
                        step( solve( splitEqs(2) ) )
                          case split_case_02
                          step( solve( !KU( ~r1 ) @ #vk.8 ) )
                            case tag1
                            by ATTACK // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

end