theory Chaum_simplified_Offline_Anonymity
begin


/*
 * Protocol: Chaum's Offline Protocol
 * Based on: Charles DumÃ©nil's model of Chaum's Online Protocol
 * Status: in limbo
 */


/*
  Protocol Chaum {                          ( Seller and bank are considered corrupted )
    Withdrawal phase
     C -> B: blind(x XOR C,r), blind(x,r)    " c1(x1) & c2(x2) "
     B -> C: sign(blind(x XOR C,r),skB), sign(blind(x,r),skB)    "Withdraw"
    Payment and deposit phase
     C -> S: <x, sign(x,skB)>        "Check signature"            " Out( diff( x1, x2 ) ) "
     S -> B: <x, sign(x,skB)>        "Check signature" 
     B -> S: Private(x)              "Check signature" + "Deposit"
     S     :                         "Spend"
  }
*/


builtins: xor
functions: pk/1, sign/2, checksign/2, blind/2 //, unblind/2
equations: checksign( sign(m,k),pk(k) ) = m
/*         ,
           unblind( blind(m,r),r ) = m,
           unblind( sign(blind(m,r),k),r ) = sign(m,k)
*/


// Public key infrastructure

rule Register_Corrupted_Bank_pk:
  [ Fr(~ltkB), Fr(~c) ]
  --[ OnlyOnce() ]->
  [ !Bank_Ltk($B, ~ltkB), !Bank_Pk($B, pk(~ltkB)), Out(~ltkB), !TestSubject(~c) ]

// Identities: Generate a customer identity
rule agent_id:
  [ Fr(~C) ]
  --[ ]->
  [ !Customer(~C) ]

// Withdrawal Phase

/*
rule C_1_1: // Everyone, (do/don't) let adversary know who's withdrawing 
    [ Fr(~x)
    , Fr(~r)
    , !Customer(~C) ]
  --[ Mint(~x XOR ~C,~x,~r)
    , Mint(~x,~x,~r) 
    ]->
    [ Out( <blind(~x XOR ~C,~r), blind(~x,~r)> )
//  , Out( ~C ) 
    , !St_C_1(~C, ~x, ~r )
    ]
*/

rule C_1_2: // Test subjects: Adversary must distinguish these two customers
    [ Fr(~x)
    , Fr(~r)
    , !Customer(~c1)
    , !TestSubject(~c2) 
    ]
  --[ Mint(~x XOR diff(~c1,~c2),~x,~r)
    , Mint(~x,~x,~r)
    , TestSubjectAction(diff(~c1,~c2)) 
    ]->
    [ Out( <blind(~x XOR diff(~c1,~c2),~r), blind(~x,~r)> )
    , !St_C_1(diff(~c1,~c2), ~x, ~r ) 
    ]


// Payment and deposit phase

rule C_2:
    [ !St_C_1(C, ~y, ~r ), In( blind(x,~r))  ]
  --[ Coin(x,~y,~r), Spend(C,~y,~r) ]->
    [ Out(x) ]


// Axioms

restriction OnlyOnce:
  " All #i #j. OnlyOnce()@i & OnlyOnce()@j ==> #i = #j " 

restriction TestSubjectsAreHonest:
  " All C x r #i #j #k. Spend(C,x,r)@i & Spend(C,x,r)@j & TestSubjectAction(C)@k ==> #i = #j "


// Sources 

lemma coins [sources]:
  " All x y r #i. Coin(x,y,r)@i ==> Ex #j. Mint(x,y,r)@j "

// Executability

lemma exec:
  exists-trace
  " Ex x y r #i. Spend(x,y,r)@i"

lemma anonymity:
  "All x #i. TestSubjectAction(x)@i ==> not Ex #j. !KU(x)@j"

end

