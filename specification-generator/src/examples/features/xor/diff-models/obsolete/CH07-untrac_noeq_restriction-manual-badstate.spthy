theory CH07_untrac_noeq_restriction begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, lh/1, pair/2, rh/1, rot/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) Setup:
   [ Fr( ~k1 ), Fr( ~id1 ), Fr( ~k2 ), Fr( ~id2 ) ]
  --[ OnlyOnce( ) ]->
   [
   Reader( ('1'+
            diff((<~k1, ~id1>+<~k2, ~id2>), (<~k1, ~id1>+<~k1, ~id1>)))
   ),
   Tag( ('1'+
         diff((<~k1, ~id1>+<~k2, ~id2>), (<~k1, ~id1>+<~k1, ~id1>)))
   )
   ]

rule (modulo E) select_tag:
   [ Tag( (z+<~k, ~id>) ) ]
  --[ Tag( (z+<~k, ~id>) ) ]->
   [ TagRun( ~k, ~id ), Tag( z ) ]

rule (modulo E) select_reader:
   [ Reader( (z+<~k, ~id>) ) ]
  --[ Reader( (z+<~k, ~id>) ) ]->
   [ ReaderRun( ~k, ~id ), Reader( z ) ]

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), TagRun( ~k, ~id ) ]
  --[ Response( ~k, 'Tag' ), Challenge( ~r2, 'Tag' ) ]->
   [
   Out( <~r2, lh(rot(~id, h((~k⊕~r2⊕r1))))> ),
   TagState( ~k, ~id, r1, ~r2, h((~k⊕~r2⊕r1)) )
   ]

rule (modulo E) reader2:
   [
   Initiated( ~r1 ), ReaderRun( ~k, ~id ),
   In( <r2, lh(rot(~id, h((~k⊕~r1⊕r2))))> )
   ]
  --[ Alive( ~k, 'Tag' ), Response( ~k, 'Reader' ) ]->
   [ Out( rh(rot(~id, h((~k⊕~r1⊕r2)))) ) ]

rule (modulo E) tag2:
   [ In( rh(rot(~id, hash)) ), TagState( ~k, ~id, r1, ~r2, hash ) ]
  --[ Alive( ~k, 'Reader' ) ]->
   [ ]

restriction max_number_of_tags_tag [right]:
  "∀ a b c d #i. (Tag( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction max_number_of_tags_tag [left]:
  "∀ a b c d #i. (Tag( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction max_number_of_tags_tag_reader [right]:
  "∀ a b c d #i. (Reader( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction max_number_of_tags_tag_reader [left]:
  "∀ a b c d #i. (Reader( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction unique [right]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique [left]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma recentalive_tag [right]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_tag [left]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_reader [right]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Reader' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Reader' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_reader [left]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Reader' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Reader' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma executable [right]:
  exists-trace
  "∃ x #i #j.
    (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
*/
by sorry

lemma executable [left]:
  exists-trace
  "∃ x #i #j.
    (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
*/
by sorry

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_fst
  by sorry
next
  case Rule_Destrd_0_snd
  by sorry
next
  case Rule_Destrd_union
  by sorry
next
  case Rule_Destrd_xor
  by sorry
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case reader1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_r1
        step( solve( !KU( ~r1 ) @ #vk ) )
          case reader1
          MIRRORED
        qed
      qed
    next
      case reader2
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case rh
        step( solve( Initiated( ~r1 ) ▶₀ #vr ) )
          case reader1
          step( solve( ReaderRun( ~k, ~id ) ▶₁ #vr ) )
            case select_reader
            step( solve( !KU( lh(rot(~id, h(z))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( rot(~id, h(z)) ) @ #vk.4 ) )
                case c_rot
                step( solve( !KU( ~id ) @ #vk.5 ) )
                  case fresh
                  by sorry
                next
                  case reader1
                  by sorry
                next
                  case tag1
                  step( solve( Reader( (z.1+<~k, ~id>) ) ▶₀ #vr.2 ) )
                    case select_reader
                    step( solve( Tag( (z.3+<~k.1, ~id.1>) ) ▶₀ #vr.5 ) )
                      case Setup_case_1
                      by sorry
                    next
                      case Setup_case_2
                      by sorry
                    next
                      case select_tag
                      by sorry
                    qed
                  qed
                qed
              qed
            next
              case tag1
              step( solve( Reader( (z.1+<~k, ~id>) ) ▶₀ #vr.2 ) )
                case Setup_case_1
                step( solve( Tag( (z.1+<~k.1, ~id>) ) ▶₀ #vr.5 ) )
                  case Setup
                  step( solve( !KU( rh(rot(~id, h(z))) ) @ #vk.2 ) )
                    case c_rh
                    by sorry
                  next
                    case reader2
                    step( solve( Reader( (z.1+<~k.1, ~id>) ) ▶₀ #vr.9 ) )
                      case Setup
                      step( solve( splitEqs(0) ) )
                        case split_case_01
                        by sorry
                      next
                        case split_case_02
                        by sorry
                      next
                        case split_case_03
                        step( solve( splitEqs(1) ) )
                          case split_case_01
                          step( solve( !KU( ~r2 ) @ #vk.3 ) )
                            case tag1
                            step( solve( !KU( ~r1 ) @ #vk.4 ) )
                              case reader1
                              MIRRORED
                            qed
                          qed
                        next
                          case split_case_02
                          step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.4 ) )
                            case coerce
                            step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.3 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2
                              by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case split_case_03
                          step( solve( !KU( (r2⊕~r2.1) ) @ #vk.5 ) )
                            case coerce
                            step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2
                              by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case split_case_04
                          step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.5 ) )
                            case coerce
                            step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2
                              by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case split_case_05
                          step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                            case tag1_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_case_2
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case split_case_06
                          step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                            case tag1_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_case_2
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case split_case_07
                          step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2
                              by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case split_case_08
                          step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2
                              by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case split_case_09
                          step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                            case coerce
                            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2
                              by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case split_case_10
                          step( solve( !KU( ~r2 ) @ #vk.6 ) )
                            case tag1_case_1
                            step( solve( !KU( ~r1 ) @ #vk.7 ) )
                              case reader1
                              step( solve( !KU( x ) @ #vk.7 ) )
                                case c_fst
                                by sorry
                              next
                                case c_h
                                by sorry
                              next
                                case c_lh
                                by sorry
                              next
                                case c_pair
                                by sorry
                              next
                                case c_rh
                                by sorry
                              next
                                case c_rot
                                by sorry
                              next
                                case c_snd
                                by sorry
                              next
                                case coerce
                                by sorry
                              next
                                case fresh
                                by sorry
                              next
                                case pub
                                by sorry
                              qed
                            qed
                          next
                            case tag1_case_2
                            by sorry
                          qed
                        qed
                      next
                        case split_case_04
                        by sorry
                      next
                        case split_case_05
                        by sorry
                      next
                        case split_case_06
                        by sorry
                      next
                        case split_case_07
                        by sorry
                      next
                        case split_case_08
                        by sorry
                      next
                        case split_case_09
                        by sorry
                      next
                        case split_case_10
                        by sorry
                      next
                        case split_case_11
                        by sorry
                      next
                        case split_case_12
                        by sorry
                      next
                        case split_case_13
                        by sorry
                      next
                        case split_case_14
                        by sorry
                      next
                        case split_case_15
                        by sorry
                      qed
                    next
                      case select_reader
                      by sorry
                    qed
                  qed
                next
                  case select_tag
                  by sorry
                qed
              next
                case Setup_case_2
                by sorry
              next
                case select_reader
                by sorry
              qed
            qed
          qed
        qed
      qed
    next
      case tag1
      by sorry
    qed
  next
    case RHS
    step( simplify )
    by sorry
  qed
next
  case Rule_Send
  by sorry
next
  case Rule_Setup
  by sorry
next
  case Rule_reader1
  by sorry
next
  case Rule_reader2
  by sorry
next
  case Rule_select_reader
  by sorry
next
  case Rule_select_tag
  by sorry
next
  case Rule_tag1
  by sorry
next
  case Rule_tag2
  by sorry
qed

end