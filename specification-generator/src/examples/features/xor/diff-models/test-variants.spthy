theory Test_Variants
begin

builtins: symmetric-encryption, xor

/*
   Protocol:    A Test protocol to test variants and new variables
   Modeler:     
   Date:        July 2017
   Source:      

   Status:      Should be equivalent, except if the line in rule "In" is not commented out.

 */

rule fixA:
    [ 
    ]
  --[ OnlyOnce()
    ]->
    [ !Const($A)
    ]
  

rule Out:
  let m1 = senc{diff(zero,$A)}~ka
  in
    [ Fr(~ka)
    , !Const($A)
    ]
  --[ OUT1(m1)
    ]->
    [ Out( m1 )
    , St1( ~ka )
    ]

rule xorPub:
  let m1 = senc{m}~ka
      m2 = senc{m âŠ• $A}~kb
  in
    [ St1(~ka)
    , In( m1 )
    , Fr(~kb)
    , !Const($A)
    ]
  --[ IN1(m1)
    ]->
    [ Out( m2 )
    , St2(~kb)
    ]

rule In:
  let m2 = senc{diff($A,zero)}~kb
  in
    [ In( m2 )
    , St2(~kb)
// The next line should break equivalence
//    , In( diff($A,$B) )
    ]
  --[ END()
    ]->
    [ 
    ]

lemma types [sources]:
  " (All m1 #i.
       IN1( m1) @ i
       ==>
       ( (Ex #j. OUT1( m1 ) @ j & j < i)
       )
    )
  "

lemma sanity:
exists-trace
  " Ex #j. END() @ j "

restriction onlyOnce:
  "All #i #j. OnlyOnce() @ #i & OnlyOnce() @ #j ==> #i = #j"

end
