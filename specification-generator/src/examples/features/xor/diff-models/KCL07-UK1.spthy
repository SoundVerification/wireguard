theory KCL07_untrac_weak begin

builtins: xor, hashing, multiset

/*
KCL07: Reader R, RFID tag T, shared knowledge k, ID

   R: knows(k, ID)
   T: knows(k, ID)
   R: fresh(r1)
R->T: r1
   T: fresh(r2)
T->R: ID XOR r2,  h(r1,k) XOR r2  
   
   R considers T recent alive if it can find ID, k such that
     the pair of terms received from T in the last step satisfies
     
     ID XOR r2  XOR  h(r1,k) XOR r2   =   ID XOR h(r1,k)

recent aliveness is satisfied, but untracability is not.
The model below focuses on untraceability.
The property being checked is weak unlinkability of the tag for one session.
*/

rule setup:
   let id1 = ~k1
       id2 = ~k2
       idb = diff(~k1, ~k2)
   in
   [ Fr( ~k1 )
   , Fr( ~k2 )
   , Fr( ~id1 )
   , Fr( ~id2 )   
   ]
--[ OnlyOnce('setup'), Create(~k1), Create(~k2) ]->
   [ TagRun(~k1, ~id1)
    // , ReaderRun(id1, 'learning')
    // , TagRun(~k2, ~id2)
    // , ReaderRun(id2, 'learning')
    , TagRun(idb, diff(~id1, ~id2))
   ]
rule reader1:
   [ Fr( ~r1 ) ]
 --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 )
   , Initiated( ~r1 ) 
   ]

rule tag1:
   [ In( r1 )
   , Fr( ~r2 )
   , TagRun( ~k, ~id ) 
   ]
 --[ Response( ~k, 'Tag' )
   ]->
   [ Out( <~id XOR ~r2, h(<r1,~k>) XOR ~r2>)
   ]

rule reader2:
   [ Initiated( ~r1 )
   , ReaderRun( ~k, ~id )
//   , In( <idr2, hashr2> ) // This is how it should be
   , In( xoredhash )        // This is the only way I can make it work
   ]
 --[ Alive( ~k, 'Tag' )
//   , Eq( idr2 XOR hashr2, ~id XOR h(<~r1,~k>) ) // How it should be
   , Eq( xoredhash, ~id XOR h(<~r1,~k>) )  // how it works
   ]->
   []

restriction onylOnce:
  "All x #i1 #i2. OnlyOnce(x)@i1 & OnlyOnce(x)@i2 ==> #i1 = #i2"

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"


// OK. As there is no ReaderRun fact created in the setup rule, the reader2 rule cannot ever be executed, so this lemma is trivially satisfied. 
lemma recentalive_tag:
  all-traces "∀ x #i. (Alive( x, 'Tag' ) @ #i) ⇒ (∃ y #j #k. Challenge(y, 'Reader') @k & Response( x, 'Tag' ) @ #j & k < j & j < i)"

// OK. As there is no ReaderRun fact created in the setup rule, the reader2 rule cannot ever be executed, so executability cannot work. 
lemma executable:
  exists-trace "∃ x #i #j. (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
                   // only one of each wanted for executability
                   ∧ (All #k. Alive(x,'Tag')@k ==> #i=#k)
                   ∧ (All #k. Response(x,'Tag')@k ==> #j=#k)"

// FALSIFIED, attack found AUTOMATICALLY (from Rule_equality, LHS) on (2017-11-09, 73593dd9747f3320384227ff086f7fca0f75c488), stored as KCL07-untrac-weak-attack.spthy
// Observational_equivalence lemma

end
