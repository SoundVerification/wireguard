theory Chaum_simplified_Offline_Anonymity begin

// Function signature and definition of the equational theory E

builtins: xor
functions: blind/2, checksign/2, fst/1, pair/2, pk/1, sign/2, snd/1
equations:
    checksign(sign(m, k), pk(k)) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Register_Corrupted_Bank_pk:
   [ Fr( ~ltkB ), Fr( ~c ) ]
  --[ OnlyOnce( ) ]->
   [
   !Bank_Ltk( $B, ~ltkB ), !Bank_Pk( $B, pk(~ltkB) ), Out( ~ltkB ),
   !TestSubject( ~c )
   ]

rule (modulo E) agent_id:
   [ Fr( ~C ) ] --> [ !Customer( ~C ) ]

rule (modulo E) C_1_2:
   [ Fr( ~x ), Fr( ~r ), !Customer( ~c1 ), !TestSubject( ~c2 ) ]
  --[
  Mint( (~x⊕diff(~c1, ~c2)), ~x, ~r ), Mint( ~x, ~x, ~r ),
  !TestSubject( diff(~c1, ~c2) )
  ]->
   [
   Out( <blind((~x⊕diff(~c1, ~c2)), ~r), blind(~x, ~r)> ),
   !St_C_1( diff(~c1, ~c2), ~x, ~r )
   ]

rule (modulo E) C_2:
   [ !St_C_1( C, ~y, ~r ), In( blind(x, ~r) ) ]
  --[ Coin( x, ~y, ~r ), Spend( C, ~y, ~r ) ]->
   [ Out( x ) ]

restriction OnlyOnce [right]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction OnlyOnce [left]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma coins [right, sources]:
  all-traces
  "∀ x y r #i. (Coin( x, y, r ) @ #i) ⇒ (∃ #j. Mint( x, y, r ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x y r #i.
  (Coin( x, y, r ) @ #i) ∧ ∀ #j. (Mint( x, y, r ) @ #j) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Mint( x, ~y, ~r ) @ #j) ∧ ¬(last(#j))) )
    case case_1
    solve( !St_C_1( C, ~y, ~r ) ▶₀ #i )
      case C_1_2
      solve( !KU( blind(x, ~r) ) @ #vk )
        case C_1_2_case_1
        by contradiction /* from formulas */
      next
        case C_1_2_case_2
        by contradiction /* from formulas */
      next
        case C_2
        solve( Mint( t, ~y.1, ~r.1 ) @ #j )
          case C_1_2_case_1
          by contradiction /* impossible chain */
        next
          case C_1_2_case_2
          by contradiction /* impossible chain */
        qed
      next
        case c_blind
        solve( !KU( ~r ) @ #vk.2 )
          case C_2
          solve( Mint( t, ~y.1, ~r.1 ) @ #j )
            case C_1_2_case_1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_xor_case_1
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_2
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_3
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_4
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_5
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_6
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          next
            case C_1_2_case_2
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma coins [left, sources]:
  all-traces
  "∀ x y r #i. (Coin( x, y, r ) @ #i) ⇒ (∃ #j. Mint( x, y, r ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x y r #i.
  (Coin( x, y, r ) @ #i) ∧ ∀ #j. (Mint( x, y, r ) @ #j) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Mint( x, ~y, ~r ) @ #j) ∧ ¬(last(#j))) )
    case case_1
    solve( !St_C_1( C, ~y, ~r ) ▶₀ #i )
      case C_1_2
      solve( !KU( blind(x, ~r) ) @ #vk )
        case C_1_2_case_1
        by contradiction /* from formulas */
      next
        case C_1_2_case_2
        by contradiction /* from formulas */
      next
        case C_2
        solve( Mint( t, ~y.1, ~r.1 ) @ #j )
          case C_1_2_case_1
          by contradiction /* impossible chain */
        next
          case C_1_2_case_2
          by contradiction /* impossible chain */
        qed
      next
        case c_blind
        solve( !KU( ~r ) @ #vk.2 )
          case C_2
          solve( Mint( t, ~y.1, ~r.1 ) @ #j )
            case C_1_2_case_1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_xor_case_1
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_2
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_3
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_4
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_5
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            next
              case d_xor_case_6
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          next
            case C_1_2_case_2
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma exec [right]:
  exists-trace "∃ x y r #i. Spend( x, y, r ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x y r #i. (Spend( x, y, r ) @ #i)"
*/
simplify
solve( !St_C_1( x, ~y, ~r ) ▶₀ #i )
  case C_1_2
  solve( !KU( blind(x, ~r) ) @ #vk )
    case C_1_2_case_1
    solve( splitEqs(1) )
      case split
      SOLVED // trace found
    qed
  qed
qed

lemma exec [left]:
  exists-trace "∃ x y r #i. Spend( x, y, r ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x y r #i. (Spend( x, y, r ) @ #i)"
*/
simplify
solve( !St_C_1( x, ~y, ~r ) ▶₀ #i )
  case C_1_2
  solve( !KU( blind(x, ~r) ) @ #vk )
    case C_1_2_case_1
    solve( splitEqs(1) )
      case split
      SOLVED // trace found
    qed
  qed
qed

lemma anonymity [right]:
  all-traces
  "∀ x #i. (!TestSubject( x ) @ #i) ⇒ (¬(∃ #j. !KU( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (!TestSubject( x ) @ #i) ∧ ∃ #j. (!KU( x ) @ #j)"
*/
simplify
solve( !Customer( ~c1 ) ▶₂ #i )
  case agent_id
  solve( !TestSubject( ~c2 ) ▶₃ #i )
    case Register_Corrupted_Bank_pk
    solve( !KU( ~c2 ) @ #j )
      case C_2
      solve( !KU( ~y ) @ #vk.1 )
        case C_2_case_2
        solve( !KU( blind((~c2⊕~y), ~r.1) ) @ #vk.1 )
          case C_1_2
          solve( !KU( blind(~y, ~r.1) ) @ #vk.2 )
            case C_1_2
            solve( splitEqs(0) )
              case split
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma anonymity [left]:
  all-traces
  "∀ x #i. (!TestSubject( x ) @ #i) ⇒ (¬(∃ #j. !KU( x ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i. (!TestSubject( x ) @ #i) ∧ ∃ #j. (!KU( x ) @ #j)"
*/
simplify
solve( !Customer( ~c1 ) ▶₂ #i )
  case agent_id
  solve( !TestSubject( ~c2 ) ▶₃ #i )
    case Register_Corrupted_Bank_pk
    solve( !KU( ~c1 ) @ #j )
      case C_2
      solve( !KU( ~y ) @ #vk.1 )
        case C_2_case_2
        solve( !KU( blind((~c1⊕~y), ~r.1) ) @ #vk.1 )
          case C_1_2
          solve( !KU( blind(~y, ~r.1) ) @ #vk.2 )
            case C_1_2
            solve( splitEqs(0) )
              case split
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_C_1_2
  by sorry // removed
next
  case Rule_C_2
  by sorry // removed
next
  case Rule_Destrd_0_checksign
  by sorry // removed
next
  case Rule_Destrd_0_fst
  by sorry // removed
next
  case Rule_Destrd_0_snd
  by sorry // removed
next
  case Rule_Destrd_xor
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case C_2
        step( solve( !St_C_1( C, ~y.1, ~r ) ▶₀ #vr ) )
          case C_1_2
          step( solve( !KU( blind(t, ~r) ) @ #vk.1 ) )
            case C_1_2_case_1
            step( solve( !KU( (y⊕z) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (y⊕z) ) ▶₀ #vk.1 ) )
                case C_2
                step( solve( !St_C_1( C, ~y.2, ~r.1 ) ▶₀ #vr.5 ) )
                  case C_1_2
                  step( solve( !KU( blind(t.1, ~r.1) ) @ #vk.2 ) )
                    case C_1_2_case_1
                    step( solve( splitEqs(1) ) )
                      case split
                      step( solve( (#vl, 0) ~~> (#i, 0) ) )
                        case Xor_case_1
                        step( solve( splitEqs(4) ) )
                          case split
                          step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                            case d_xor_case_1
                            step( solve( (#vr.9, 0) ~~> (#vk.1, 0) ) )
                              case Xor_case_2
                              step( solve( !KU( (~y⊕x⊕~y.1) ) @ #vk.3 ) )
                                case coerce
                                step( solve( !KD( (~y⊕x⊕~y.1) ) ▶₀ #vk.3 ) )
                                  case C_2
                                  step( solve( !St_C_1( C, ~y.2, ~r.2 ) ▶₀ #vr.10 ) )
                                    case C_1_2
                                    step( solve( !KU( blind(t, ~r.2) ) @ #vk.4 ) )
                                      case C_1_2_case_1
                                      step( solve( splitEqs(15) ) )
                                        case split
                                        step( solve( (#vl.4, 0) ~~> (#vk.3, 0) ) )
                                          case d_xor_case_3
                                          step( solve( (#vr.14, 0) ~~> (#vk.3, 0) ) )
                                            case Xor_case_2
                                            step( solve( !KU( ~y.2 ) @ #vk.7 ) )
                                              case C_2_case_1
                                              step( solve( !KU( ~y.1 ) @ #vk.8 ) )
                                                case C_2_case_2
                                                step( solve( !KU( ~y ) @ #vk.9 ) )
                                                  case C_2_case_2
                                                  step( solve( !KU( ~x ) @ #vk.10 ) )
                                                    case C_2
                                                    step( solve( !KU( ~y.3 ) @ #vk.14 ) )
                                                      case C_2_case_2
                                                      step( solve( !KU( blind(~y.1, ~r.1)
                                                                   ) @ #vk.12 ) )
                                                        case C_1_2
                                                        step( solve( !KU( blind(~y, ~r)
                                                                     ) @ #vk.13 ) )
                                                          case C_1_2
                                                          step( solve( !KU( blind((~x⊕~y.3), ~r.3)
                                                                       ) @ #vk.14 ) )
                                                            case C_1_2
                                                            step( solve( !KU( blind(~y.3, ~r.3)
                                                                         ) @ #vk.15 ) )
                                                              case C_1_2
                                                              by ATTACK // trace found
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Equality
  by sorry
next
  case Rule_Register_Corrupted_Bank_pk
  by sorry // removed
next
  case Rule_Send
  by sorry // removed
next
  case Rule_agent_id
  by sorry // removed
qed

end