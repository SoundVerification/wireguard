theory KCL07_untrac_weak begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) setup:
   [ Fr( ~k1 ), Fr( ~id1 ), Fr( ~k2 ), Fr( ~id2 ) ]
  --[ OnlyOnce( 'setup' ) ]->
   [
   Transcript( <~k1, ~id1> ), Reader( (<~k1, ~id1>+<~k2, ~id2>) ),
   TagRun( diff(<~k1, ~id1>, <~k2, ~id2>) )
   ]

rule (modulo E) transcript:
   [ Transcript( <~k, ~id> ), Fr( ~r1 ), Fr( ~r2 ) ]
  -->
   [ Out( ~r1 ), Out( <~r2, (~id⊕~r2), (~r2⊕h(<~r1, ~k>))> ) ]

rule (modulo E) initiatereader:
   [ Reader( (d1+d2) ), Fr( ~r0 ) ] --> [ ReaderRun( d1 ) ]

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), TagRun( <~k, ~id> ) ]
  --[ Response( ~k, 'Tag' ) ]->
   [ Out( <(~id⊕~r2), (~r2⊕h(<r1, ~k>))> ) ]

rule (modulo E) reader2:
   [ Initiated( ~r1 ), ReaderRun( <~k, ~id> ), In( xoredhash ) ]
  --[ Alive( ~k, 'Tag' ), Eq( xoredhash, (~id⊕h(<~r1, ~k>)) ) ]->
   [ ]

restriction onylOnce [right]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

restriction onylOnce [left]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

restriction equality [right]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction equality [left]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

lemma recentalive_tag [right]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_tag [left]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma executable [right]:
  exists-trace
  "∃ x #i #j.
    (((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
     (∀ #k. (Alive( x, 'Tag' ) @ #k) ⇒ (#i = #k))) ∧
    (∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
 ∧
  (∀ #k. (Alive( x, 'Tag' ) @ #k) ⇒ #i = #k) ∧
  (∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ #j = #k)"
*/
by sorry

lemma executable [left]:
  exists-trace
  "∃ x #i #j.
    (((Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)) ∧
     (∀ #k. (Alive( x, 'Tag' ) @ #k) ⇒ (#i = #k))) ∧
    (∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ (#j = #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)
 ∧
  (∀ #k. (Alive( x, 'Tag' ) @ #k) ⇒ #i = #k) ∧
  (∀ #k. (Response( x, 'Tag' ) @ #k) ⇒ #j = #k)"
*/
by sorry

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( TagRun( <~k, ~id> ) ▶₂ #vr ) )
          case setup
          step( solve( splitEqs(0) ) )
            case split
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case Xor
              step( solve( !KU( (~id⊕~r2) ) @ #vk ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.2 ) )
                  case tag1_case_2
                  step( solve( !KU( ~id ) @ #vk.3 ) )
                    case transcript
                    step( solve( !KU( h(<r1, ~k>) ) @ #vk.4 ) )
                      case transcript
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case transcript_case_1
                        step( solve( !KU( ~r1 ) @ #vk.5 ) )
                          case transcript
                          by ATTACK // trace found
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

end

==============================================================================
summary of summaries:

analyzed: KCL07-untrac-akiss.spthy

  RHS :  recentalive_tag (all-traces): analysis incomplete (1 steps)
  LHS :  recentalive_tag (all-traces): analysis incomplete (1 steps)
  RHS :  executable (exists-trace): analysis incomplete (1 steps)
  LHS :  executable (exists-trace): analysis incomplete (1 steps)
  DiffLemma:  Observational_equivalence : falsified - found trace (15 steps)

==============================================================================
