theory LAK06_UK_weak
begin

// This theory models LAK06 as taken from [1].
//
// The key chaining as in actual LAK06 is NOT part of this model.
//
// This models specifies weak unlinkability [1] for two sessions of tag and
// reader. Tamarin proves the absence of attack for such a model as claimed
// [1]. Note that the protocol does not satisfy a stronger notion of
// unlinkability; see the file LAK06_UK.spthy.

// [1] Attacks on RFID protocols" v1.1 from Aug 6, 2009, by Ton van Deursen and Sasa Radomirovic

builtins: xor, hashing, multiset

/*
  R -> T: r0
  T -> R: r1, h(r0 XOR r1 XOR k) 
  R -> T: h(h(r0 XOR r1 XOR k) XOR k XOR r0)

*/

rule setup:
   let id1 = ~k1
       id2 = ~k2
       idb = diff(~k1, ~k2)
       idReader = id1 + id2
   in
   [ Fr( ~k1 )
   , Fr( ~k2 )
   ]
--[ OnlyOnce('setup'), Create(~k1), Create(~k2) ]->
   [  Transcript(id1, 'learning')    
    , Reader(idReader, 'guessing')
    , TagRun(idb, 'guessing')
   ]

rule initiatereader:
  [ Reader(k1 + k2, phase), Fr(~r0)]
--[ Phase(phase)]->
  [ ReaderState1(k1, ~r0, phase), Out(~r0) ]

rule tag1:
  [ TagRun(~k, phase), Fr(~r1), In(r0) ]
  --[ Running(<'R','T',<~k,r0,~r1>>), Phase(phase) ]->
  [ TagState1(~k, ~r1, r0, phase), Out(<~r1, h(r0 XOR ~r1 XOR ~k)>) ]

rule acceptreader:
  [ ReaderState1(~k, ~r0, phase), In(<r1, h(~r0 XOR r1 XOR ~k)>) ]
--[ Commit(<'R','T',<~k,~r0,r1>>)
  , Running(<'T','R',<~k,~r0,r1>>), Phase(phase) ]->
  [ Out(h(h(~r0 XOR r1 XOR ~k) XOR ~k XOR ~r0)) ]

rule accepttag:
  [ TagState1(~k, ~r1, r0, phase), In(h(h(r0 XOR ~r1 XOR ~k) XOR ~k XOR r0)) ]
--[ Commit(<'T','R',<~k,r0,~r1>>)
  , FinTag(), Phase(phase)]->
  [ ]

rule transcript:
  let m1 = h(~r0 XOR ~r1 XOR ~k)
      m2 = h(h(~r0 XOR ~r1 XOR ~k) XOR ~k XOR ~r0)
  in
  [ Transcript(~k,phase)
  , Fr(~r1)
  , Fr(~r0) 
  ]
--[ Phase(phase) ]->
  [ Out(~r0)
  , Out(<~r1,m1>)
  , Out(m2)
  ]
  
restriction onylOnce:
  "All x #i1 #i2. OnlyOnce(x)@i1 & OnlyOnce(x)@i2 ==> #i1 = #i2"

/* The following would implement a restriction to executions that comply with phase constraints (guessing after learning only).
   However, due to the treatment of restrictions in diff-mode, it creates non-termination issue (it tries to explore all possible ways
   to comply with the restriction).
   Fortunately, Tamarin establishes diff-equivalence without, implying diff-equivalence with the restriction
   (note that this reasoning would be wrong for observational equivalence or in presence of function symbols treated modulo AC such as multisets).
*/
// restriction complyWithPhase:
//   "All #i1 #i2. (Phase('learning')@i1 & Phase('guessing')@i2) ==> #i1 < #i2"
//   // This restriction causes non-termination issue when there was no such issue before ...

// PROVEN, quick autoproof -- when? check old version, store execution and try loading in current 
// Killed after 5 minutes in: (2017-11-07, 7dafa2d881cffac9cd1e00dd8317f27038c95cdf)
lemma executable:
  exists-trace
  " (Ex #i. FinTag()@i)
  & (All x #i1 #i2. OnlyOnce(x)@i1 & OnlyOnce(x)@i2 ==> #i1 = #i2)"

// PROVEN, autoproof in (3457.42s CPU time)
// Git revision: 73593dd9747f3320384227ff086f7fca0f75c488, branch: develop
// Compiled at: 2017-11-09 08:34:57.786964 UTC
end
