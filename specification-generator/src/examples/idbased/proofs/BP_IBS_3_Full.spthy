theory BP_IBS_3 begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, bilinear-pairing
functions: GetIBMasterPublicKey/1, IBPriv/2, IBPub/2, KDF/1, fst/1,
           idsign/2, idverify/3, pair/2, snd/1, true/0
equations:
    fst(<x.1, x.2>) = x.1,
    idverify(idsign(m, IBPriv(A, IBMasterPrivateKey)), m,
             IBPub(A, GetIBMasterPublicKey(IBMasterPrivateKey)))
  = true,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Reveal_IB_SIGN_privkey:
   [ !IB_Identity( ~id, A, Auth_pk, Auth_sk, Sign_pk, Sign_sk ) ]
  --[ Reveal( 'ID_SIGN', A ) ]->
   [ Out( Sign_sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_IB_AUTH_privkey:
   [ !IB_Identity( ~id, A, Auth_pk, Auth_sk, Sign_pk, Sign_sk ) ]
  --[ Reveal( 'ID_AUTH', A ) ]->
   [ Out( Auth_sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_IB_MasterPrivateKey:
   [ !IB_MasterPrivateKey( PKG, IBMasterPrivateKey ) ]
  --[ Reveal( 'PKG', PKG ) ]->
   [ Out( IBMasterPrivateKey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) create_IB_AUTH_PrivateKeyGenerator:
   [ Fr( ~IBMasterPrivateKey ) ]
  --[ Once( 'AUTH' ) ]->
   [
   !IB_MasterPrivateKey( 'AUTH', ~IBMasterPrivateKey ),
   Out( <'AUTH', pmult(~IBMasterPrivateKey, 'P')> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) create_IB_SIGN_PrivateKeyGenerator:
   [ Fr( ~IBMasterPrivateKey ) ]
  --[ Once( 'SIGN' ) ]->
   [
   !IB_MasterPrivateKey( 'SIGN', ~IBMasterPrivateKey ),
   Out( <'SIGN', GetIBMasterPublicKey(~IBMasterPrivateKey)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) create_IB_identity:
   [
   !IB_MasterPrivateKey( 'AUTH', Auth_IBMasterPrivateKey ),
   !IB_MasterPrivateKey( 'SIGN', Sign_IBMasterPrivateKey ), Fr( ~id )
   ]
  --[
  CreateId( $A,
            <pmult(Auth_IBMasterPrivateKey, 'P'), 
             IBPriv($A, Auth_IBMasterPrivateKey), 
             GetIBMasterPublicKey(Sign_IBMasterPrivateKey), 
             IBPriv($A, Sign_IBMasterPrivateKey)>
  ),
  User( )
  ]->
   [
   !IB_Identity( ~id, $A, pmult(Auth_IBMasterPrivateKey, 'P'),
                 IBPriv($A, Auth_IBMasterPrivateKey),
                 GetIBMasterPublicKey(Sign_IBMasterPrivateKey),
                 IBPriv($A, Sign_IBMasterPrivateKey)
   )
   ]

  /*
  rule (modulo AC) create_IB_identity:
     [
     !IB_MasterPrivateKey( 'AUTH', Auth_IBMasterPrivateKey ),
     !IB_MasterPrivateKey( 'SIGN', Sign_IBMasterPrivateKey ), Fr( ~id )
     ]
    --[
    CreateId( $A,
              <z, IBPriv($A, Auth_IBMasterPrivateKey), 
               GetIBMasterPublicKey(Sign_IBMasterPrivateKey), 
               IBPriv($A, Sign_IBMasterPrivateKey)>
    ),
    User( )
    ]->
     [
     !IB_Identity( ~id, $A, z, IBPriv($A, Auth_IBMasterPrivateKey),
                   GetIBMasterPublicKey(Sign_IBMasterPrivateKey),
                   IBPriv($A, Sign_IBMasterPrivateKey)
     )
     ]
    variants (modulo AC)
    1. Auth_IBMasterPrivateKey
             = Auth_IBMasterPrivateKey.9
       z     = pmult(Auth_IBMasterPrivateKey.9, 'P')
    
    2. Auth_IBMasterPrivateKey
             = one
       z     = 'P'
  */

rule (modulo E) Initiator_1send:
   [ Fr( ~a ), !IB_Identity( ~id, Ini, Auth_pk, Auth_sk, Sign_pk, Sign_sk )
   ]
  --[ OUT_Ini_1send( <pmult(~a, 'P'), Ini> ), Secret( 'R', Ini, ~a ) ]->
   [
   Out( <pmult(~a, 'P'), Ini> ),
   St_Ini_1( ~id, Ini, Auth_pk, Auth_sk, Sign_pk, Sign_sk, pmult(~a, 'P'),
             ~a
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Responder_1recv_send:
   [
   !IB_Identity( ~id, Resp, Auth_pk, Auth_sk, Sign_pk, Sign_sk ), Fr( ~b ),
   In( <ini_share, Ini> )
   ]
  --[
  Neq( ini_share, 'P' ), Receive( Resp, <ini_share, Ini> ),
  IN_RESP_1recv( <ini_share, Ini> ),
  OUT_RESP_1recv( <Resp, pmult(~b, 'P'), 
                   idsign(<'Responder', ini_share, pmult(~b, 'P'), Ini>, Sign_sk)>
  ),
  Honest( Resp ), Secret( 'R', Resp, ~b ),
  Running( Resp, Ini,
           <'Responder', 'Initiator', KDF(em(ini_share, pmult(~b, Auth_pk)))>
  )
  ]->
   [
   Out( <Resp, pmult(~b, 'P'), 
         idsign(<'Responder', ini_share, pmult(~b, 'P'), Ini>, Sign_sk)>
   ),
   St_Resp_1( ~id, Resp, Auth_pk, Auth_sk, Sign_pk, Sign_sk, pmult(~b, 'P'),
              Ini, ini_share, KDF(em(ini_share, pmult(~b, Auth_pk)))
   )
   ]

  /*
  rule (modulo AC) Responder_1recv_send:
     [
     !IB_Identity( ~id, Resp, Auth_pk, Auth_sk, Sign_pk, Sign_sk ), Fr( ~b ),
     In( <ini_share, Ini> )
     ]
    --[
    Neq( ini_share, 'P' ), Receive( Resp, <ini_share, Ini> ),
    IN_RESP_1recv( <ini_share, Ini> ),
    OUT_RESP_1recv( <Resp, pmult(~b, 'P'), 
                     idsign(<'Responder', ini_share, pmult(~b, 'P'), Ini>, Sign_sk)>
    ),
    Honest( Resp ), Secret( 'R', Resp, ~b ),
    Running( Resp, Ini, <'Responder', 'Initiator', KDF(z)> )
    ]->
     [
     Out( <Resp, pmult(~b, 'P'), 
           idsign(<'Responder', ini_share, pmult(~b, 'P'), Ini>, Sign_sk)>
     ),
     St_Resp_1( ~id, Resp, Auth_pk, Auth_sk, Sign_pk, Sign_sk, pmult(~b, 'P'),
                Ini, ini_share, KDF(z)
     )
     ]
    variants (modulo AC)
      1. ~b    = ~b.22
         Auth_pk
               = Auth_pk.24
         ini_share
               = ini_share.30
         z     = em(Auth_pk.24, ini_share.30)^~b.22
    
      2. ~b    = ~b.136
         Auth_pk
               = Auth_pk.138
         ini_share
               = pmult(x.269, x.270)
         z     = em(Auth_pk.138, x.270)^(~b.136*x.269)
    
      3. ~b    = ~b.136
         Auth_pk
               = pmult(x.269, x.270)
         ini_share
               = ini_share.144
         z     = em(ini_share.144, x.270)^(~b.136*x.269)
    
      4. ~b    = ~b.137
         Auth_pk
               = pmult(inv(~b.137), x.272)
         ini_share
               = ini_share.145
         z     = em(ini_share.145, x.272)
    
      5. ~b    = ~b.138
         Auth_pk
               = pmult(inv((~b.138*x.273)), x.274)
         ini_share
               = ini_share.146
         z     = em(ini_share.146, x.274)^inv(x.273)
    
      6. ~b    = ~b.138
         Auth_pk
               = pmult((x.273*inv(~b.138)), x.274)
         ini_share
               = ini_share.146
         z     = em(ini_share.146, x.274)^x.273
    
      7. ~b    = ~b.139
         Auth_pk
               = pmult((x.274*inv((~b.139*x.275))), x.276)
         ini_share
               = ini_share.147
         z     = em(ini_share.147, x.276)^(x.274*inv(x.275))
    
      8. ~b    = ~b.142
         Auth_pk
               = pmult(x.275, x.276)
         ini_share
               = pmult(inv(x.275), x.282)
         z     = em(x.276, x.282)^~b.142
    
      9. ~b    = ~b.142
         Auth_pk
               = pmult(inv(x.275), x.276)
         ini_share
               = pmult(x.275, x.282)
         z     = em(x.276, x.282)^~b.142
    
     10. ~b    = ~b.143
         Auth_pk
               = Auth_pk.145
         ini_share
               = pmult(inv(~b.143), x.284)
         z     = em(Auth_pk.145, x.284)
    
     11. ~b    = ~b.143
         Auth_pk
               = pmult(x.276, x.277)
         ini_share
               = pmult(x.283, x.284)
         z     = em(x.277, x.284)^(~b.143*x.276*x.283)
    
     12. ~b    = ~b.143
         Auth_pk
               = pmult(x.276, x.277)
         ini_share
               = pmult(inv((x.276*x.283)), x.284)
         z     = em(x.277, x.284)^(~b.143*inv(x.283))
    
     13. ~b    = ~b.143
         Auth_pk
               = pmult(x.276, x.277)
         ini_share
               = pmult((x.283*inv(x.276)), x.284)
         z     = em(x.277, x.284)^(~b.143*x.283)
    
     14. ~b    = ~b.143
         Auth_pk
               = pmult(inv(x.276), x.277)
         ini_share
               = pmult(inv(x.283), x.284)
         z     = em(x.277, x.284)^(~b.143*inv((x.276*x.283)))
    
     15. ~b    = ~b.143
         Auth_pk
               = pmult(inv(x.276), x.277)
         ini_share
               = pmult((x.276*x.283), x.284)
         z     = em(x.277, x.284)^(~b.143*x.283)
    
     16. ~b    = ~b.143
         Auth_pk
               = pmult(inv((x.276*x.277)), x.278)
         ini_share
               = pmult(x.276, x.284)
         z     = em(x.278, x.284)^(~b.143*inv(x.277))
    
     17. ~b    = ~b.143
         Auth_pk
               = pmult((x.276*x.277), x.278)
         ini_share
               = pmult(inv(x.276), x.284)
         z     = em(x.278, x.284)^(~b.143*x.277)
    
     18. ~b    = ~b.143
         Auth_pk
               = pmult((x.276*inv(x.277)), x.278)
         ini_share
               = pmult(x.277, x.284)
         z     = em(x.278, x.284)^(~b.143*x.276)
    
     19. ~b    = ~b.143
         Auth_pk
               = pmult((x.276*inv(x.277)), x.278)
         ini_share
               = pmult((x.277*inv(x.276)), x.284)
         z     = em(x.278, x.284)^~b.143
    
     20. ~b    = ~b.144
         Auth_pk
               = Auth_pk.146
         ini_share
               = pmult(inv((~b.144*x.285)), x.286)
         z     = em(Auth_pk.146, x.286)^inv(x.285)
    
     21. ~b    = ~b.144
         Auth_pk
               = Auth_pk.146
         ini_share
               = pmult((x.285*inv(~b.144)), x.286)
         z     = em(Auth_pk.146, x.286)^x.285
    
     22. ~b    = ~b.144
         Auth_pk
               = pmult(x.277, x.278)
         ini_share
               = pmult((x.284*inv((x.277*x.285))), x.286)
         z     = em(x.278, x.286)^(~b.144*x.284*inv(x.285))
    
     23. ~b    = ~b.144
         Auth_pk
               = pmult(x.279, x.280)
         ini_share
               = pmult(inv(~b.144), x.286)
         z     = em(x.280, x.286)^x.279
    
     24. ~b    = ~b.144
         Auth_pk
               = pmult(x.279, x.280)
         ini_share
               = pmult(inv((~b.144*x.279)), x.286)
         z     = em(x.280, x.286)
    
     25. ~b    = ~b.144
         Auth_pk
               = pmult(inv(~b.144), x.279)
         ini_share
               = pmult(x.285, x.286)
         z     = em(x.279, x.286)^x.285
    
     26. ~b    = ~b.144
         Auth_pk
               = pmult(inv(x.277), x.278)
         ini_share
               = pmult((x.284*inv(x.285)), x.286)
         z     = em(x.278, x.286)^(~b.144*x.284*inv((x.277*x.285)))
    
     27. ~b    = ~b.144
         Auth_pk
               = pmult(inv(x.279), x.280)
         ini_share
               = pmult((x.279*inv(~b.144)), x.286)
         z     = em(x.280, x.286)
    
     28. ~b    = ~b.144
         Auth_pk
               = pmult(inv((~b.144*x.279)), x.280)
         ini_share
               = pmult(x.279, x.286)
         z     = em(x.280, x.286)
    
     29. ~b    = ~b.144
         Auth_pk
               = pmult(inv((x.277*x.278)), x.279)
         ini_share
               = pmult((x.277*x.285), x.286)
         z     = em(x.279, x.286)^(~b.144*x.285*inv(x.278))
    
     30. ~b    = ~b.144
         Auth_pk
               = pmult(inv((x.277*x.278)), x.279)
         ini_share
               = pmult((x.277*inv(x.285)), x.286)
         z     = em(x.279, x.286)^(~b.144*inv((x.278*x.285)))
    
     31. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*x.278), x.279)
         ini_share
               = pmult(inv((x.277*x.285)), x.286)
         z     = em(x.279, x.286)^(~b.144*x.278*inv(x.285))
    
     32. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*x.278), x.279)
         ini_share
               = pmult((x.285*inv(x.277)), x.286)
         z     = em(x.279, x.286)^(~b.144*x.278*x.285)
    
     33. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*x.278*inv(x.279)), x.280)
         ini_share
               = pmult((x.279*inv(x.277)), x.286)
         z     = em(x.280, x.286)^(~b.144*x.278)
    
     34. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*inv(x.278)), x.279)
         ini_share
               = pmult(inv(x.285), x.286)
         z     = em(x.279, x.286)^(~b.144*x.277*inv((x.278*x.285)))
    
     35. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*inv(x.278)), x.279)
         ini_share
               = pmult(inv((x.277*x.285)), x.286)
         z     = em(x.279, x.286)^(~b.144*inv((x.278*x.285)))
    
     36. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*inv(x.278)), x.279)
         ini_share
               = pmult((x.278*x.285), x.286)
         z     = em(x.279, x.286)^(~b.144*x.277*x.285)
    
     37. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*inv(x.278)), x.279)
         ini_share
               = pmult((x.278*x.285*inv(x.277)), x.286)
         z     = em(x.279, x.286)^(~b.144*x.285)
    
     38. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*inv(x.278)), x.279)
         ini_share
               = pmult((x.278*inv((x.277*x.285))), x.286)
         z     = em(x.279, x.286)^(~b.144*inv(x.285))
    
     39. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*inv((x.278*x.279))), x.280)
         ini_share
               = pmult(x.278, x.286)
         z     = em(x.280, x.286)^(~b.144*x.277*inv(x.279))
    
     40. ~b    = ~b.144
         Auth_pk
               = pmult((x.277*inv((x.278*x.279))), x.280)
         ini_share
               = pmult((x.278*inv(x.277)), x.286)
         z     = em(x.280, x.286)^(~b.144*inv(x.279))
    
     41. ~b    = ~b.144
         Auth_pk
               = pmult((x.279*inv(~b.144)), x.280)
         ini_share
               = pmult(inv(x.279), x.286)
         z     = em(x.280, x.286)
    
     42. ~b    = ~b.145
         Auth_pk
               = Auth_pk.147
         ini_share
               = pmult((x.286*inv((~b.145*x.287))), x.288)
         z     = em(Auth_pk.147, x.288)^(x.286*inv(x.287))
    
     43. ~b    = ~b.145
         Auth_pk
               = pmult(x.280, x.281)
         ini_share
               = pmult(inv((~b.145*x.280*x.287)), x.288)
         z     = em(x.281, x.288)^inv(x.287)
    
     44. ~b    = ~b.145
         Auth_pk
               = pmult(x.280, x.281)
         ini_share
               = pmult(inv((~b.145*x.287)), x.288)
         z     = em(x.281, x.288)^(x.280*inv(x.287))
    
     45. ~b    = ~b.145
         Auth_pk
               = pmult(x.280, x.281)
         ini_share
               = pmult((x.287*inv(~b.145)), x.288)
         z     = em(x.281, x.288)^(x.280*x.287)
    
     46. ~b    = ~b.145
         Auth_pk
               = pmult(x.280, x.281)
         ini_share
               = pmult((x.287*inv((~b.145*x.280))), x.288)
         z     = em(x.281, x.288)^x.287
    
     47. ~b    = ~b.145
         Auth_pk
               = pmult(inv(x.280), x.281)
         ini_share
               = pmult(inv((~b.145*x.287)), x.288)
         z     = em(x.281, x.288)^inv((x.280*x.287))
    
     48. ~b    = ~b.145
         Auth_pk
               = pmult(inv(x.280), x.281)
         ini_share
               = pmult((x.280*x.287*inv(~b.145)), x.288)
         z     = em(x.281, x.288)^x.287
    
     49. ~b    = ~b.145
         Auth_pk
               = pmult(inv(x.280), x.281)
         ini_share
               = pmult((x.280*inv((~b.145*x.287))), x.288)
         z     = em(x.281, x.288)^inv(x.287)
    
     50. ~b    = ~b.145
         Auth_pk
               = pmult(inv((~b.145*x.280)), x.281)
         ini_share
               = pmult(x.287, x.288)
         z     = em(x.281, x.288)^(x.287*inv(x.280))
    
     51. ~b    = ~b.145
         Auth_pk
               = pmult(inv((~b.145*x.280)), x.281)
         ini_share
               = pmult(inv(x.287), x.288)
         z     = em(x.281, x.288)^inv((x.280*x.287))
    
     52. ~b    = ~b.145
         Auth_pk
               = pmult(inv((~b.145*x.280)), x.281)
         ini_share
               = pmult((x.280*x.287), x.288)
         z     = em(x.281, x.288)^x.287
    
     53. ~b    = ~b.145
         Auth_pk
               = pmult(inv((~b.145*x.280*x.281)), x.282)
         ini_share
               = pmult(x.280, x.288)
         z     = em(x.282, x.288)^inv(x.281)
    
     54. ~b    = ~b.145
         Auth_pk
               = pmult(inv((x.278*x.279)), x.280)
         ini_share
               = pmult((x.278*x.286*inv(x.287)), x.288)
         z     = em(x.280, x.288)^(~b.145*x.286*inv((x.279*x.287)))
    
     55. ~b    = ~b.145
         Auth_pk
               = pmult(inv((x.280*x.281)), x.282)
         ini_share
               = pmult((x.280*inv(~b.145)), x.288)
         z     = em(x.282, x.288)^inv(x.281)
    
     56. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*x.279), x.280)
         ini_share
               = pmult((x.286*inv((x.278*x.287))), x.288)
         z     = em(x.280, x.288)^(~b.145*x.279*x.286*inv(x.287))
    
     57. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*x.279*inv(x.280)), x.281)
         ini_share
               = pmult(inv((x.278*x.287)), x.288)
         z     = em(x.281, x.288)^(~b.145*x.279*inv((x.280*x.287)))
    
     58. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*x.279*inv(x.280)), x.281)
         ini_share
               = pmult((x.280*x.287*inv(x.278)), x.288)
         z     = em(x.281, x.288)^(~b.145*x.279*x.287)
    
     59. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*x.279*inv(x.280)), x.281)
         ini_share
               = pmult((x.280*inv((x.278*x.287))), x.288)
         z     = em(x.281, x.288)^(~b.145*x.279*inv(x.287))
    
     60. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*x.279*inv((x.280*x.281))), x.282)
         ini_share
               = pmult((x.280*inv(x.278)), x.288)
         z     = em(x.282, x.288)^(~b.145*x.279*inv(x.281))
    
     61. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*inv(x.279)), x.280)
         ini_share
               = pmult((x.279*x.286*inv((x.278*x.287))), x.288)
         z     = em(x.280, x.288)^(~b.145*x.286*inv(x.287))
    
     62. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*inv(x.279)), x.280)
         ini_share
               = pmult((x.286*inv(x.287)), x.288)
         z     = em(x.280, x.288)^(~b.145*x.278*x.286*inv((x.279*x.287)))
    
     63. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*inv(x.279)), x.280)
         ini_share
               = pmult((x.286*inv((x.278*x.287))), x.288)
         z     = em(x.280, x.288)^(~b.145*x.286*inv((x.279*x.287)))
    
     64. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*inv((x.279*x.280))), x.281)
         ini_share
               = pmult((x.279*x.287), x.288)
         z     = em(x.281, x.288)^(~b.145*x.278*x.287*inv(x.280))
    
     65. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*inv((x.279*x.280))), x.281)
         ini_share
               = pmult((x.279*x.287*inv(x.278)), x.288)
         z     = em(x.281, x.288)^(~b.145*x.287*inv(x.280))
    
     66. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*inv((x.279*x.280))), x.281)
         ini_share
               = pmult((x.279*inv(x.287)), x.288)
         z     = em(x.281, x.288)^(~b.145*x.278*inv((x.280*x.287)))
    
     67. ~b    = ~b.145
         Auth_pk
               = pmult((x.278*inv((x.279*x.280))), x.281)
         ini_share
               = pmult((x.279*inv((x.278*x.287))), x.288)
         z     = em(x.281, x.288)^(~b.145*inv((x.280*x.287)))
    
     68. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*x.281), x.282)
         ini_share
               = pmult(inv((~b.145*x.280)), x.288)
         z     = em(x.282, x.288)^x.281
    
     69. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*x.281*inv(~b.145)), x.282)
         ini_share
               = pmult(inv(x.280), x.288)
         z     = em(x.282, x.288)^x.281
    
     70. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*inv(~b.145)), x.281)
         ini_share
               = pmult(x.287, x.288)
         z     = em(x.281, x.288)^(x.280*x.287)
    
     71. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*inv(~b.145)), x.281)
         ini_share
               = pmult(inv((x.280*x.287)), x.288)
         z     = em(x.281, x.288)^inv(x.287)
    
     72. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*inv(~b.145)), x.281)
         ini_share
               = pmult((x.287*inv(x.280)), x.288)
         z     = em(x.281, x.288)^x.287
    
     73. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*inv(x.281)), x.282)
         ini_share
               = pmult((x.281*inv(~b.145)), x.288)
         z     = em(x.282, x.288)^x.280
    
     74. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*inv(x.281)), x.282)
         ini_share
               = pmult((x.281*inv((~b.145*x.280))), x.288)
         z     = em(x.282, x.288)
    
     75. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*inv((~b.145*x.281))), x.282)
         ini_share
               = pmult(x.281, x.288)
         z     = em(x.282, x.288)^x.280
    
     76. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*inv((~b.145*x.281))), x.282)
         ini_share
               = pmult(inv(x.280), x.288)
         z     = em(x.282, x.288)^inv(x.281)
    
     77. ~b    = ~b.145
         Auth_pk
               = pmult((x.280*inv((~b.145*x.281))), x.282)
         ini_share
               = pmult((x.281*inv(x.280)), x.288)
         z     = em(x.282, x.288)
    
     78. ~b    = ~b.146
         Auth_pk
               = pmult(x.281, x.282)
         ini_share
               = pmult((x.288*inv((~b.146*x.281*x.289))), x.290)
         z     = em(x.282, x.290)^(x.288*inv(x.289))
    
     79. ~b    = ~b.146
         Auth_pk
               = pmult(x.281, x.282)
         ini_share
               = pmult((x.288*inv((~b.146*x.289))), x.290)
         z     = em(x.282, x.290)^(x.281*x.288*inv(x.289))
    
     80. ~b    = ~b.146
         Auth_pk
               = pmult(inv(x.281), x.282)
         ini_share
               = pmult((x.281*x.288*inv((~b.146*x.289))), x.290)
         z     = em(x.282, x.290)^(x.288*inv(x.289))
    
     81. ~b    = ~b.146
         Auth_pk
               = pmult(inv(x.281), x.282)
         ini_share
               = pmult((x.288*inv((~b.146*x.289))), x.290)
         z     = em(x.282, x.290)^(x.288*inv((x.281*x.289)))
    
     82. ~b    = ~b.146
         Auth_pk
               = pmult(inv((~b.146*x.281)), x.282)
         ini_share
               = pmult((x.288*inv(x.289)), x.290)
         z     = em(x.282, x.290)^(x.288*inv((x.281*x.289)))
    
     83. ~b    = ~b.146
         Auth_pk
               = pmult(inv((~b.146*x.281*x.282)), x.283)
         ini_share
               = pmult((x.281*x.289), x.290)
         z     = em(x.283, x.290)^(x.289*inv(x.282))
    
     84. ~b    = ~b.146
         Auth_pk
               = pmult(inv((~b.146*x.281*x.282)), x.283)
         ini_share
               = pmult((x.281*inv(x.289)), x.290)
         z     = em(x.283, x.290)^inv((x.282*x.289))
    
     85. ~b    = ~b.146
         Auth_pk
               = pmult(inv((x.281*x.282)), x.283)
         ini_share
               = pmult((x.281*x.289*inv(~b.146)), x.290)
         z     = em(x.283, x.290)^(x.289*inv(x.282))
    
     86. ~b    = ~b.146
         Auth_pk
               = pmult(inv((x.281*x.282)), x.283)
         ini_share
               = pmult((x.281*inv((~b.146*x.289))), x.290)
         z     = em(x.283, x.290)^inv((x.282*x.289))
    
     87. ~b    = ~b.146
         Auth_pk
               = pmult((x.279*x.280*inv(x.281)), x.282)
         ini_share
               = pmult((x.281*x.288*inv((x.279*x.289))), x.290)
         z     = em(x.282, x.290)^(~b.146*x.280*x.288*inv(x.289))
    
     88. ~b    = ~b.146
         Auth_pk
               = pmult((x.279*x.280*inv(x.281)), x.282)
         ini_share
               = pmult((x.288*inv((x.279*x.289))), x.290)
         z     = em(x.282, x.290)^(~b.146*x.280*x.288*inv((x.281*x.289)))
    
     89. ~b    = ~b.146
         Auth_pk
               = pmult((x.279*x.280*inv((x.281*x.282))), x.283)
         ini_share
               = pmult((x.281*x.289*inv(x.279)), x.290)
         z     = em(x.283, x.290)^(~b.146*x.280*x.289*inv(x.282))
    
     90. ~b    = ~b.146
         Auth_pk
               = pmult((x.279*x.280*inv((x.281*x.282))), x.283)
         ini_share
               = pmult((x.281*inv((x.279*x.289))), x.290)
         z     = em(x.283, x.290)^(~b.146*x.280*inv((x.282*x.289)))
    
     91. ~b    = ~b.146
         Auth_pk
               = pmult((x.279*inv((x.280*x.281))), x.282)
         ini_share
               = pmult((x.280*x.288*inv(x.289)), x.290)
         z     = em(x.282, x.290)^(~b.146*x.279*x.288*inv((x.281*x.289)))
    
     92. ~b    = ~b.146
         Auth_pk
               = pmult((x.279*inv((x.280*x.281))), x.282)
         ini_share
               = pmult((x.280*x.288*inv((x.279*x.289))), x.290)
         z     = em(x.282, x.290)^(~b.146*x.288*inv((x.281*x.289)))
    
     93. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*x.282), x.283)
         ini_share
               = pmult(inv((~b.146*x.281*x.289)), x.290)
         z     = em(x.283, x.290)^(x.282*inv(x.289))
    
     94. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*x.282), x.283)
         ini_share
               = pmult((x.289*inv((~b.146*x.281))), x.290)
         z     = em(x.283, x.290)^(x.282*x.289)
    
     95. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*x.282*inv(~b.146)), x.283)
         ini_share
               = pmult(inv((x.281*x.289)), x.290)
         z     = em(x.283, x.290)^(x.282*inv(x.289))
    
     96. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*x.282*inv(~b.146)), x.283)
         ini_share
               = pmult((x.289*inv(x.281)), x.290)
         z     = em(x.283, x.290)^(x.282*x.289)
    
     97. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*x.282*inv(x.283)), x.284)
         ini_share
               = pmult((x.283*inv((~b.146*x.281))), x.290)
         z     = em(x.284, x.290)^x.282
    
     98. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*x.282*inv((~b.146*x.283))), x.284)
         ini_share
               = pmult(inv(x.281), x.290)
         z     = em(x.284, x.290)^(x.282*inv(x.283))
    
     99. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*x.282*inv((~b.146*x.283))), x.284)
         ini_share
               = pmult((x.283*inv(x.281)), x.290)
         z     = em(x.284, x.290)^x.282
    
    100. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv(~b.146)), x.282)
         ini_share
               = pmult((x.288*inv((x.281*x.289))), x.290)
         z     = em(x.282, x.290)^(x.288*inv(x.289))
    
    101. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv(x.282)), x.283)
         ini_share
               = pmult(inv((~b.146*x.281*x.289)), x.290)
         z     = em(x.283, x.290)^inv((x.282*x.289))
    
    102. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv(x.282)), x.283)
         ini_share
               = pmult(inv((~b.146*x.289)), x.290)
         z     = em(x.283, x.290)^(x.281*inv((x.282*x.289)))
    
    103. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv(x.282)), x.283)
         ini_share
               = pmult((x.282*x.289*inv(~b.146)), x.290)
         z     = em(x.283, x.290)^(x.281*x.289)
    
    104. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv(x.282)), x.283)
         ini_share
               = pmult((x.282*x.289*inv((~b.146*x.281))), x.290)
         z     = em(x.283, x.290)^x.289
    
    105. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv(x.282)), x.283)
         ini_share
               = pmult((x.282*inv((~b.146*x.281*x.289))), x.290)
         z     = em(x.283, x.290)^inv(x.289)
    
    106. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv(x.282)), x.283)
         ini_share
               = pmult((x.282*inv((~b.146*x.289))), x.290)
         z     = em(x.283, x.290)^(x.281*inv(x.289))
    
    107. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282))), x.283)
         ini_share
               = pmult(x.289, x.290)
         z     = em(x.283, x.290)^(x.281*x.289*inv(x.282))
    
    108. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282))), x.283)
         ini_share
               = pmult(inv(x.289), x.290)
         z     = em(x.283, x.290)^(x.281*inv((x.282*x.289)))
    
    109. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282))), x.283)
         ini_share
               = pmult(inv((x.281*x.289)), x.290)
         z     = em(x.283, x.290)^inv((x.282*x.289))
    
    110. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282))), x.283)
         ini_share
               = pmult((x.282*x.289), x.290)
         z     = em(x.283, x.290)^(x.281*x.289)
    
    111. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282))), x.283)
         ini_share
               = pmult((x.282*x.289*inv(x.281)), x.290)
         z     = em(x.283, x.290)^x.289
    
    112. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282))), x.283)
         ini_share
               = pmult((x.282*inv((x.281*x.289))), x.290)
         z     = em(x.283, x.290)^inv(x.289)
    
    113. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282))), x.283)
         ini_share
               = pmult((x.289*inv(x.281)), x.290)
         z     = em(x.283, x.290)^(x.289*inv(x.282))
    
    114. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282*x.283))), x.284)
         ini_share
               = pmult(x.282, x.290)
         z     = em(x.284, x.290)^(x.281*inv(x.283))
    
    115. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((~b.146*x.282*x.283))), x.284)
         ini_share
               = pmult((x.282*inv(x.281)), x.290)
         z     = em(x.284, x.290)^inv(x.283)
    
    116. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((x.282*x.283))), x.284)
         ini_share
               = pmult((x.282*inv(~b.146)), x.290)
         z     = em(x.284, x.290)^(x.281*inv(x.283))
    
    117. ~b    = ~b.146
         Auth_pk
               = pmult((x.281*inv((x.282*x.283))), x.284)
         ini_share
               = pmult((x.282*inv((~b.146*x.281))), x.290)
         z     = em(x.284, x.290)^inv(x.283)
    
    118. ~b    = ~b.147
         Auth_pk
               = pmult(inv((~b.147*x.282*x.283)), x.284)
         ini_share
               = pmult((x.282*x.290*inv(x.291)), x.292)
         z     = em(x.284, x.292)^(x.290*inv((x.283*x.291)))
    
    119. ~b    = ~b.147
         Auth_pk
               = pmult(inv((x.282*x.283)), x.284)
         ini_share
               = pmult((x.282*x.290*inv((~b.147*x.291))), x.292)
         z     = em(x.284, x.292)^(x.290*inv((x.283*x.291)))
    
    120. ~b    = ~b.147
         Auth_pk
               = pmult((x.280*x.281*inv((x.282*x.283))), x.284)
         ini_share
               = pmult((x.282*x.290*inv((x.280*x.291))), x.292)
         z     = em(x.284, x.292)^(~b.147*x.281*x.290*inv((x.283*x.291)))
    
    121. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283), x.284)
         ini_share
               = pmult((x.290*inv((~b.147*x.282*x.291))), x.292)
         z     = em(x.284, x.292)^(x.283*x.290*inv(x.291))
    
    122. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv(~b.147)), x.284)
         ini_share
               = pmult((x.290*inv((x.282*x.291))), x.292)
         z     = em(x.284, x.292)^(x.283*x.290*inv(x.291))
    
    123. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv(x.284)), x.285)
         ini_share
               = pmult(inv((~b.147*x.282*x.291)), x.292)
         z     = em(x.285, x.292)^(x.283*inv((x.284*x.291)))
    
    124. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv(x.284)), x.285)
         ini_share
               = pmult((x.284*x.291*inv((~b.147*x.282))), x.292)
         z     = em(x.285, x.292)^(x.283*x.291)
    
    125. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv(x.284)), x.285)
         ini_share
               = pmult((x.284*inv((~b.147*x.282*x.291))), x.292)
         z     = em(x.285, x.292)^(x.283*inv(x.291))
    
    126. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv((~b.147*x.284))), x.285)
         ini_share
               = pmult(inv((x.282*x.291)), x.292)
         z     = em(x.285, x.292)^(x.283*inv((x.284*x.291)))
    
    127. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv((~b.147*x.284))), x.285)
         ini_share
               = pmult((x.284*x.291*inv(x.282)), x.292)
         z     = em(x.285, x.292)^(x.283*x.291)
    
    128. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv((~b.147*x.284))), x.285)
         ini_share
               = pmult((x.284*inv((x.282*x.291))), x.292)
         z     = em(x.285, x.292)^(x.283*inv(x.291))
    
    129. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv((~b.147*x.284))), x.285)
         ini_share
               = pmult((x.291*inv(x.282)), x.292)
         z     = em(x.285, x.292)^(x.283*x.291*inv(x.284))
    
    130. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv((~b.147*x.284*x.285))), x.286)
         ini_share
               = pmult((x.284*inv(x.282)), x.292)
         z     = em(x.286, x.292)^(x.283*inv(x.285))
    
    131. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*x.283*inv((x.284*x.285))), x.286)
         ini_share
               = pmult((x.284*inv((~b.147*x.282))), x.292)
         z     = em(x.286, x.292)^(x.283*inv(x.285))
    
    132. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv(x.283)), x.284)
         ini_share
               = pmult((x.283*x.290*inv((~b.147*x.282*x.291))), x.292)
         z     = em(x.284, x.292)^(x.290*inv(x.291))
    
    133. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv(x.283)), x.284)
         ini_share
               = pmult((x.283*x.290*inv((~b.147*x.291))), x.292)
         z     = em(x.284, x.292)^(x.282*x.290*inv(x.291))
    
    134. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv(x.283)), x.284)
         ini_share
               = pmult((x.290*inv((~b.147*x.282*x.291))), x.292)
         z     = em(x.284, x.292)^(x.290*inv((x.283*x.291)))
    
    135. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv(x.283)), x.284)
         ini_share
               = pmult((x.290*inv((~b.147*x.291))), x.292)
         z     = em(x.284, x.292)^(x.282*x.290*inv((x.283*x.291)))
    
    136. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((~b.147*x.283))), x.284)
         ini_share
               = pmult((x.283*x.290*inv((x.282*x.291))), x.292)
         z     = em(x.284, x.292)^(x.290*inv(x.291))
    
    137. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((~b.147*x.283))), x.284)
         ini_share
               = pmult((x.290*inv(x.291)), x.292)
         z     = em(x.284, x.292)^(x.282*x.290*inv((x.283*x.291)))
    
    138. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((~b.147*x.283))), x.284)
         ini_share
               = pmult((x.290*inv((x.282*x.291))), x.292)
         z     = em(x.284, x.292)^(x.290*inv((x.283*x.291)))
    
    139. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((~b.147*x.283*x.284))), x.285)
         ini_share
               = pmult((x.283*x.291), x.292)
         z     = em(x.285, x.292)^(x.282*x.291*inv(x.284))
    
    140. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((~b.147*x.283*x.284))), x.285)
         ini_share
               = pmult((x.283*x.291*inv(x.282)), x.292)
         z     = em(x.285, x.292)^(x.291*inv(x.284))
    
    141. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((~b.147*x.283*x.284))), x.285)
         ini_share
               = pmult((x.283*inv(x.291)), x.292)
         z     = em(x.285, x.292)^(x.282*inv((x.284*x.291)))
    
    142. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((~b.147*x.283*x.284))), x.285)
         ini_share
               = pmult((x.283*inv((x.282*x.291))), x.292)
         z     = em(x.285, x.292)^inv((x.284*x.291))
    
    143. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((x.283*x.284))), x.285)
         ini_share
               = pmult((x.283*x.291*inv(~b.147)), x.292)
         z     = em(x.285, x.292)^(x.282*x.291*inv(x.284))
    
    144. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((x.283*x.284))), x.285)
         ini_share
               = pmult((x.283*x.291*inv((~b.147*x.282))), x.292)
         z     = em(x.285, x.292)^(x.291*inv(x.284))
    
    145. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((x.283*x.284))), x.285)
         ini_share
               = pmult((x.283*inv((~b.147*x.282*x.291))), x.292)
         z     = em(x.285, x.292)^inv((x.284*x.291))
    
    146. ~b    = ~b.147
         Auth_pk
               = pmult((x.282*inv((x.283*x.284))), x.285)
         ini_share
               = pmult((x.283*inv((~b.147*x.291))), x.292)
         z     = em(x.285, x.292)^(x.282*inv((x.284*x.291)))
    
    147. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*x.284*inv(x.285)), x.286)
         ini_share
               = pmult((x.285*x.292*inv((~b.148*x.283*x.293))), x.294)
         z     = em(x.286, x.294)^(x.284*x.292*inv(x.293))
    
    148. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*x.284*inv(x.285)), x.286)
         ini_share
               = pmult((x.292*inv((~b.148*x.283*x.293))), x.294)
         z     = em(x.286, x.294)^(x.284*x.292*inv((x.285*x.293)))
    
    149. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*x.284*inv((~b.148*x.285))), x.286)
         ini_share
               = pmult((x.285*x.292*inv((x.283*x.293))), x.294)
         z     = em(x.286, x.294)^(x.284*x.292*inv(x.293))
    
    150. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*x.284*inv((~b.148*x.285))), x.286)
         ini_share
               = pmult((x.292*inv((x.283*x.293))), x.294)
         z     = em(x.286, x.294)^(x.284*x.292*inv((x.285*x.293)))
    
    151. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*x.284*inv((~b.148*x.285*x.286))), x.287)
         ini_share
               = pmult((x.285*x.293*inv(x.283)), x.294)
         z     = em(x.287, x.294)^(x.284*x.293*inv(x.286))
    
    152. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*x.284*inv((~b.148*x.285*x.286))), x.287)
         ini_share
               = pmult((x.285*inv((x.283*x.293))), x.294)
         z     = em(x.287, x.294)^(x.284*inv((x.286*x.293)))
    
    153. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*x.284*inv((x.285*x.286))), x.287)
         ini_share
               = pmult((x.285*x.293*inv((~b.148*x.283))), x.294)
         z     = em(x.287, x.294)^(x.284*x.293*inv(x.286))
    
    154. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*x.284*inv((x.285*x.286))), x.287)
         ini_share
               = pmult((x.285*inv((~b.148*x.283*x.293))), x.294)
         z     = em(x.287, x.294)^(x.284*inv((x.286*x.293)))
    
    155. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*inv((~b.148*x.284*x.285))), x.286)
         ini_share
               = pmult((x.284*x.292*inv(x.293)), x.294)
         z     = em(x.286, x.294)^(x.283*x.292*inv((x.285*x.293)))
    
    156. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*inv((~b.148*x.284*x.285))), x.286)
         ini_share
               = pmult((x.284*x.292*inv((x.283*x.293))), x.294)
         z     = em(x.286, x.294)^(x.292*inv((x.285*x.293)))
    
    157. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*inv((x.284*x.285))), x.286)
         ini_share
               = pmult((x.284*x.292*inv((~b.148*x.283*x.293))), x.294)
         z     = em(x.286, x.294)^(x.292*inv((x.285*x.293)))
    
    158. ~b    = ~b.148
         Auth_pk
               = pmult((x.283*inv((x.284*x.285))), x.286)
         ini_share
               = pmult((x.284*x.292*inv((~b.148*x.293))), x.294)
         z     = em(x.286, x.294)^(x.283*x.292*inv((x.285*x.293)))
    
    159. ~b    = ~b.149
         Auth_pk
               = pmult((x.284*x.285*inv((~b.149*x.286*x.287))), x.288)
         ini_share
               = pmult((x.286*x.294*inv((x.284*x.295))), x.296)
         z     = em(x.288, x.296)^(x.285*x.294*inv((x.287*x.295)))
    
    160. ~b    = ~b.149
         Auth_pk
               = pmult((x.284*x.285*inv((x.286*x.287))), x.288)
         ini_share
               = pmult((x.286*x.294*inv((~b.149*x.284*x.295))), x.296)
         z     = em(x.288, x.296)^(x.285*x.294*inv((x.287*x.295)))
  */

rule (modulo E) Initiator_2recv_send:
   [
   St_Ini_1( ~id, Ini, Auth_pk, Auth_sk, Sign_pk, Sign_sk, ini_share, ~a ),
   In( <Resp, resp_share, signature> )
   ]
  --[
  Neq( resp_share, 'P' ),
  Eq( true,
      idverify(signature, <'Responder', ini_share, resp_share, Ini>,
               IBPub(Resp, Sign_pk))
  ),
  IN_INI_1recv( <Resp, resp_share, signature> ),
  OUT_INI_2send( idsign(<'Initiator', resp_share>, Sign_sk) ),
  Secret( 'KEY', Ini, KDF(em(resp_share, pmult(~a, Auth_pk))) ),
  Honest( Ini ),
  Running( Ini, Resp,
           <'Initiator', 'Responder', KDF(em(resp_share, pmult(~a, Auth_pk)))>
  ),
  Commit( Ini, Resp,
          <'Initiator', 'Responder', KDF(em(resp_share, pmult(~a, Auth_pk)))>
  )
  ]->
   [ Out( idsign(<'Initiator', resp_share>, Sign_sk) ) ]

  /*
  rule (modulo AC) Initiator_2recv_send:
     [
     St_Ini_1( ~id, Ini, Auth_pk, Auth_sk, Sign_pk, Sign_sk, ini_share, ~a ),
     In( <Resp, resp_share, signature> )
     ]
    --[
    Neq( resp_share, 'P' ), Eq( true, z ),
    IN_INI_1recv( <Resp, resp_share, signature> ),
    OUT_INI_2send( idsign(<'Initiator', resp_share>, Sign_sk) ),
    Secret( 'KEY', Ini, KDF(z.1) ), Honest( Ini ),
    Running( Ini, Resp, <'Initiator', 'Responder', KDF(z.1)> ),
    Commit( Ini, Resp, <'Initiator', 'Responder', KDF(z.1)> )
    ]->
     [ Out( idsign(<'Initiator', resp_share>, Sign_sk) ) ]
    variants (modulo AC)
      1. ~a    = ~a.28
         Auth_pk
               = Auth_pk.30
         Ini   = Ini.32
         Resp  = Resp.33
         Sign_pk
               = Sign_pk.34
         ini_share
               = ini_share.36
         resp_share
               = resp_share.37
         signature
               = signature.38
         z     = idverify(signature.38,
                          <'Responder', ini_share.36, resp_share.37, Ini.32>,
                          IBPub(Resp.33, Sign_pk.34))
         z.1   = em(Auth_pk.30, resp_share.37)^~a.28
    
      2. ~a    = ~a.70
         Auth_pk
               = Auth_pk.72
         Ini   = Ini.74
         Resp  = Resp.75
         Sign_pk
               = Sign_pk.76
         ini_share
               = ini_share.78
         resp_share
               = pmult(x.137, x.138)
         signature
               = signature.80
         z     = idverify(signature.80,
                          <'Responder', ini_share.78, pmult(x.137, x.138), Ini.74>,
                          IBPub(Resp.75, Sign_pk.76))
         z.1   = em(Auth_pk.72, x.138)^(~a.70*x.137)
    
      3. ~a    = ~a.70
         Auth_pk
               = pmult(x.137, x.138)
         Ini   = Ini.74
         Resp  = Resp.75
         Sign_pk
               = Sign_pk.76
         ini_share
               = ini_share.78
         resp_share
               = resp_share.79
         signature
               = signature.80
         z     = idverify(signature.80,
                          <'Responder', ini_share.78, resp_share.79, Ini.74>,
                          IBPub(Resp.75, Sign_pk.76))
         z.1   = em(resp_share.79, x.138)^(~a.70*x.137)
    
      4. ~a    = ~a.71
         Auth_pk
               = Auth_pk.73
         Ini   = Ini.75
         Resp  = Resp.76
         Sign_pk
               = GetIBMasterPublicKey(x.140)
         ini_share
               = ini_share.79
         resp_share
               = resp_share.80
         signature
               = idsign(<'Responder', ini_share.79, resp_share.80, Ini.75>,
                        IBPriv(Resp.76, x.140))
         z     = true
         z.1   = em(Auth_pk.73, resp_share.80)^~a.71
    
      5. ~a    = ~a.71
         Auth_pk
               = pmult(inv(~a.71), x.140)
         Ini   = Ini.75
         Resp  = Resp.76
         Sign_pk
               = Sign_pk.77
         ini_share
               = ini_share.79
         resp_share
               = resp_share.80
         signature
               = signature.81
         z     = idverify(signature.81,
                          <'Responder', ini_share.79, resp_share.80, Ini.75>,
                          IBPub(Resp.76, Sign_pk.77))
         z.1   = em(resp_share.80, x.140)
    
      6. ~a    = ~a.72
         Auth_pk
               = pmult(inv((~a.72*x.141)), x.142)
         Ini   = Ini.76
         Resp  = Resp.77
         Sign_pk
               = Sign_pk.78
         ini_share
               = ini_share.80
         resp_share
               = resp_share.81
         signature
               = signature.82
         z     = idverify(signature.82,
                          <'Responder', ini_share.80, resp_share.81, Ini.76>,
                          IBPub(Resp.77, Sign_pk.78))
         z.1   = em(resp_share.81, x.142)^inv(x.141)
    
      7. ~a    = ~a.72
         Auth_pk
               = pmult((x.141*inv(~a.72)), x.142)
         Ini   = Ini.76
         Resp  = Resp.77
         Sign_pk
               = Sign_pk.78
         ini_share
               = ini_share.80
         resp_share
               = resp_share.81
         signature
               = signature.82
         z     = idverify(signature.82,
                          <'Responder', ini_share.80, resp_share.81, Ini.76>,
                          IBPub(Resp.77, Sign_pk.78))
         z.1   = em(resp_share.81, x.142)^x.141
    
      8. ~a    = ~a.73
         Auth_pk
               = pmult((x.142*inv((~a.73*x.143))), x.144)
         Ini   = Ini.77
         Resp  = Resp.78
         Sign_pk
               = Sign_pk.79
         ini_share
               = ini_share.81
         resp_share
               = resp_share.82
         signature
               = signature.83
         z     = idverify(signature.83,
                          <'Responder', ini_share.81, resp_share.82, Ini.77>,
                          IBPub(Resp.78, Sign_pk.79))
         z.1   = em(resp_share.82, x.144)^(x.142*inv(x.143))
    
      9. ~a    = ~a.74
         Auth_pk
               = pmult(x.141, x.142)
         Ini   = Ini.78
         Resp  = Resp.79
         Sign_pk
               = GetIBMasterPublicKey(x.146)
         ini_share
               = ini_share.82
         resp_share
               = resp_share.83
         signature
               = idsign(<'Responder', ini_share.82, resp_share.83, Ini.78>,
                        IBPriv(Resp.79, x.146))
         z     = true
         z.1   = em(resp_share.83, x.142)^(~a.74*x.141)
    
     10. ~a    = ~a.75
         Auth_pk
               = Auth_pk.77
         Ini   = Ini.79
         Resp  = Resp.80
         Sign_pk
               = GetIBMasterPublicKey(x.144)
         ini_share
               = ini_share.83
         resp_share
               = pmult(x.147, x.148)
         signature
               = idsign(<'Responder', ini_share.83, pmult(x.147, x.148), Ini.79>,
                        IBPriv(Resp.80, x.144))
         z     = true
         z.1   = em(Auth_pk.77, x.148)^(~a.75*x.147)
    
     11. ~a    = ~a.75
         Auth_pk
               = pmult(inv(~a.75), x.144)
         Ini   = Ini.79
         Resp  = Resp.80
         Sign_pk
               = GetIBMasterPublicKey(x.148)
         ini_share
               = ini_share.83
         resp_share
               = resp_share.84
         signature
               = idsign(<'Responder', ini_share.83, resp_share.84, Ini.79>,
                        IBPriv(Resp.80, x.148))
         z     = true
         z.1   = em(resp_share.84, x.144)
    
     12. ~a    = ~a.76
         Auth_pk
               = pmult(inv((~a.76*x.145)), x.146)
         Ini   = Ini.80
         Resp  = Resp.81
         Sign_pk
               = GetIBMasterPublicKey(x.150)
         ini_share
               = ini_share.84
         resp_share
               = resp_share.85
         signature
               = idsign(<'Responder', ini_share.84, resp_share.85, Ini.80>,
                        IBPriv(Resp.81, x.150))
         z     = true
         z.1   = em(resp_share.85, x.146)^inv(x.145)
    
     13. ~a    = ~a.76
         Auth_pk
               = pmult((x.145*inv(~a.76)), x.146)
         Ini   = Ini.80
         Resp  = Resp.81
         Sign_pk
               = GetIBMasterPublicKey(x.150)
         ini_share
               = ini_share.84
         resp_share
               = resp_share.85
         signature
               = idsign(<'Responder', ini_share.84, resp_share.85, Ini.80>,
                        IBPriv(Resp.81, x.150))
         z     = true
         z.1   = em(resp_share.85, x.146)^x.145
    
     14. ~a    = ~a.77
         Auth_pk
               = pmult(x.144, x.145)
         Ini   = Ini.81
         Resp  = Resp.82
         Sign_pk
               = Sign_pk.83
         ini_share
               = ini_share.85
         resp_share
               = pmult(inv(x.144), x.152)
         signature
               = signature.87
         z     = idverify(signature.87,
                          <'Responder', ini_share.85, pmult(inv(x.144), x.152), Ini.81>,
                          IBPub(Resp.82, Sign_pk.83))
         z.1   = em(x.145, x.152)^~a.77
    
     15. ~a    = ~a.77
         Auth_pk
               = pmult(x.144, x.145)
         Ini   = Ini.81
         Resp  = Resp.82
         Sign_pk
               = GetIBMasterPublicKey(x.149)
         ini_share
               = ini_share.85
         resp_share
               = pmult(inv(x.144), x.152)
         signature
               = idsign(<'Responder', ini_share.85, pmult(inv(x.144), x.152), Ini.81>,
                        IBPriv(Resp.82, x.149))
         z     = true
         z.1   = em(x.145, x.152)^~a.77
    
     16. ~a    = ~a.77
         Auth_pk
               = pmult(inv(x.144), x.145)
         Ini   = Ini.81
         Resp  = Resp.82
         Sign_pk
               = Sign_pk.83
         ini_share
               = ini_share.85
         resp_share
               = pmult(x.144, x.152)
         signature
               = signature.87
         z     = idverify(signature.87,
                          <'Responder', ini_share.85, pmult(x.144, x.152), Ini.81>,
                          IBPub(Resp.82, Sign_pk.83))
         z.1   = em(x.145, x.152)^~a.77
    
     17. ~a    = ~a.77
         Auth_pk
               = pmult(inv(x.144), x.145)
         Ini   = Ini.81
         Resp  = Resp.82
         Sign_pk
               = GetIBMasterPublicKey(x.149)
         ini_share
               = ini_share.85
         resp_share
               = pmult(x.144, x.152)
         signature
               = idsign(<'Responder', ini_share.85, pmult(x.144, x.152), Ini.81>,
                        IBPriv(Resp.82, x.149))
         z     = true
         z.1   = em(x.145, x.152)^~a.77
    
     18. ~a    = ~a.77
         Auth_pk
               = pmult((x.146*inv((~a.77*x.147))), x.148)
         Ini   = Ini.81
         Resp  = Resp.82
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.85
         resp_share
               = resp_share.86
         signature
               = idsign(<'Responder', ini_share.85, resp_share.86, Ini.81>,
                        IBPriv(Resp.82, x.152))
         z     = true
         z.1   = em(resp_share.86, x.148)^(x.146*inv(x.147))
    
     19. ~a    = ~a.78
         Auth_pk
               = Auth_pk.80
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult(inv(~a.78), x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult(inv(~a.78), x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(Auth_pk.80, x.154)
    
     20. ~a    = ~a.78
         Auth_pk
               = Auth_pk.80
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.151)
         ini_share
               = ini_share.86
         resp_share
               = pmult(inv(~a.78), x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult(inv(~a.78), x.154), Ini.82>,
                        IBPriv(Resp.83, x.151))
         z     = true
         z.1   = em(Auth_pk.80, x.154)
    
     21. ~a    = ~a.78
         Auth_pk
               = pmult(x.145, x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult(x.153, x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult(x.153, x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.146, x.154)^(~a.78*x.145*x.153)
    
     22. ~a    = ~a.78
         Auth_pk
               = pmult(x.145, x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult(inv((x.145*x.153)), x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult(inv((x.145*x.153)), x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.146, x.154)^(~a.78*inv(x.153))
    
     23. ~a    = ~a.78
         Auth_pk
               = pmult(x.145, x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult((x.153*inv(x.145)), x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult((x.153*inv(x.145)), x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.146, x.154)^(~a.78*x.153)
    
     24. ~a    = ~a.78
         Auth_pk
               = pmult(x.145, x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.150)
         ini_share
               = ini_share.86
         resp_share
               = pmult(x.153, x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult(x.153, x.154), Ini.82>,
                        IBPriv(Resp.83, x.150))
         z     = true
         z.1   = em(x.146, x.154)^(~a.78*x.145*x.153)
    
     25. ~a    = ~a.78
         Auth_pk
               = pmult(x.145, x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.150)
         ini_share
               = ini_share.86
         resp_share
               = pmult(inv((x.145*x.153)), x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult(inv((x.145*x.153)), x.154), 
                         Ini.82>,
                        IBPriv(Resp.83, x.150))
         z     = true
         z.1   = em(x.146, x.154)^(~a.78*inv(x.153))
    
     26. ~a    = ~a.78
         Auth_pk
               = pmult(x.145, x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.150)
         ini_share
               = ini_share.86
         resp_share
               = pmult((x.153*inv(x.145)), x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult((x.153*inv(x.145)), x.154), 
                         Ini.82>,
                        IBPriv(Resp.83, x.150))
         z     = true
         z.1   = em(x.146, x.154)^(~a.78*x.153)
    
     27. ~a    = ~a.78
         Auth_pk
               = pmult(inv(x.145), x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult(inv(x.153), x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult(inv(x.153), x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.146, x.154)^(~a.78*inv((x.145*x.153)))
    
     28. ~a    = ~a.78
         Auth_pk
               = pmult(inv(x.145), x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult((x.145*x.153), x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult((x.145*x.153), x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.146, x.154)^(~a.78*x.153)
    
     29. ~a    = ~a.78
         Auth_pk
               = pmult(inv(x.145), x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.150)
         ini_share
               = ini_share.86
         resp_share
               = pmult(inv(x.153), x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult(inv(x.153), x.154), Ini.82>,
                        IBPriv(Resp.83, x.150))
         z     = true
         z.1   = em(x.146, x.154)^(~a.78*inv((x.145*x.153)))
    
     30. ~a    = ~a.78
         Auth_pk
               = pmult(inv(x.145), x.146)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.150)
         ini_share
               = ini_share.86
         resp_share
               = pmult((x.145*x.153), x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult((x.145*x.153), x.154), Ini.82
                        >,
                        IBPriv(Resp.83, x.150))
         z     = true
         z.1   = em(x.146, x.154)^(~a.78*x.153)
    
     31. ~a    = ~a.78
         Auth_pk
               = pmult(inv((x.145*x.146)), x.147)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult(x.145, x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult(x.145, x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.147, x.154)^(~a.78*inv(x.146))
    
     32. ~a    = ~a.78
         Auth_pk
               = pmult(inv((x.145*x.146)), x.147)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.151)
         ini_share
               = ini_share.86
         resp_share
               = pmult(x.145, x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult(x.145, x.154), Ini.82>,
                        IBPriv(Resp.83, x.151))
         z     = true
         z.1   = em(x.147, x.154)^(~a.78*inv(x.146))
    
     33. ~a    = ~a.78
         Auth_pk
               = pmult((x.145*x.146), x.147)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult(inv(x.145), x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult(inv(x.145), x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.147, x.154)^(~a.78*x.146)
    
     34. ~a    = ~a.78
         Auth_pk
               = pmult((x.145*x.146), x.147)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.151)
         ini_share
               = ini_share.86
         resp_share
               = pmult(inv(x.145), x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult(inv(x.145), x.154), Ini.82>,
                        IBPriv(Resp.83, x.151))
         z     = true
         z.1   = em(x.147, x.154)^(~a.78*x.146)
    
     35. ~a    = ~a.78
         Auth_pk
               = pmult((x.145*inv(x.146)), x.147)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult(x.146, x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult(x.146, x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.147, x.154)^(~a.78*x.145)
    
     36. ~a    = ~a.78
         Auth_pk
               = pmult((x.145*inv(x.146)), x.147)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = Sign_pk.84
         ini_share
               = ini_share.86
         resp_share
               = pmult((x.146*inv(x.145)), x.154)
         signature
               = signature.88
         z     = idverify(signature.88,
                          <'Responder', ini_share.86, pmult((x.146*inv(x.145)), x.154), Ini.82>,
                          IBPub(Resp.83, Sign_pk.84))
         z.1   = em(x.147, x.154)^~a.78
    
     37. ~a    = ~a.78
         Auth_pk
               = pmult((x.145*inv(x.146)), x.147)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.151)
         ini_share
               = ini_share.86
         resp_share
               = pmult(x.146, x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult(x.146, x.154), Ini.82>,
                        IBPriv(Resp.83, x.151))
         z     = true
         z.1   = em(x.147, x.154)^(~a.78*x.145)
    
     38. ~a    = ~a.78
         Auth_pk
               = pmult((x.145*inv(x.146)), x.147)
         Ini   = Ini.82
         Resp  = Resp.83
         Sign_pk
               = GetIBMasterPublicKey(x.151)
         ini_share
               = ini_share.86
         resp_share
               = pmult((x.146*inv(x.145)), x.154)
         signature
               = idsign(<'Responder', ini_share.86, pmult((x.146*inv(x.145)), x.154), 
                         Ini.82>,
                        IBPriv(Resp.83, x.151))
         z     = true
         z.1   = em(x.147, x.154)^~a.78
    
     39. ~a    = ~a.79
         Auth_pk
               = Auth_pk.81
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv((~a.79*x.155)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(inv((~a.79*x.155)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(Auth_pk.81, x.156)^inv(x.155)
    
     40. ~a    = ~a.79
         Auth_pk
               = Auth_pk.81
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.155*inv(~a.79)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.155*inv(~a.79)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(Auth_pk.81, x.156)^x.155
    
     41. ~a    = ~a.79
         Auth_pk
               = Auth_pk.81
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv((~a.79*x.155)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(inv((~a.79*x.155)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(Auth_pk.81, x.156)^inv(x.155)
    
     42. ~a    = ~a.79
         Auth_pk
               = Auth_pk.81
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.155*inv(~a.79)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.155*inv(~a.79)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(Auth_pk.81, x.156)^x.155
    
     43. ~a    = ~a.79
         Auth_pk
               = pmult(x.146, x.147)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.154*inv((x.146*x.155))), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.154*inv((x.146*x.155))), x.156), 
                           Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.147, x.156)^(~a.79*x.154*inv(x.155))
    
     44. ~a    = ~a.79
         Auth_pk
               = pmult(x.146, x.147)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.151)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.154*inv((x.146*x.155))), x.156)
         signature
               = idsign(<'Responder', ini_share.87, 
                         pmult((x.154*inv((x.146*x.155))), x.156), Ini.83>,
                        IBPriv(Resp.84, x.151))
         z     = true
         z.1   = em(x.147, x.156)^(~a.79*x.154*inv(x.155))
    
     45. ~a    = ~a.79
         Auth_pk
               = pmult(x.148, x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv(~a.79), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(inv(~a.79), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.149, x.156)^x.148
    
     46. ~a    = ~a.79
         Auth_pk
               = pmult(x.148, x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv((~a.79*x.148)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(inv((~a.79*x.148)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.149, x.156)
    
     47. ~a    = ~a.79
         Auth_pk
               = pmult(x.148, x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv(~a.79), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(inv(~a.79), x.156), Ini.83>,
                        IBPriv(Resp.84, x.153))
         z     = true
         z.1   = em(x.149, x.156)^x.148
    
     48. ~a    = ~a.79
         Auth_pk
               = pmult(x.148, x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv((~a.79*x.148)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(inv((~a.79*x.148)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.153))
         z     = true
         z.1   = em(x.149, x.156)
    
     49. ~a    = ~a.79
         Auth_pk
               = pmult(inv(~a.79), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(x.155, x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(x.155, x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^x.155
    
     50. ~a    = ~a.79
         Auth_pk
               = pmult(inv(~a.79), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult(x.155, x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(x.155, x.156), Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^x.155
    
     51. ~a    = ~a.79
         Auth_pk
               = pmult(inv(x.146), x.147)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.154*inv(x.155)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.154*inv(x.155)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.147, x.156)^(~a.79*x.154*inv((x.146*x.155)))
    
     52. ~a    = ~a.79
         Auth_pk
               = pmult(inv(x.146), x.147)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.151)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.154*inv(x.155)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.154*inv(x.155)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.151))
         z     = true
         z.1   = em(x.147, x.156)^(~a.79*x.154*inv((x.146*x.155)))
    
     53. ~a    = ~a.79
         Auth_pk
               = pmult(inv(x.148), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.148*inv(~a.79)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.148*inv(~a.79)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.149, x.156)
    
     54. ~a    = ~a.79
         Auth_pk
               = pmult(inv(x.148), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.148*inv(~a.79)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.148*inv(~a.79)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.153))
         z     = true
         z.1   = em(x.149, x.156)
    
     55. ~a    = ~a.79
         Auth_pk
               = pmult(inv((~a.79*x.148)), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(x.148, x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(x.148, x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.149, x.156)
    
     56. ~a    = ~a.79
         Auth_pk
               = pmult(inv((~a.79*x.148)), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.87
         resp_share
               = pmult(x.148, x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(x.148, x.156), Ini.83>,
                        IBPriv(Resp.84, x.153))
         z     = true
         z.1   = em(x.149, x.156)
    
     57. ~a    = ~a.79
         Auth_pk
               = pmult(inv((x.146*x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.146*x.155), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.146*x.155), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*x.155*inv(x.147))
    
     58. ~a    = ~a.79
         Auth_pk
               = pmult(inv((x.146*x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.146*inv(x.155)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.146*inv(x.155)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*inv((x.147*x.155)))
    
     59. ~a    = ~a.79
         Auth_pk
               = pmult(inv((x.146*x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.146*x.155), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.146*x.155), x.156), Ini.83
                        >,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*x.155*inv(x.147))
    
     60. ~a    = ~a.79
         Auth_pk
               = pmult(inv((x.146*x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.146*inv(x.155)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.146*inv(x.155)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*inv((x.147*x.155)))
    
     61. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*x.147), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv((x.146*x.155)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(inv((x.146*x.155)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*x.147*inv(x.155))
    
     62. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*x.147), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.155*inv(x.146)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.155*inv(x.146)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*x.147*x.155)
    
     63. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*x.147), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv((x.146*x.155)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(inv((x.146*x.155)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*x.147*inv(x.155))
    
     64. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*x.147), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.155*inv(x.146)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.155*inv(x.146)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*x.147*x.155)
    
     65. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*x.147*inv(x.148)), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.148*inv(x.146)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.148*inv(x.146)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.149, x.156)^(~a.79*x.147)
    
     66. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*x.147*inv(x.148)), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.148*inv(x.146)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.148*inv(x.146)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.153))
         z     = true
         z.1   = em(x.149, x.156)^(~a.79*x.147)
    
     67. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv(x.155), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(inv(x.155), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*x.146*inv((x.147*x.155)))
    
     68. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv((x.146*x.155)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(inv((x.146*x.155)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*inv((x.147*x.155)))
    
     69. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.147*x.155), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.147*x.155), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*x.146*x.155)
    
     70. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.147*x.155*inv(x.146)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.147*x.155*inv(x.146)), x.156), 
                           Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*x.155)
    
     71. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.147*inv((x.146*x.155))), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.147*inv((x.146*x.155))), x.156), 
                           Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.148, x.156)^(~a.79*inv(x.155))
    
     72. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv(x.155), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(inv(x.155), x.156), Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*x.146*inv((x.147*x.155)))
    
     73. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv((x.146*x.155)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(inv((x.146*x.155)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*inv((x.147*x.155)))
    
     74. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.147*x.155), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.147*x.155), x.156), Ini.83
                        >,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*x.146*x.155)
    
     75. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.147*x.155*inv(x.146)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, 
                         pmult((x.147*x.155*inv(x.146)), x.156), Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*x.155)
    
     76. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv(x.147)), x.148)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.152)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.147*inv((x.146*x.155))), x.156)
         signature
               = idsign(<'Responder', ini_share.87, 
                         pmult((x.147*inv((x.146*x.155))), x.156), Ini.83>,
                        IBPriv(Resp.84, x.152))
         z     = true
         z.1   = em(x.148, x.156)^(~a.79*inv(x.155))
    
     77. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv((x.147*x.148))), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(x.147, x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(x.147, x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.149, x.156)^(~a.79*x.146*inv(x.148))
    
     78. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv((x.147*x.148))), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.147*inv(x.146)), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult((x.147*inv(x.146)), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.149, x.156)^(~a.79*inv(x.148))
    
     79. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv((x.147*x.148))), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.87
         resp_share
               = pmult(x.147, x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(x.147, x.156), Ini.83>,
                        IBPriv(Resp.84, x.153))
         z     = true
         z.1   = em(x.149, x.156)^(~a.79*x.146*inv(x.148))
    
     80. ~a    = ~a.79
         Auth_pk
               = pmult((x.146*inv((x.147*x.148))), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.87
         resp_share
               = pmult((x.147*inv(x.146)), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult((x.147*inv(x.146)), x.156), 
                         Ini.83>,
                        IBPriv(Resp.84, x.153))
         z     = true
         z.1   = em(x.149, x.156)^(~a.79*inv(x.148))
    
     81. ~a    = ~a.79
         Auth_pk
               = pmult((x.148*inv(~a.79)), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = Sign_pk.85
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv(x.148), x.156)
         signature
               = signature.89
         z     = idverify(signature.89,
                          <'Responder', ini_share.87, pmult(inv(x.148), x.156), Ini.83>,
                          IBPub(Resp.84, Sign_pk.85))
         z.1   = em(x.149, x.156)
    
     82. ~a    = ~a.79
         Auth_pk
               = pmult((x.148*inv(~a.79)), x.149)
         Ini   = Ini.83
         Resp  = Resp.84
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.87
         resp_share
               = pmult(inv(x.148), x.156)
         signature
               = idsign(<'Responder', ini_share.87, pmult(inv(x.148), x.156), Ini.83>,
                        IBPriv(Resp.84, x.153))
         z     = true
         z.1   = em(x.149, x.156)
    
     83. ~a    = ~a.80
         Auth_pk
               = Auth_pk.82
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.156*inv((~a.80*x.157))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.156*inv((~a.80*x.157))), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(Auth_pk.82, x.158)^(x.156*inv(x.157))
    
     84. ~a    = ~a.80
         Auth_pk
               = Auth_pk.82
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.156*inv((~a.80*x.157))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.156*inv((~a.80*x.157))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.153))
         z     = true
         z.1   = em(Auth_pk.82, x.158)^(x.156*inv(x.157))
    
     85. ~a    = ~a.80
         Auth_pk
               = pmult(x.149, x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((~a.80*x.149*x.157)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv((~a.80*x.149*x.157)), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^inv(x.157)
    
     86. ~a    = ~a.80
         Auth_pk
               = pmult(x.149, x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((~a.80*x.157)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv((~a.80*x.157)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(x.149*inv(x.157))
    
     87. ~a    = ~a.80
         Auth_pk
               = pmult(x.149, x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.157*inv(~a.80)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.157*inv(~a.80)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(x.149*x.157)
    
     88. ~a    = ~a.80
         Auth_pk
               = pmult(x.149, x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.157*inv((~a.80*x.149))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.157*inv((~a.80*x.149))), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^x.157
    
     89. ~a    = ~a.80
         Auth_pk
               = pmult(x.149, x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((~a.80*x.149*x.157)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult(inv((~a.80*x.149*x.157)), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^inv(x.157)
    
     90. ~a    = ~a.80
         Auth_pk
               = pmult(x.149, x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((~a.80*x.157)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(inv((~a.80*x.157)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(x.149*inv(x.157))
    
     91. ~a    = ~a.80
         Auth_pk
               = pmult(x.149, x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.157*inv(~a.80)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.157*inv(~a.80)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(x.149*x.157)
    
     92. ~a    = ~a.80
         Auth_pk
               = pmult(x.149, x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.157*inv((~a.80*x.149))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.157*inv((~a.80*x.149))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^x.157
    
     93. ~a    = ~a.80
         Auth_pk
               = pmult(inv(x.149), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((~a.80*x.157)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv((~a.80*x.157)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^inv((x.149*x.157))
    
     94. ~a    = ~a.80
         Auth_pk
               = pmult(inv(x.149), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*x.157*inv(~a.80)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.149*x.157*inv(~a.80)), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^x.157
    
     95. ~a    = ~a.80
         Auth_pk
               = pmult(inv(x.149), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*inv((~a.80*x.157))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.149*inv((~a.80*x.157))), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^inv(x.157)
    
     96. ~a    = ~a.80
         Auth_pk
               = pmult(inv(x.149), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((~a.80*x.157)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(inv((~a.80*x.157)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^inv((x.149*x.157))
    
     97. ~a    = ~a.80
         Auth_pk
               = pmult(inv(x.149), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*x.157*inv(~a.80)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.149*x.157*inv(~a.80)), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^x.157
    
     98. ~a    = ~a.80
         Auth_pk
               = pmult(inv(x.149), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*inv((~a.80*x.157))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.149*inv((~a.80*x.157))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^inv(x.157)
    
     99. ~a    = ~a.80
         Auth_pk
               = pmult(inv((~a.80*x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(x.157, x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(x.157, x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(x.157*inv(x.149))
    
    100. ~a    = ~a.80
         Auth_pk
               = pmult(inv((~a.80*x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv(x.157), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv(x.157), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^inv((x.149*x.157))
    
    101. ~a    = ~a.80
         Auth_pk
               = pmult(inv((~a.80*x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*x.157), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.149*x.157), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^x.157
    
    102. ~a    = ~a.80
         Auth_pk
               = pmult(inv((~a.80*x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult(x.157, x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(x.157, x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(x.157*inv(x.149))
    
    103. ~a    = ~a.80
         Auth_pk
               = pmult(inv((~a.80*x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv(x.157), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(inv(x.157), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^inv((x.149*x.157))
    
    104. ~a    = ~a.80
         Auth_pk
               = pmult(inv((~a.80*x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*x.157), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.149*x.157), x.158), Ini.84
                        >,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^x.157
    
    105. ~a    = ~a.80
         Auth_pk
               = pmult(inv((~a.80*x.149*x.150)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(x.149, x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(x.149, x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)^inv(x.150)
    
    106. ~a    = ~a.80
         Auth_pk
               = pmult(inv((~a.80*x.149*x.150)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult(x.149, x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(x.149, x.158), Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)^inv(x.150)
    
    107. ~a    = ~a.80
         Auth_pk
               = pmult(inv((x.147*x.148)), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.147*x.156*inv(x.157)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.147*x.156*inv(x.157)), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.149, x.158)^(~a.80*x.156*inv((x.148*x.157)))
    
    108. ~a    = ~a.80
         Auth_pk
               = pmult(inv((x.147*x.148)), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.147*x.156*inv(x.157)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.147*x.156*inv(x.157)), x.158), Ini.84>,
                        IBPriv(Resp.85, x.153))
         z     = true
         z.1   = em(x.149, x.158)^(~a.80*x.156*inv((x.148*x.157)))
    
    109. ~a    = ~a.80
         Auth_pk
               = pmult(inv((x.149*x.150)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*inv(~a.80)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.149*inv(~a.80)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)^inv(x.150)
    
    110. ~a    = ~a.80
         Auth_pk
               = pmult(inv((x.149*x.150)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*inv(~a.80)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.149*inv(~a.80)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)^inv(x.150)
    
    111. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.156*inv((x.147*x.157))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.156*inv((x.147*x.157))), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.149, x.158)^(~a.80*x.148*x.156*inv(x.157))
    
    112. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.156*inv((x.147*x.157))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.156*inv((x.147*x.157))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.153))
         z     = true
         z.1   = em(x.149, x.158)^(~a.80*x.148*x.156*inv(x.157))
    
    113. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148*inv(x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((x.147*x.157)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv((x.147*x.157)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(~a.80*x.148*inv((x.149*x.157)))
    
    114. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148*inv(x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*x.157*inv(x.147)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.149*x.157*inv(x.147)), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(~a.80*x.148*x.157)
    
    115. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148*inv(x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*inv((x.147*x.157))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.149*inv((x.147*x.157))), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(~a.80*x.148*inv(x.157))
    
    116. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148*inv(x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((x.147*x.157)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(inv((x.147*x.157)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(~a.80*x.148*inv((x.149*x.157)))
    
    117. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148*inv(x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*x.157*inv(x.147)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.149*x.157*inv(x.147)), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(~a.80*x.148*x.157)
    
    118. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148*inv(x.149)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*inv((x.147*x.157))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.149*inv((x.147*x.157))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(~a.80*x.148*inv(x.157))
    
    119. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148*inv((x.149*x.150))), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*inv(x.147)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.149*inv(x.147)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)^(~a.80*x.148*inv(x.150))
    
    120. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*x.148*inv((x.149*x.150))), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.149*inv(x.147)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.149*inv(x.147)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)^(~a.80*x.148*inv(x.150))
    
    121. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv(x.148)), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*x.156*inv((x.147*x.157))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, 
                           pmult((x.148*x.156*inv((x.147*x.157))), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.149, x.158)^(~a.80*x.156*inv(x.157))
    
    122. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv(x.148)), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.156*inv(x.157)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.156*inv(x.157)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.149, x.158)^(~a.80*x.147*x.156*inv((x.148*x.157)))
    
    123. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv(x.148)), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.156*inv((x.147*x.157))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.156*inv((x.147*x.157))), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.149, x.158)^(~a.80*x.156*inv((x.148*x.157)))
    
    124. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv(x.148)), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*x.156*inv((x.147*x.157))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.148*x.156*inv((x.147*x.157))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.153))
         z     = true
         z.1   = em(x.149, x.158)^(~a.80*x.156*inv(x.157))
    
    125. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv(x.148)), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.156*inv(x.157)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.156*inv(x.157)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.153))
         z     = true
         z.1   = em(x.149, x.158)^(~a.80*x.147*x.156*inv((x.148*x.157)))
    
    126. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv(x.148)), x.149)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.153)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.156*inv((x.147*x.157))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.156*inv((x.147*x.157))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.153))
         z     = true
         z.1   = em(x.149, x.158)^(~a.80*x.156*inv((x.148*x.157)))
    
    127. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv((x.148*x.149))), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*x.157), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.148*x.157), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(~a.80*x.147*x.157*inv(x.149))
    
    128. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv((x.148*x.149))), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*x.157*inv(x.147)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.148*x.157*inv(x.147)), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(~a.80*x.157*inv(x.149))
    
    129. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv((x.148*x.149))), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*inv(x.157)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.148*inv(x.157)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(~a.80*x.147*inv((x.149*x.157)))
    
    130. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv((x.148*x.149))), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*inv((x.147*x.157))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.148*inv((x.147*x.157))), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(~a.80*inv((x.149*x.157)))
    
    131. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv((x.148*x.149))), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*x.157), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.148*x.157), x.158), Ini.84
                        >,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(~a.80*x.147*x.157*inv(x.149))
    
    132. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv((x.148*x.149))), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*x.157*inv(x.147)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.148*x.157*inv(x.147)), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(~a.80*x.157*inv(x.149))
    
    133. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv((x.148*x.149))), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*inv(x.157)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.148*inv(x.157)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(~a.80*x.147*inv((x.149*x.157)))
    
    134. ~a    = ~a.80
         Auth_pk
               = pmult((x.147*inv((x.148*x.149))), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.148*inv((x.147*x.157))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.148*inv((x.147*x.157))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(~a.80*inv((x.149*x.157)))
    
    135. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*x.150), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((~a.80*x.149)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv((~a.80*x.149)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)^x.150
    
    136. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*x.150), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((~a.80*x.149)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(inv((~a.80*x.149)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)^x.150
    
    137. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*x.150*inv(~a.80)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv(x.149), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv(x.149), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)^x.150
    
    138. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*x.150*inv(~a.80)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv(x.149), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(inv(x.149), x.158), Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)^x.150
    
    139. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(~a.80)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(x.157, x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(x.157, x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^(x.149*x.157)
    
    140. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(~a.80)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((x.149*x.157)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv((x.149*x.157)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^inv(x.157)
    
    141. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(~a.80)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.157*inv(x.149)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.157*inv(x.149)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.150, x.158)^x.157
    
    142. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(~a.80)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult(x.157, x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(x.157, x.158), Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^(x.149*x.157)
    
    143. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(~a.80)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv((x.149*x.157)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(inv((x.149*x.157)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^inv(x.157)
    
    144. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(~a.80)), x.150)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.154)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.157*inv(x.149)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.157*inv(x.149)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.154))
         z     = true
         z.1   = em(x.150, x.158)^x.157
    
    145. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(x.150)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.150*inv(~a.80)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.150*inv(~a.80)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)^x.149
    
    146. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(x.150)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.150*inv((~a.80*x.149))), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.150*inv((~a.80*x.149))), x.158), 
                           Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)
    
    147. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(x.150)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.150*inv(~a.80)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.150*inv(~a.80)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)^x.149
    
    148. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv(x.150)), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.150*inv((~a.80*x.149))), x.158)
         signature
               = idsign(<'Responder', ini_share.88, 
                         pmult((x.150*inv((~a.80*x.149))), x.158), Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)
    
    149. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv((~a.80*x.150))), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(x.150, x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(x.150, x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)^x.149
    
    150. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv((~a.80*x.150))), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv(x.149), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult(inv(x.149), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)^inv(x.150)
    
    151. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv((~a.80*x.150))), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = Sign_pk.86
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.150*inv(x.149)), x.158)
         signature
               = signature.90
         z     = idverify(signature.90,
                          <'Responder', ini_share.88, pmult((x.150*inv(x.149)), x.158), Ini.84>,
                          IBPub(Resp.85, Sign_pk.86))
         z.1   = em(x.151, x.158)
    
    152. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv((~a.80*x.150))), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult(x.150, x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(x.150, x.158), Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)^x.149
    
    153. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv((~a.80*x.150))), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult(inv(x.149), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult(inv(x.149), x.158), Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)^inv(x.150)
    
    154. ~a    = ~a.80
         Auth_pk
               = pmult((x.149*inv((~a.80*x.150))), x.151)
         Ini   = Ini.84
         Resp  = Resp.85
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.88
         resp_share
               = pmult((x.150*inv(x.149)), x.158)
         signature
               = idsign(<'Responder', ini_share.88, pmult((x.150*inv(x.149)), x.158), 
                         Ini.84>,
                        IBPriv(Resp.85, x.155))
         z     = true
         z.1   = em(x.151, x.158)
    
    155. ~a    = ~a.81
         Auth_pk
               = pmult(x.150, x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((~a.81*x.150*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, 
                           pmult((x.158*inv((~a.81*x.150*x.159))), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(x.158*inv(x.159))
    
    156. ~a    = ~a.81
         Auth_pk
               = pmult(x.150, x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((~a.81*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.158*inv((~a.81*x.159))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(x.150*x.158*inv(x.159))
    
    157. ~a    = ~a.81
         Auth_pk
               = pmult(x.150, x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((~a.81*x.150*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.158*inv((~a.81*x.150*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(x.158*inv(x.159))
    
    158. ~a    = ~a.81
         Auth_pk
               = pmult(x.150, x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((~a.81*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.158*inv((~a.81*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(x.150*x.158*inv(x.159))
    
    159. ~a    = ~a.81
         Auth_pk
               = pmult(inv(x.150), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.158*inv((~a.81*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, 
                           pmult((x.150*x.158*inv((~a.81*x.159))), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(x.158*inv(x.159))
    
    160. ~a    = ~a.81
         Auth_pk
               = pmult(inv(x.150), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((~a.81*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.158*inv((~a.81*x.159))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(x.158*inv((x.150*x.159)))
    
    161. ~a    = ~a.81
         Auth_pk
               = pmult(inv(x.150), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.158*inv((~a.81*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.150*x.158*inv((~a.81*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(x.158*inv(x.159))
    
    162. ~a    = ~a.81
         Auth_pk
               = pmult(inv(x.150), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((~a.81*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.158*inv((~a.81*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(x.158*inv((x.150*x.159)))
    
    163. ~a    = ~a.81
         Auth_pk
               = pmult(inv((~a.81*x.150)), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv(x.159)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.158*inv(x.159)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(x.158*inv((x.150*x.159)))
    
    164. ~a    = ~a.81
         Auth_pk
               = pmult(inv((~a.81*x.150)), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv(x.159)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.158*inv(x.159)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(x.158*inv((x.150*x.159)))
    
    165. ~a    = ~a.81
         Auth_pk
               = pmult(inv((~a.81*x.150*x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.159), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.150*x.159), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.159*inv(x.151))
    
    166. ~a    = ~a.81
         Auth_pk
               = pmult(inv((~a.81*x.150*x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*inv(x.159)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.150*inv(x.159)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^inv((x.151*x.159))
    
    167. ~a    = ~a.81
         Auth_pk
               = pmult(inv((~a.81*x.150*x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.159), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.150*x.159), x.160), Ini.85
                        >,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.159*inv(x.151))
    
    168. ~a    = ~a.81
         Auth_pk
               = pmult(inv((~a.81*x.150*x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*inv(x.159)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.150*inv(x.159)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^inv((x.151*x.159))
    
    169. ~a    = ~a.81
         Auth_pk
               = pmult(inv((x.150*x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.159*inv(~a.81)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.150*x.159*inv(~a.81)), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.159*inv(x.151))
    
    170. ~a    = ~a.81
         Auth_pk
               = pmult(inv((x.150*x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*inv((~a.81*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.150*inv((~a.81*x.159))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^inv((x.151*x.159))
    
    171. ~a    = ~a.81
         Auth_pk
               = pmult(inv((x.150*x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.159*inv(~a.81)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.150*x.159*inv(~a.81)), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.159*inv(x.151))
    
    172. ~a    = ~a.81
         Auth_pk
               = pmult(inv((x.150*x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*inv((~a.81*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.150*inv((~a.81*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^inv((x.151*x.159))
    
    173. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*x.149*inv(x.150)), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.158*inv((x.148*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, 
                           pmult((x.150*x.158*inv((x.148*x.159))), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(~a.81*x.149*x.158*inv(x.159))
    
    174. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*x.149*inv(x.150)), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((x.148*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.158*inv((x.148*x.159))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(~a.81*x.149*x.158*inv((x.150*x.159)))
    
    175. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*x.149*inv(x.150)), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.158*inv((x.148*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.150*x.158*inv((x.148*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(~a.81*x.149*x.158*inv(x.159))
    
    176. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*x.149*inv(x.150)), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((x.148*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.158*inv((x.148*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(~a.81*x.149*x.158*inv((x.150*x.159)))
    
    177. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*x.149*inv((x.150*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.159*inv(x.148)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.150*x.159*inv(x.148)), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(~a.81*x.149*x.159*inv(x.151))
    
    178. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*x.149*inv((x.150*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*inv((x.148*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.150*inv((x.148*x.159))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(~a.81*x.149*inv((x.151*x.159)))
    
    179. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*x.149*inv((x.150*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*x.159*inv(x.148)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.150*x.159*inv(x.148)), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(~a.81*x.149*x.159*inv(x.151))
    
    180. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*x.149*inv((x.150*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.150*inv((x.148*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.150*inv((x.148*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(~a.81*x.149*inv((x.151*x.159)))
    
    181. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*inv((x.149*x.150))), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.149*x.158*inv(x.159)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.149*x.158*inv(x.159)), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(~a.81*x.148*x.158*inv((x.150*x.159)))
    
    182. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*inv((x.149*x.150))), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.149*x.158*inv((x.148*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, 
                           pmult((x.149*x.158*inv((x.148*x.159))), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(~a.81*x.158*inv((x.150*x.159)))
    
    183. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*inv((x.149*x.150))), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.149*x.158*inv(x.159)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.149*x.158*inv(x.159)), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(~a.81*x.148*x.158*inv((x.150*x.159)))
    
    184. ~a    = ~a.81
         Auth_pk
               = pmult((x.148*inv((x.149*x.150))), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.149*x.158*inv((x.148*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.149*x.158*inv((x.148*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(~a.81*x.158*inv((x.150*x.159)))
    
    185. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((~a.81*x.150*x.159)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(inv((~a.81*x.150*x.159)), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.151*inv(x.159))
    
    186. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.159*inv((~a.81*x.150))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.159*inv((~a.81*x.150))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.151*x.159)
    
    187. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((~a.81*x.150*x.159)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult(inv((~a.81*x.150*x.159)), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.151*inv(x.159))
    
    188. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.159*inv((~a.81*x.150))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.159*inv((~a.81*x.150))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.151*x.159)
    
    189. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv(~a.81)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((x.150*x.159)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(inv((x.150*x.159)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.151*inv(x.159))
    
    190. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv(~a.81)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.159*inv(x.150)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.159*inv(x.150)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.151*x.159)
    
    191. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv(~a.81)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((x.150*x.159)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult(inv((x.150*x.159)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.151*inv(x.159))
    
    192. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv(~a.81)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.159*inv(x.150)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.159*inv(x.150)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.151*x.159)
    
    193. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv(x.152)), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.152*inv((~a.81*x.150))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.152*inv((~a.81*x.150))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.153, x.160)^x.151
    
    194. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv(x.152)), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.152*inv((~a.81*x.150))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.152*inv((~a.81*x.150))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.157))
         z     = true
         z.1   = em(x.153, x.160)^x.151
    
    195. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv((~a.81*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv(x.150), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(inv(x.150), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.153, x.160)^(x.151*inv(x.152))
    
    196. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv((~a.81*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.152*inv(x.150)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.152*inv(x.150)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.153, x.160)^x.151
    
    197. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv((~a.81*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv(x.150), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult(inv(x.150), x.160), Ini.85>,
                        IBPriv(Resp.86, x.157))
         z     = true
         z.1   = em(x.153, x.160)^(x.151*inv(x.152))
    
    198. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*x.151*inv((~a.81*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.152*inv(x.150)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.152*inv(x.150)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.157))
         z     = true
         z.1   = em(x.153, x.160)^x.151
    
    199. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(~a.81)), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((x.150*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.158*inv((x.150*x.159))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.151, x.160)^(x.158*inv(x.159))
    
    200. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(~a.81)), x.151)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.155)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.158*inv((x.150*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.158*inv((x.150*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.155))
         z     = true
         z.1   = em(x.151, x.160)^(x.158*inv(x.159))
    
    201. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((~a.81*x.150*x.159)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(inv((~a.81*x.150*x.159)), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^inv((x.151*x.159))
    
    202. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((~a.81*x.159)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(inv((~a.81*x.159)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.150*inv((x.151*x.159)))
    
    203. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*x.159*inv(~a.81)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.151*x.159*inv(~a.81)), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.150*x.159)
    
    204. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*x.159*inv((~a.81*x.150))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, 
                           pmult((x.151*x.159*inv((~a.81*x.150))), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^x.159
    
    205. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv((~a.81*x.150*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, 
                           pmult((x.151*inv((~a.81*x.150*x.159))), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^inv(x.159)
    
    206. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv((~a.81*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.151*inv((~a.81*x.159))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.150*inv(x.159))
    
    207. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((~a.81*x.150*x.159)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult(inv((~a.81*x.150*x.159)), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^inv((x.151*x.159))
    
    208. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((~a.81*x.159)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult(inv((~a.81*x.159)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.150*inv((x.151*x.159)))
    
    209. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*x.159*inv(~a.81)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.151*x.159*inv(~a.81)), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.150*x.159)
    
    210. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*x.159*inv((~a.81*x.150))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.151*x.159*inv((~a.81*x.150))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^x.159
    
    211. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv((~a.81*x.150*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.151*inv((~a.81*x.150*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^inv(x.159)
    
    212. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv(x.151)), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv((~a.81*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.151*inv((~a.81*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.150*inv(x.159))
    
    213. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(x.159, x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(x.159, x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.150*x.159*inv(x.151))
    
    214. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv(x.159), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(inv(x.159), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.150*inv((x.151*x.159)))
    
    215. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((x.150*x.159)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(inv((x.150*x.159)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^inv((x.151*x.159))
    
    216. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*x.159), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.151*x.159), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.150*x.159)
    
    217. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*x.159*inv(x.150)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.151*x.159*inv(x.150)), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^x.159
    
    218. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv((x.150*x.159))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.151*inv((x.150*x.159))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^inv(x.159)
    
    219. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.159*inv(x.150)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.159*inv(x.150)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.152, x.160)^(x.159*inv(x.151))
    
    220. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult(x.159, x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult(x.159, x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.150*x.159*inv(x.151))
    
    221. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv(x.159), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult(inv(x.159), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.150*inv((x.151*x.159)))
    
    222. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult(inv((x.150*x.159)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult(inv((x.150*x.159)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^inv((x.151*x.159))
    
    223. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*x.159), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.151*x.159), x.160), Ini.85
                        >,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.150*x.159)
    
    224. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*x.159*inv(x.150)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.151*x.159*inv(x.150)), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^x.159
    
    225. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv((x.150*x.159))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.151*inv((x.150*x.159))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^inv(x.159)
    
    226. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151))), x.152)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.156)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.159*inv(x.150)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.159*inv(x.150)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.156))
         z     = true
         z.1   = em(x.152, x.160)^(x.159*inv(x.151))
    
    227. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult(x.151, x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult(x.151, x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.153, x.160)^(x.150*inv(x.152))
    
    228. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv(x.150)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.151*inv(x.150)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.153, x.160)^inv(x.152)
    
    229. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.89
         resp_share
               = pmult(x.151, x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult(x.151, x.160), Ini.85>,
                        IBPriv(Resp.86, x.157))
         z     = true
         z.1   = em(x.153, x.160)^(x.150*inv(x.152))
    
    230. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((~a.81*x.151*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv(x.150)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.151*inv(x.150)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.157))
         z     = true
         z.1   = em(x.153, x.160)^inv(x.152)
    
    231. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((x.151*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv(~a.81)), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.151*inv(~a.81)), x.160), Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.153, x.160)^(x.150*inv(x.152))
    
    232. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((x.151*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = Sign_pk.87
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv((~a.81*x.150))), x.160)
         signature
               = signature.91
         z     = idverify(signature.91,
                          <'Responder', ini_share.89, pmult((x.151*inv((~a.81*x.150))), x.160), 
                           Ini.85>,
                          IBPub(Resp.86, Sign_pk.87))
         z.1   = em(x.153, x.160)^inv(x.152)
    
    233. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((x.151*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv(~a.81)), x.160)
         signature
               = idsign(<'Responder', ini_share.89, pmult((x.151*inv(~a.81)), x.160), 
                         Ini.85>,
                        IBPriv(Resp.86, x.157))
         z     = true
         z.1   = em(x.153, x.160)^(x.150*inv(x.152))
    
    234. ~a    = ~a.81
         Auth_pk
               = pmult((x.150*inv((x.151*x.152))), x.153)
         Ini   = Ini.85
         Resp  = Resp.86
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.89
         resp_share
               = pmult((x.151*inv((~a.81*x.150))), x.160)
         signature
               = idsign(<'Responder', ini_share.89, 
                         pmult((x.151*inv((~a.81*x.150))), x.160), Ini.85>,
                        IBPriv(Resp.86, x.157))
         z     = true
         z.1   = em(x.153, x.160)^inv(x.152)
    
    235. ~a    = ~a.82
         Auth_pk
               = pmult(inv((~a.82*x.151*x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.151*x.160*inv(x.161)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.151*x.160*inv(x.161)), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.160*inv((x.152*x.161)))
    
    236. ~a    = ~a.82
         Auth_pk
               = pmult(inv((~a.82*x.151*x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.151*x.160*inv(x.161)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.151*x.160*inv(x.161)), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.160*inv((x.152*x.161)))
    
    237. ~a    = ~a.82
         Auth_pk
               = pmult(inv((x.151*x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.151*x.160*inv((~a.82*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.151*x.160*inv((~a.82*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.160*inv((x.152*x.161)))
    
    238. ~a    = ~a.82
         Auth_pk
               = pmult(inv((x.151*x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.151*x.160*inv((~a.82*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.151*x.160*inv((~a.82*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.160*inv((x.152*x.161)))
    
    239. ~a    = ~a.82
         Auth_pk
               = pmult((x.149*x.150*inv((x.151*x.152))), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.151*x.160*inv((x.149*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.151*x.160*inv((x.149*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(~a.82*x.150*x.160*inv((x.152*x.161)))
    
    240. ~a    = ~a.82
         Auth_pk
               = pmult((x.149*x.150*inv((x.151*x.152))), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.151*x.160*inv((x.149*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.151*x.160*inv((x.149*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(~a.82*x.150*x.160*inv((x.152*x.161)))
    
    241. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((~a.82*x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.160*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.152*x.160*inv(x.161))
    
    242. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((~a.82*x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.160*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.152*x.160*inv(x.161))
    
    243. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv(~a.82)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.160*inv((x.151*x.161))), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.152*x.160*inv(x.161))
    
    244. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv(~a.82)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.160*inv((x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.152*x.160*inv(x.161))
    
    245. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv(x.153)), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult(inv((~a.82*x.151*x.161)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult(inv((~a.82*x.151*x.161)), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.152*inv((x.153*x.161)))
    
    246. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv(x.153)), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*x.161*inv((~a.82*x.151))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.153*x.161*inv((~a.82*x.151))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.152*x.161)
    
    247. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv(x.153)), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*inv((~a.82*x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.153*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.152*inv(x.161))
    
    248. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv(x.153)), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult(inv((~a.82*x.151*x.161)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult(inv((~a.82*x.151*x.161)), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.152*inv((x.153*x.161)))
    
    249. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv(x.153)), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*x.161*inv((~a.82*x.151))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.153*x.161*inv((~a.82*x.151))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.152*x.161)
    
    250. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv(x.153)), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*inv((~a.82*x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.153*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.152*inv(x.161))
    
    251. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult(inv((x.151*x.161)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult(inv((x.151*x.161)), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.152*inv((x.153*x.161)))
    
    252. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*x.161*inv(x.151)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.153*x.161*inv(x.151)), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.152*x.161)
    
    253. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*inv((x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.153*inv((x.151*x.161))), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.152*inv(x.161))
    
    254. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.161*inv(x.151)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.161*inv(x.151)), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.152*x.161*inv(x.153))
    
    255. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult(inv((x.151*x.161)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, pmult(inv((x.151*x.161)), x.162), 
                         Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.152*inv((x.153*x.161)))
    
    256. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*x.161*inv(x.151)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.153*x.161*inv(x.151)), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.152*x.161)
    
    257. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*inv((x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.153*inv((x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.152*inv(x.161))
    
    258. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.161*inv(x.151)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, pmult((x.161*inv(x.151)), x.162), 
                         Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.152*x.161*inv(x.153))
    
    259. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153*x.154))), x.155)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*inv(x.151)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.153*inv(x.151)), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.155, x.162)^(x.152*inv(x.154))
    
    260. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((~a.82*x.153*x.154))), x.155)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*inv(x.151)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, pmult((x.153*inv(x.151)), x.162), 
                         Ini.86>,
                        IBPriv(Resp.87, x.159))
         z     = true
         z.1   = em(x.155, x.162)^(x.152*inv(x.154))
    
    261. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((x.153*x.154))), x.155)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*inv((~a.82*x.151))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.153*inv((~a.82*x.151))), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.155, x.162)^(x.152*inv(x.154))
    
    262. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*x.152*inv((x.153*x.154))), x.155)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.153*inv((~a.82*x.151))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.153*inv((~a.82*x.151))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.159))
         z     = true
         z.1   = em(x.155, x.162)^(x.152*inv(x.154))
    
    263. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv(x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.160*inv((~a.82*x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.152*x.160*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.160*inv(x.161))
    
    264. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv(x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.160*inv((~a.82*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.152*x.160*inv((~a.82*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.151*x.160*inv(x.161))
    
    265. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv(x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((~a.82*x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.160*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.160*inv((x.152*x.161)))
    
    266. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv(x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((~a.82*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.160*inv((~a.82*x.161))), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.151*x.160*inv((x.152*x.161)))
    
    267. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv(x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.160*inv((~a.82*x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*x.160*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.160*inv(x.161))
    
    268. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv(x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.160*inv((~a.82*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*x.160*inv((~a.82*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.151*x.160*inv(x.161))
    
    269. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv(x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((~a.82*x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.160*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.160*inv((x.152*x.161)))
    
    270. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv(x.152)), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((~a.82*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.160*inv((~a.82*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.151*x.160*inv((x.152*x.161)))
    
    271. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152))), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.160*inv((x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.152*x.160*inv((x.151*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.160*inv(x.161))
    
    272. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152))), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv(x.161)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.160*inv(x.161)), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.151*x.160*inv((x.152*x.161)))
    
    273. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152))), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.160*inv((x.151*x.161))), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.153, x.162)^(x.160*inv((x.152*x.161)))
    
    274. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152))), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.160*inv((x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*x.160*inv((x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.160*inv(x.161))
    
    275. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152))), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv(x.161)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, pmult((x.160*inv(x.161)), x.162), 
                         Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.151*x.160*inv((x.152*x.161)))
    
    276. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152))), x.153)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.157)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.160*inv((x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.160*inv((x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.157))
         z     = true
         z.1   = em(x.153, x.162)^(x.160*inv((x.152*x.161)))
    
    277. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.161), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.152*x.161), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.151*x.161*inv(x.153))
    
    278. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.161*inv(x.151)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.152*x.161*inv(x.151)), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.161*inv(x.153))
    
    279. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*inv(x.161)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.152*inv(x.161)), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.151*inv((x.153*x.161)))
    
    280. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*inv((x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.152*inv((x.151*x.161))), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^inv((x.153*x.161))
    
    281. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.161), x.162)
         signature
               = idsign(<'Responder', ini_share.90, pmult((x.152*x.161), x.162), Ini.86
                        >,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.151*x.161*inv(x.153))
    
    282. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.161*inv(x.151)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*x.161*inv(x.151)), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.161*inv(x.153))
    
    283. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*inv(x.161)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, pmult((x.152*inv(x.161)), x.162), 
                         Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.151*inv((x.153*x.161)))
    
    284. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((~a.82*x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*inv((x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*inv((x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^inv((x.153*x.161))
    
    285. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.161*inv(~a.82)), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.152*x.161*inv(~a.82)), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.151*x.161*inv(x.153))
    
    286. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.161*inv((~a.82*x.151))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.152*x.161*inv((~a.82*x.151))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.161*inv(x.153))
    
    287. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*inv((~a.82*x.151*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, 
                           pmult((x.152*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^inv((x.153*x.161))
    
    288. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = Sign_pk.88
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*inv((~a.82*x.161))), x.162)
         signature
               = signature.92
         z     = idverify(signature.92,
                          <'Responder', ini_share.90, pmult((x.152*inv((~a.82*x.161))), x.162), 
                           Ini.86>,
                          IBPub(Resp.87, Sign_pk.88))
         z.1   = em(x.154, x.162)^(x.151*inv((x.153*x.161)))
    
    289. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.161*inv(~a.82)), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*x.161*inv(~a.82)), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.151*x.161*inv(x.153))
    
    290. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*x.161*inv((~a.82*x.151))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*x.161*inv((~a.82*x.151))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.161*inv(x.153))
    
    291. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*inv((~a.82*x.151*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*inv((~a.82*x.151*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^inv((x.153*x.161))
    
    292. ~a    = ~a.82
         Auth_pk
               = pmult((x.151*inv((x.152*x.153))), x.154)
         Ini   = Ini.86
         Resp  = Resp.87
         Sign_pk
               = GetIBMasterPublicKey(x.158)
         ini_share
               = ini_share.90
         resp_share
               = pmult((x.152*inv((~a.82*x.161))), x.162)
         signature
               = idsign(<'Responder', ini_share.90, 
                         pmult((x.152*inv((~a.82*x.161))), x.162), Ini.86>,
                        IBPriv(Resp.87, x.158))
         z     = true
         z.1   = em(x.154, x.162)^(x.151*inv((x.153*x.161)))
    
    293. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv(x.154)), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*x.162*inv((~a.83*x.152*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, 
                           pmult((x.154*x.162*inv((~a.83*x.152*x.163))), x.164), Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.155, x.164)^(x.153*x.162*inv(x.163))
    
    294. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv(x.154)), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.162*inv((~a.83*x.152*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, 
                           pmult((x.162*inv((~a.83*x.152*x.163))), x.164), Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.155, x.164)^(x.153*x.162*inv((x.154*x.163)))
    
    295. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv(x.154)), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*x.162*inv((~a.83*x.152*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.154*x.162*inv((~a.83*x.152*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.159))
         z     = true
         z.1   = em(x.155, x.164)^(x.153*x.162*inv(x.163))
    
    296. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv(x.154)), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.162*inv((~a.83*x.152*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.162*inv((~a.83*x.152*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.159))
         z     = true
         z.1   = em(x.155, x.164)^(x.153*x.162*inv((x.154*x.163)))
    
    297. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((~a.83*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*x.162*inv((x.152*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, 
                           pmult((x.154*x.162*inv((x.152*x.163))), x.164), Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.155, x.164)^(x.153*x.162*inv(x.163))
    
    298. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((~a.83*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.162*inv((x.152*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, pmult((x.162*inv((x.152*x.163))), x.164), 
                           Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.155, x.164)^(x.153*x.162*inv((x.154*x.163)))
    
    299. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((~a.83*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*x.162*inv((x.152*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.154*x.162*inv((x.152*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.159))
         z     = true
         z.1   = em(x.155, x.164)^(x.153*x.162*inv(x.163))
    
    300. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((~a.83*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.162*inv((x.152*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.162*inv((x.152*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.159))
         z     = true
         z.1   = em(x.155, x.164)^(x.153*x.162*inv((x.154*x.163)))
    
    301. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((~a.83*x.154*x.155))), x.156)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*x.163*inv(x.152)), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, pmult((x.154*x.163*inv(x.152)), x.164), 
                           Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.156, x.164)^(x.153*x.163*inv(x.155))
    
    302. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((~a.83*x.154*x.155))), x.156)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*inv((x.152*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, pmult((x.154*inv((x.152*x.163))), x.164), 
                           Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.156, x.164)^(x.153*inv((x.155*x.163)))
    
    303. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((~a.83*x.154*x.155))), x.156)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.160)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*x.163*inv(x.152)), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.154*x.163*inv(x.152)), x.164), Ini.87>,
                        IBPriv(Resp.88, x.160))
         z     = true
         z.1   = em(x.156, x.164)^(x.153*x.163*inv(x.155))
    
    304. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((~a.83*x.154*x.155))), x.156)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.160)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*inv((x.152*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.154*inv((x.152*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.160))
         z     = true
         z.1   = em(x.156, x.164)^(x.153*inv((x.155*x.163)))
    
    305. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((x.154*x.155))), x.156)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*x.163*inv((~a.83*x.152))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, 
                           pmult((x.154*x.163*inv((~a.83*x.152))), x.164), Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.156, x.164)^(x.153*x.163*inv(x.155))
    
    306. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((x.154*x.155))), x.156)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*inv((~a.83*x.152*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, 
                           pmult((x.154*inv((~a.83*x.152*x.163))), x.164), Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.156, x.164)^(x.153*inv((x.155*x.163)))
    
    307. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((x.154*x.155))), x.156)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.160)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*x.163*inv((~a.83*x.152))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.154*x.163*inv((~a.83*x.152))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.160))
         z     = true
         z.1   = em(x.156, x.164)^(x.153*x.163*inv(x.155))
    
    308. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*x.153*inv((x.154*x.155))), x.156)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.160)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.154*inv((~a.83*x.152*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.154*inv((~a.83*x.152*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.160))
         z     = true
         z.1   = em(x.156, x.164)^(x.153*inv((x.155*x.163)))
    
    309. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*inv((~a.83*x.153*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.153*x.162*inv(x.163)), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, pmult((x.153*x.162*inv(x.163)), x.164), 
                           Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.155, x.164)^(x.152*x.162*inv((x.154*x.163)))
    
    310. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*inv((~a.83*x.153*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.153*x.162*inv((x.152*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, 
                           pmult((x.153*x.162*inv((x.152*x.163))), x.164), Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.155, x.164)^(x.162*inv((x.154*x.163)))
    
    311. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*inv((~a.83*x.153*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.153*x.162*inv(x.163)), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.153*x.162*inv(x.163)), x.164), Ini.87>,
                        IBPriv(Resp.88, x.159))
         z     = true
         z.1   = em(x.155, x.164)^(x.152*x.162*inv((x.154*x.163)))
    
    312. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*inv((~a.83*x.153*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.153*x.162*inv((x.152*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.153*x.162*inv((x.152*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.159))
         z     = true
         z.1   = em(x.155, x.164)^(x.162*inv((x.154*x.163)))
    
    313. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*inv((x.153*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.153*x.162*inv((~a.83*x.152*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, 
                           pmult((x.153*x.162*inv((~a.83*x.152*x.163))), x.164), Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.155, x.164)^(x.162*inv((x.154*x.163)))
    
    314. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*inv((x.153*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = Sign_pk.89
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.153*x.162*inv((~a.83*x.163))), x.164)
         signature
               = signature.93
         z     = idverify(signature.93,
                          <'Responder', ini_share.91, 
                           pmult((x.153*x.162*inv((~a.83*x.163))), x.164), Ini.87>,
                          IBPub(Resp.88, Sign_pk.89))
         z.1   = em(x.155, x.164)^(x.152*x.162*inv((x.154*x.163)))
    
    315. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*inv((x.153*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.153*x.162*inv((~a.83*x.152*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.153*x.162*inv((~a.83*x.152*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.159))
         z     = true
         z.1   = em(x.155, x.164)^(x.162*inv((x.154*x.163)))
    
    316. ~a    = ~a.83
         Auth_pk
               = pmult((x.152*inv((x.153*x.154))), x.155)
         Ini   = Ini.87
         Resp  = Resp.88
         Sign_pk
               = GetIBMasterPublicKey(x.159)
         ini_share
               = ini_share.91
         resp_share
               = pmult((x.153*x.162*inv((~a.83*x.163))), x.164)
         signature
               = idsign(<'Responder', ini_share.91, 
                         pmult((x.153*x.162*inv((~a.83*x.163))), x.164), Ini.87>,
                        IBPriv(Resp.88, x.159))
         z     = true
         z.1   = em(x.155, x.164)^(x.152*x.162*inv((x.154*x.163)))
    
    317. ~a    = ~a.84
         Auth_pk
               = pmult((x.153*x.154*inv((~a.84*x.155*x.156))), x.157)
         Ini   = Ini.88
         Resp  = Resp.89
         Sign_pk
               = Sign_pk.90
         ini_share
               = ini_share.92
         resp_share
               = pmult((x.155*x.164*inv((x.153*x.165))), x.166)
         signature
               = signature.94
         z     = idverify(signature.94,
                          <'Responder', ini_share.92, 
                           pmult((x.155*x.164*inv((x.153*x.165))), x.166), Ini.88>,
                          IBPub(Resp.89, Sign_pk.90))
         z.1   = em(x.157, x.166)^(x.154*x.164*inv((x.156*x.165)))
    
    318. ~a    = ~a.84
         Auth_pk
               = pmult((x.153*x.154*inv((~a.84*x.155*x.156))), x.157)
         Ini   = Ini.88
         Resp  = Resp.89
         Sign_pk
               = GetIBMasterPublicKey(x.161)
         ini_share
               = ini_share.92
         resp_share
               = pmult((x.155*x.164*inv((x.153*x.165))), x.166)
         signature
               = idsign(<'Responder', ini_share.92, 
                         pmult((x.155*x.164*inv((x.153*x.165))), x.166), Ini.88>,
                        IBPriv(Resp.89, x.161))
         z     = true
         z.1   = em(x.157, x.166)^(x.154*x.164*inv((x.156*x.165)))
    
    319. ~a    = ~a.84
         Auth_pk
               = pmult((x.153*x.154*inv((x.155*x.156))), x.157)
         Ini   = Ini.88
         Resp  = Resp.89
         Sign_pk
               = Sign_pk.90
         ini_share
               = ini_share.92
         resp_share
               = pmult((x.155*x.164*inv((~a.84*x.153*x.165))), x.166)
         signature
               = signature.94
         z     = idverify(signature.94,
                          <'Responder', ini_share.92, 
                           pmult((x.155*x.164*inv((~a.84*x.153*x.165))), x.166), Ini.88>,
                          IBPub(Resp.89, Sign_pk.90))
         z.1   = em(x.157, x.166)^(x.154*x.164*inv((x.156*x.165)))
    
    320. ~a    = ~a.84
         Auth_pk
               = pmult((x.153*x.154*inv((x.155*x.156))), x.157)
         Ini   = Ini.88
         Resp  = Resp.89
         Sign_pk
               = GetIBMasterPublicKey(x.161)
         ini_share
               = ini_share.92
         resp_share
               = pmult((x.155*x.164*inv((~a.84*x.153*x.165))), x.166)
         signature
               = idsign(<'Responder', ini_share.92, 
                         pmult((x.155*x.164*inv((~a.84*x.153*x.165))), x.166), Ini.88>,
                        IBPriv(Resp.89, x.161))
         z     = true
         z.1   = em(x.157, x.166)^(x.154*x.164*inv((x.156*x.165)))
  */

rule (modulo E) Responder_2recv:
   [
   St_Resp_1( ~id, Resp, Auth_pk, Auth_sk, Sign_pk, Sign_sk, resp_share,
              Ini, ini_share, key
   ),
   In( mIn )
   ]
  --[
  Eq( true, idverify(mIn, <'Initiator', resp_share>, IBPub(Ini, Sign_pk))
  ),
  Secret( 'KEY', Resp, key ), IN_RESP_2recv( mIn ),
  Commit( Resp, Ini, <'Responder', 'Initiator', key> ), Full( )
  ]->
   [ ]

  /*
  rule (modulo AC) Responder_2recv:
     [
     St_Resp_1( ~id, Resp, Auth_pk, Auth_sk, Sign_pk, Sign_sk, resp_share,
                Ini, ini_share, key
     ),
     In( mIn )
     ]
    --[
    Eq( true, z ), Secret( 'KEY', Resp, key ), IN_RESP_2recv( mIn ),
    Commit( Resp, Ini, <'Responder', 'Initiator', key> ), Full( )
    ]->
     [ ]
    variants (modulo AC)
    1. Ini   = Ini.21
       Sign_pk
             = Sign_pk.23
       mIn   = mIn.27
       resp_share
             = resp_share.28
       z     = idverify(mIn.27, <'Initiator', resp_share.28>,
                        IBPub(Ini.21, Sign_pk.23))
    
    2. Ini   = Ini.40
       Sign_pk
             = GetIBMasterPublicKey(x.75)
       mIn   = idsign(<'Initiator', resp_share.47>, IBPriv(Ini.40, x.75))
       resp_share
             = resp_share.47
       z     = true
  */

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Nequality:
  "∀ x y #i. (Neq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

restriction Once:
  "∀ tag #i #j. ((Once( tag ) @ #i) ∧ (Once( tag ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma secrecy_session_key [use_induction, reuse]:
  all-traces
  "∀ A s #i.
    (Secret( 'KEY', A, s ) @ #i) ⇒
    ((¬(∃ #j. K( s ) @ #j)) ∨ (∃ K X #l. Reveal( K, X ) @ #l))"
/*
guarded formula characterizing all counter-examples:
"∃ A s #i.
  (Secret( 'KEY', A, s ) @ #i)
 ∧
  (∃ #j. (K( s ) @ #j)) ∧ (∀ K X #l. (Reveal( K, X ) @ #l) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥ (∀ #j. (K( s ) @ #j) ⇒ last(#j))  ∥
         (∃ K X #l. (Reveal( K, X ) @ #l) ∧ ¬(last(#l))) )
    case case_1
    solve( Secret( 'KEY', A, s ) @ #i )
      case Initiator_2recv_send
      solve( St_Ini_1( ~id, A, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                       Sign_sk, ini_share, ~a
             ) ▶₀ #i )
        case Initiator_1send
        solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                           IBPriv(Resp, ~IBMasterPrivateKey.1))
               ) @ #vk.5 )
          case Responder_1recv_send
          solve( !KU( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #vk.1 )
            case c_KDF
            solve( !KU( em('P', 'P')^(~IBMasterPrivateKey*~a*~b) ) @ #vk.9 )
              case Initiator_1send_case_1
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case Initiator_1send_case_2
              by solve( !KU( ~b ) @ #vk.10 )
            next
              case Initiator_1send_case_3
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.10 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case Responder_1recv_send_case_1
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case Responder_1recv_send_case_2
              by solve( !KU( ~a ) @ #vk.10 )
            next
              case Responder_1recv_send_case_3
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.10 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case create_IB_AUTH_PrivateKeyGenerator_case_1
              by solve( !KU( ~a ) @ #vk.12 )
            next
              case create_IB_AUTH_PrivateKeyGenerator_case_2
              by solve( !KU( ~b ) @ #vk.10 )
            next
              case create_IB_AUTH_PrivateKeyGenerator_case_3
              by solve( !KU( ~a ) @ #vk.10 )
            qed
          qed
        next
          case c_idsign
          solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.8 )
            case Reveal_IB_SIGN_privkey
            by contradiction /* from formulas */
          next
            case c_IBPriv
            solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.13 )
              case Reveal_IB_MasterPrivateKey
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Responder_2recv
      solve( St_Resp_1( ~id, A, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                        Sign_sk, resp_share, Ini, ini_share, s
             ) ▶₀ #i )
        case Responder_1recv_send
        solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                           IBPriv(Ini, ~IBMasterPrivateKey.1))
               ) @ #vk.1 )
          case Initiator_2recv_send
          solve( (∀ #j.
                   (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ last(#j))  ∥
                 (∃ K X #l. (Reveal( K, X ) @ #l) ∧ ¬(last(#l))) )
            case case_1
            solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                               IBPriv(Resp, ~IBMasterPrivateKey.1))
                   ) @ #vk.9 )
              case c_idsign
              solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.12 )
                case Reveal_IB_SIGN_privkey
                by contradiction /* from formulas */
              next
                case c_IBPriv
                solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.16 )
                  case Reveal_IB_MasterPrivateKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case c_idsign
          solve( !KU( IBPriv(Ini, ~IBMasterPrivateKey.1) ) @ #vk.6 )
            case Reveal_IB_SIGN_privkey
            by contradiction /* from formulas */
          next
            case c_IBPriv
            solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.9 )
              case Reveal_IB_MasterPrivateKey
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Secret( 'KEY', A, s ) @ #i )
      case Initiator_2recv_send
      solve( St_Ini_1( ~id, A, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                       Sign_sk, ini_share, ~a
             ) ▶₀ #i )
        case Initiator_1send
        solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                           IBPriv(Resp, ~IBMasterPrivateKey.1))
               ) @ #vk.5 )
          case Responder_1recv_send
          solve( !KU( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #vk.1 )
            case c_KDF
            solve( !KU( em('P', 'P')^(~IBMasterPrivateKey*~a*~b) ) @ #vk.9 )
              case Initiator_1send_case_1
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case Initiator_1send_case_2
              by solve( !KU( ~b ) @ #vk.10 )
            next
              case Initiator_1send_case_3
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.10 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case Responder_1recv_send_case_1
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case Responder_1recv_send_case_2
              by solve( !KU( ~a ) @ #vk.10 )
            next
              case Responder_1recv_send_case_3
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.10 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case c_exp
              solve( !KU( ~IBMasterPrivateKey ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            next
              case create_IB_AUTH_PrivateKeyGenerator_case_1
              by solve( !KU( ~a ) @ #vk.12 )
            next
              case create_IB_AUTH_PrivateKeyGenerator_case_2
              by solve( !KU( ~b ) @ #vk.10 )
            next
              case create_IB_AUTH_PrivateKeyGenerator_case_3
              by solve( !KU( ~a ) @ #vk.10 )
            qed
          qed
        next
          case c_idsign
          solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.8 )
            case Reveal_IB_SIGN_privkey
            by contradiction /* from formulas */
          next
            case c_IBPriv
            solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.13 )
              case Reveal_IB_MasterPrivateKey
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case Responder_2recv
      solve( St_Resp_1( ~id, A, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                        Sign_sk, resp_share, Ini, ini_share, s
             ) ▶₀ #i )
        case Responder_1recv_send
        solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                           IBPriv(Ini, ~IBMasterPrivateKey.1))
               ) @ #vk.1 )
          case Initiator_2recv_send
          solve( (∀ #j.
                   (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ last(#j))  ∥
                 (∃ K X #l. (Reveal( K, X ) @ #l) ∧ ¬(last(#l))) )
            case case_1
            solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                               IBPriv(Resp, ~IBMasterPrivateKey.1))
                   ) @ #vk.9 )
              case Responder_1recv_send
              solve( !KU( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #vk.2 )
                case c_KDF
                solve( !KU( em('P', 'P')^(~IBMasterPrivateKey*~a*~b) ) @ #vk.10 )
                  case Initiator_1send_case_1
                  solve( !KU( ~IBMasterPrivateKey ) @ #vk.13 )
                    case Reveal_IB_MasterPrivateKey
                    by contradiction /* from formulas */
                  qed
                next
                  case Initiator_1send_case_2
                  by solve( !KU( ~b ) @ #vk.11 )
                next
                  case Initiator_1send_case_3
                  solve( !KU( ~IBMasterPrivateKey ) @ #vk.11 )
                    case Reveal_IB_MasterPrivateKey
                    by contradiction /* from formulas */
                  qed
                next
                  case Responder_1recv_send_case_1
                  solve( !KU( ~IBMasterPrivateKey ) @ #vk.13 )
                    case Reveal_IB_MasterPrivateKey
                    by contradiction /* from formulas */
                  qed
                next
                  case Responder_1recv_send_case_2
                  by solve( !KU( ~a ) @ #vk.11 )
                next
                  case Responder_1recv_send_case_3
                  solve( !KU( ~IBMasterPrivateKey ) @ #vk.11 )
                    case Reveal_IB_MasterPrivateKey
                    by contradiction /* from formulas */
                  qed
                next
                  case c_exp
                  solve( !KU( ~IBMasterPrivateKey ) @ #vk.13 )
                    case Reveal_IB_MasterPrivateKey
                    by contradiction /* from formulas */
                  qed
                next
                  case create_IB_AUTH_PrivateKeyGenerator_case_1
                  by solve( !KU( ~a ) @ #vk.13 )
                next
                  case create_IB_AUTH_PrivateKeyGenerator_case_2
                  by solve( !KU( ~b ) @ #vk.11 )
                next
                  case create_IB_AUTH_PrivateKeyGenerator_case_3
                  by solve( !KU( ~a ) @ #vk.11 )
                qed
              qed
            next
              case c_idsign
              solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.12 )
                case Reveal_IB_SIGN_privkey
                by contradiction /* from formulas */
              next
                case c_IBPriv
                solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.16 )
                  case Reveal_IB_MasterPrivateKey
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case c_idsign
          solve( !KU( IBPriv(Ini, ~IBMasterPrivateKey.1) ) @ #vk.6 )
            case Reveal_IB_SIGN_privkey
            by contradiction /* from formulas */
          next
            case c_IBPriv
            solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.9 )
              case Reveal_IB_MasterPrivateKey
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  next
    case case_3
    by contradiction /* from formulas */
  qed
qed

lemma session_escrow [hide_lemma=secrecy_session_key]:
  exists-trace
  "∃ A B key #i #j #k.
    (((((!KU( key ) @ #i) ∧
        (Commit( A, B, <'Responder', 'Initiator', key> ) @ #j)) ∧
       (Reveal( 'PKG', 'AUTH' ) @ #k)) ∧
      (∀ #i.1 #j.1 #k.1.
        (((User( ) @ #i.1) ∧ (User( ) @ #j.1)) ∧ (User( ) @ #k.1)) ⇒
        (((#i.1 = #j.1) ∨ (#j.1 = #k.1)) ∨ (#i.1 = #k.1)))) ∧
     (¬(∃ Y #r. Reveal( 'ID_SIGN', Y ) @ #r))) ∧
    (¬(∃ #r. Reveal( 'PKG', 'SIGN' ) @ #r))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B key #i #j #k.
  (!KU( key ) @ #i) ∧
  (Commit( A, B, <'Responder', 'Initiator', key> ) @ #j) ∧
  (Reveal( 'PKG', 'AUTH' ) @ #k)
 ∧
  (∀ #i.1 #j.1 #k.1.
    (User( ) @ #i.1) ∧ (User( ) @ #j.1) ∧ (User( ) @ #k.1)
   ⇒
    ((#i.1 = #j.1) ∨ (#j.1 = #k.1) ∨ (#i.1 = #k.1))) ∧
  (∀ Y #r. (Reveal( 'ID_SIGN', Y ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'PKG', 'SIGN' ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Commit( A, B, <'Responder', 'Initiator', key> ) @ #j )
  case Responder_2recv
  solve( St_Resp_1( ~id, A, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                    Sign_sk, resp_share, B, ini_share, key
         ) ▶₀ #j )
    case Responder_1recv_send
    solve( Reveal( 'PKG', 'AUTH' ) @ #k )
      case Reveal_IB_MasterPrivateKey
      solve( !IB_MasterPrivateKey( 'AUTH', IBMasterPrivateKey.2 ) ▶₀ #k )
        case create_IB_AUTH_PrivateKeyGenerator
        solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                           IBPriv(B, ~IBMasterPrivateKey.1))
               ) @ #vk )
          case Initiator_2recv_send
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                             IBPriv(Resp, ~IBMasterPrivateKey.1))
                 ) @ #vk.8 )
            case Responder_1recv_send
            solve( !KU( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #i )
              case c_KDF
              solve( !KU( em('P', 'P')^(~IBMasterPrivateKey*~a*~b) ) @ #vk.9 )
                case Initiator_1send_case_3
                solve( !KU( ~IBMasterPrivateKey ) @ #vk.10 )
                  case Reveal_IB_MasterPrivateKey
                  solve( !KU( pmult(~b, 'P') ) @ #vk.10 )
                    case Responder_1recv_send
                    solve( !KU( pmult(~a, 'P') ) @ #vk.8 )
                      case Initiator_1send
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Weak_Forward_Secrecy_key [use_induction]:
  all-traces
  "∀ A B X Y key #i.
    (Commit( A, B, <X, Y, key> ) @ #i) ⇒
    (((((¬(∃ #j. K( key ) @ #j)) ∨
        ((∃ K #l. Reveal( K, A ) @ #l) ∧ (∃ K #l. Reveal( K, B ) @ #l))) ∨
       (∃ K #l. (Reveal( K, A ) @ #l) ∧ (#l < #i))) ∨
      (∃ K #l. (Reveal( K, B ) @ #l) ∧ (#l < #i))) ∨
     (∃ K #j. Reveal( 'PKG', K ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ A B X Y key #i.
  (Commit( A, B, <X, Y, key> ) @ #i)
 ∧
  (∃ #j. (K( key ) @ #j)) ∧
  (((∀ K #l. (Reveal( K, A ) @ #l) ⇒ ⊥) ∨
    (∀ K #l. (Reveal( K, B ) @ #l) ⇒ ⊥))) ∧
  (∀ K #l. (Reveal( K, A ) @ #l) ⇒ ¬(#l < #i)) ∧
  (∀ K #l. (Reveal( K, B ) @ #l) ⇒ ¬(#l < #i)) ∧
  (∀ K #j. (Reveal( 'PKG', K ) @ #j) ⇒ ⊥)"
*/
induction
  case non_empty_trace
  simplify
  solve( (∀ K #l. (Reveal( K, A ) @ #l) ⇒ ⊥)  ∥
         (∀ K #l. (Reveal( K, B ) @ #l) ⇒ ⊥) )
    case case_1
    solve( (last(#i))  ∥ (∀ #j. (K( key ) @ #j) ⇒ last(#j))  ∥
           ((∃ K #l. (Reveal( K, A ) @ #l) ∧ ¬(last(#l))) ∧
            (∃ K #l. (Reveal( K, B ) @ #l) ∧ ¬(last(#l))))  ∥
           (∃ K #l. (Reveal( K, A ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #i))  ∥
           (∃ K #l. (Reveal( K, B ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #i))  ∥
           (∃ K #j. (Reveal( 'PKG', K ) @ #j) ∧ ¬(last(#j))) )
      case case_1
      solve( Commit( A, B, <X, Y, key> ) @ #i )
        case Responder_2recv
        solve( (∀ #j. (K( key ) @ #j) ⇒ ⊥)  ∥ (∃ K X #l. (Reveal( K, X ) @ #l)) )
          case case_2
          solve( St_Resp_1( ~id, A, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                            Sign_sk, resp_share, B, ini_share, key
                 ) ▶₀ #i )
            case Responder_1recv_send
            solve( Reveal( K, X ) @ #l )
              case Reveal_IB_AUTH_privkey
              solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
                     ) ▶₀ #l )
                case create_IB_identity
                solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                                   IBPriv(B, ~IBMasterPrivateKey.1))
                       ) @ #vk.1 )
                  case Initiator_2recv_send
                  solve( (∀ #j.
                           (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ ⊥)  ∥
                         (∃ K X #l. (Reveal( K, X ) @ #l)) )
                    case case_1
                    solve( (∀ #j.
                             (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ last(#j))  ∥
                           ((∃ K #l. (Reveal( K, $A.1 ) @ #l) ∧ ¬(last(#l))) ∧
                            (∃ K #l. (Reveal( K, Resp ) @ #l) ∧ ¬(last(#l))))  ∥
                           (∃ K #l. (Reveal( K, $A.1 ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.5))  ∥
                           (∃ K #l. (Reveal( K, Resp ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.5))  ∥
                           (∃ K #j. (Reveal( 'PKG', K ) @ #j) ∧ ¬(last(#j))) )
                      case case_1
                      solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                                         IBPriv(Resp, ~IBMasterPrivateKey.1))
                             ) @ #vk.9 )
                        case c_idsign
                        solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.12 )
                          case Reveal_IB_SIGN_privkey
                          solve( splitEqs(1) )
                            case split_case_03
                            solve( !KU( KDF(em('P', x.1)^(~IBMasterPrivateKey*~b*x)) ) @ #vk.5 )
                              case c_KDF
                              solve( !KU( em('P', x.1)^(~IBMasterPrivateKey*~b*x) ) @ #vk.16 )
                                case Responder_1recv_send_case_09
                                solve( !KU( pmult(x, 'P') ) @ #vk.8 )
                                  case c_pmult
                                  solve( !KU( pmult(~b, 'P') ) @ #vk.13 )
                                    case Responder_1recv_send
                                    solve( !KU( pmult(~a, 'P') ) @ #vk.16 )
                                      case Initiator_1send
                                      SOLVED // trace found
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Strong_Forward_Secrecy_key [use_induction]:
  all-traces
  "∀ A B X Y key #i.
    (Commit( A, B, <X, Y, key> ) @ #i) ⇒
    ((((¬(∃ #j. K( key ) @ #j)) ∨
       (∃ K #l. (Reveal( K, A ) @ #l) ∧ (#l < #i))) ∨
      (∃ K #l. (Reveal( K, B ) @ #l) ∧ (#l < #i))) ∨
     (∃ K #j. Reveal( 'PKG', K ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ A B X Y key #i.
  (Commit( A, B, <X, Y, key> ) @ #i)
 ∧
  (∃ #j. (K( key ) @ #j)) ∧
  (∀ K #l. (Reveal( K, A ) @ #l) ⇒ ¬(#l < #i)) ∧
  (∀ K #l. (Reveal( K, B ) @ #l) ⇒ ¬(#l < #i)) ∧
  (∀ K #j. (Reveal( 'PKG', K ) @ #j) ⇒ ⊥)"
*/
induction
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥ (∀ #j. (K( key ) @ #j) ⇒ last(#j))  ∥
         (∃ K #l. (Reveal( K, A ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #i))  ∥
         (∃ K #l. (Reveal( K, B ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #i))  ∥
         (∃ K #j. (Reveal( 'PKG', K ) @ #j) ∧ ¬(last(#j))) )
    case case_1
    solve( Commit( A, B, <X, Y, key> ) @ #i )
      case Responder_2recv
      solve( (∀ #j. (K( key ) @ #j) ⇒ ⊥)  ∥ (∃ K X #l. (Reveal( K, X ) @ #l)) )
        case case_2
        solve( St_Resp_1( ~id, A, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                          Sign_sk, resp_share, B, ini_share, key
               ) ▶₀ #i )
          case Responder_1recv_send
          solve( Reveal( K, X ) @ #l )
            case Reveal_IB_AUTH_privkey
            solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
                   ) ▶₀ #l )
              case create_IB_identity
              solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                                 IBPriv(B, ~IBMasterPrivateKey.1))
                     ) @ #vk.1 )
                case Initiator_2recv_send
                solve( (∀ #j.
                         (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ ⊥)  ∥
                       (∃ K X #l. (Reveal( K, X ) @ #l)) )
                  case case_1
                  solve( (∀ #j.
                           (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ last(#j))  ∥
                         (∃ K #l. (Reveal( K, $A.1 ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.5))  ∥
                         (∃ K #l. (Reveal( K, Resp ) @ #l) ∧ (¬(last(#l))) ∧ (#l < #vr.5))  ∥
                         (∃ K #j. (Reveal( 'PKG', K ) @ #j) ∧ ¬(last(#j))) )
                    case case_1
                    solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                                       IBPriv(Resp, ~IBMasterPrivateKey.1))
                           ) @ #vk.9 )
                      case c_idsign
                      solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.12 )
                        case Reveal_IB_SIGN_privkey
                        solve( splitEqs(1) )
                          case split_case_03
                          solve( !KU( KDF(em('P', x.1)^(~IBMasterPrivateKey*~b*x)) ) @ #vk.5 )
                            case c_KDF
                            solve( !KU( em('P', x.1)^(~IBMasterPrivateKey*~b*x) ) @ #vk.16 )
                              case Responder_1recv_send_case_09
                              solve( !KU( pmult(x, 'P') ) @ #vk.8 )
                                case c_pmult
                                solve( !KU( pmult(~b, 'P') ) @ #vk.13 )
                                  case Responder_1recv_send
                                  solve( !KU( pmult(~a, 'P') ) @ #vk.16 )
                                    case Initiator_1send
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma alivenessInitiatorNoAuthReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i) ⇒
    ((((∃ t2 a2 #j. Running( b, a2, <'Responder', 'Initiator', t2> ) @ #j) ∨
       (∃ #r. Reveal( 'ID_AUTH', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_AUTH', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'AUTH' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i)
 ∧
  (∀ t2 a2 #j.
    (Running( b, a2, <'Responder', 'Initiator', t2> ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_AUTH', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_AUTH', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'AUTH' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Initiator', 'Responder', t> ) @ #i )
  case Initiator_2recv_send
  solve( (∀ #j. (K( KDF(z) ) @ #j) ⇒ ⊥)  ∥
         (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                         IBPriv(b, ~IBMasterPrivateKey.1))
             ) @ #vk.4 )
        case c_idsign
        solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
          case Reveal_IB_SIGN_privkey
          solve( splitEqs(0) )
            case split_case_01
            solve( !KU( pmult(~a, 'P') ) @ #vk.10 )
              case Initiator_1send
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma alivenessInitiatorNoSignReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i) ⇒
    ((((∃ a2 t2 #j. Running( b, a2, <'Responder', 'Initiator', t2> ) @ #j) ∨
       (∃ #r. Reveal( 'ID_SIGN', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_SIGN', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'SIGN' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i)
 ∧
  (∀ a2 t2 #j.
    (Running( b, a2, <'Responder', 'Initiator', t2> ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'SIGN' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Initiator', 'Responder', t> ) @ #i )
  case Initiator_2recv_send
  solve( (∀ #j. (K( KDF(z) ) @ #j) ⇒ ⊥)  ∥
         (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                         IBPriv(b, ~IBMasterPrivateKey.1))
             ) @ #vk.4 )
        case Responder_1recv_send
        by contradiction /* from formulas */
      next
        case c_idsign
        solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
          case Reveal_IB_SIGN_privkey
          by contradiction /* from formulas */
        next
          case c_IBPriv
          solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
            case Reveal_IB_MasterPrivateKey
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( Reveal( K, X ) @ #l )
        case Reveal_IB_AUTH_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Reveal_IB_MasterPrivateKey
        solve( !IB_MasterPrivateKey( X, IBMasterPrivateKey.2 ) ▶₀ #l )
          case create_IB_AUTH_PrivateKeyGenerator
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case create_IB_SIGN_PrivateKeyGenerator
          by contradiction /* from formulas */
        qed
      next
        case Reveal_IB_SIGN_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma weakagreementInitiatorNoSignReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i) ⇒
    ((((∃ t2 #j. Running( b, a, <'Responder', 'Initiator', t2> ) @ #j) ∨
       (∃ #r. Reveal( 'ID_SIGN', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_SIGN', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'SIGN' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, <'Responder', 'Initiator', t2> ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'SIGN' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Initiator', 'Responder', t> ) @ #i )
  case Initiator_2recv_send
  solve( (∀ #j. (K( KDF(z) ) @ #j) ⇒ ⊥)  ∥
         (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                         IBPriv(b, ~IBMasterPrivateKey.1))
             ) @ #vk.4 )
        case Responder_1recv_send
        by contradiction /* from formulas */
      next
        case c_idsign
        solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
          case Reveal_IB_SIGN_privkey
          by contradiction /* from formulas */
        next
          case c_IBPriv
          solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
            case Reveal_IB_MasterPrivateKey
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( Reveal( K, X ) @ #l )
        case Reveal_IB_AUTH_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Reveal_IB_MasterPrivateKey
        solve( !IB_MasterPrivateKey( X, IBMasterPrivateKey.2 ) ▶₀ #l )
          case create_IB_AUTH_PrivateKeyGenerator
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case create_IB_SIGN_PrivateKeyGenerator
          by contradiction /* from formulas */
        qed
      next
        case Reveal_IB_SIGN_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreemenInitiatorNoSignReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i) ⇒
    ((((∃ #j. Running( b, a, <'Responder', 'Initiator', t> ) @ #j) ∨
       (∃ #r. Reveal( 'ID_SIGN', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_SIGN', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'SIGN' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'Responder', 'Initiator', t> ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'SIGN' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Initiator', 'Responder', t> ) @ #i )
  case Initiator_2recv_send
  solve( (∀ #j. (K( KDF(z) ) @ #j) ⇒ ⊥)  ∥
         (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                         IBPriv(b, ~IBMasterPrivateKey.1))
             ) @ #vk.4 )
        case Responder_1recv_send
        by contradiction /* from formulas */
      next
        case c_idsign
        solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
          case Reveal_IB_SIGN_privkey
          by contradiction /* from formulas */
        next
          case c_IBPriv
          solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
            case Reveal_IB_MasterPrivateKey
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( Reveal( K, X ) @ #l )
        case Reveal_IB_AUTH_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Reveal_IB_MasterPrivateKey
        solve( !IB_MasterPrivateKey( X, IBMasterPrivateKey.2 ) ▶₀ #l )
          case create_IB_AUTH_PrivateKeyGenerator
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case create_IB_SIGN_PrivateKeyGenerator
          by contradiction /* from formulas */
        qed
      next
        case Reveal_IB_SIGN_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementInitiatorNoSignReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i) ⇒
    ((((∃ #j.
         ((Running( b, a, <'Responder', 'Initiator', t> ) @ #j) ∧ (#j < #i)) ∧
         (¬(∃ a2 b2 #i2.
             (Commit( a2, b2, <'Initiator', 'Responder', t> ) @ #i2) ∧
             (¬(#i2 = #i))))) ∨
       (∃ #r. Reveal( 'ID_SIGN', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_SIGN', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'SIGN' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Initiator', 'Responder', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'Responder', 'Initiator', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'Initiator', 'Responder', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( 'ID_SIGN', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'SIGN' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Initiator', 'Responder', t> ) @ #i )
  case Initiator_2recv_send
  solve( (∀ #j. (K( KDF(z) ) @ #j) ⇒ ⊥)  ∥
         (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                         IBPriv(b, ~IBMasterPrivateKey.1))
             ) @ #vk.4 )
        case Responder_1recv_send
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2,
                         <'Initiator', 'Responder', KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b))>
                 ) @ #i2 )
            case Initiator_2recv_send
            solve( St_Ini_1( ~id.1, a2, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                             Sign_sk, ini_share, ~a.1
                   ) ▶₀ #i2 )
              case Initiator_1send
              solve( !KU( idsign(<'Responder', pmult(~a.1, 'P'), pmult(x, 'P'), $A.2>,
                                 IBPriv(b2, ~IBMasterPrivateKey.1))
                     ) @ #vk.12 )
                case Responder_1recv_send
                solve( splitEqs(1) )
                  case split
                  by contradiction /* cyclic */
                qed
              next
                case c_idsign
                solve( !KU( IBPriv(b2, ~IBMasterPrivateKey.1) ) @ #vk.15 )
                  case Reveal_IB_SIGN_privkey
                  solve( splitEqs(1) )
                    case split
                    solve( !KU( pmult((~a*~b*inv(~a.1)), 'P') ) @ #vk.13 )
                      case Initiator_1send
                      by solve( !KU( ~b ) @ #vk.21 )
                    next
                      case Responder_1recv_send
                      by solve( !KU( ~a ) @ #vk.21 )
                    next
                      case c_pmult
                      by solve( !KU( ~a ) @ #vk.22 )
                    qed
                  qed
                next
                  case c_IBPriv
                  solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.20 )
                    case Reveal_IB_MasterPrivateKey
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2,
                         <'Initiator', 'Responder', KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b))>
                 ) @ #i2 )
            case Initiator_2recv_send
            solve( St_Ini_1( ~id.1, a2, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                             Sign_sk, ini_share, ~a.1
                   ) ▶₀ #i2 )
              case Initiator_1send
              solve( !KU( idsign(<'Responder', pmult(~a.1, 'P'), pmult(x, 'P'), $A.2>,
                                 IBPriv(b2, ~IBMasterPrivateKey.1))
                     ) @ #vk.12 )
                case Responder_1recv_send
                solve( splitEqs(1) )
                  case split
                  by contradiction /* cyclic */
                qed
              next
                case c_idsign
                solve( !KU( IBPriv(b2, ~IBMasterPrivateKey.1) ) @ #vk.15 )
                  case Reveal_IB_SIGN_privkey
                  solve( splitEqs(1) )
                    case split
                    solve( !KU( pmult((~a*~b*inv(~a.1)), 'P') ) @ #vk.13 )
                      case Initiator_1send
                      by solve( !KU( ~b ) @ #vk.21 )
                    next
                      case Responder_1recv_send
                      by solve( !KU( ~a ) @ #vk.21 )
                    next
                      case c_pmult
                      by solve( !KU( ~a ) @ #vk.22 )
                    qed
                  qed
                next
                  case c_IBPriv
                  solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.20 )
                    case Reveal_IB_MasterPrivateKey
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_idsign
        solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
          case Reveal_IB_SIGN_privkey
          by contradiction /* from formulas */
        next
          case c_IBPriv
          solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
            case Reveal_IB_MasterPrivateKey
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( St_Ini_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                     Sign_sk, ini_share, ~a.1
           ) ▶₀ #i )
      case Initiator_1send
      solve( Reveal( K, X ) @ #l )
        case Reveal_IB_AUTH_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( Commit( a2, b2,
                             <'Initiator', 'Responder', KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b))>
                     ) @ #i2 )
                case Initiator_2recv_send
                solve( St_Ini_1( ~id.1, a2, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                                 Sign_sk, ini_share, ~a.1
                       ) ▶₀ #i2 )
                  case Initiator_1send
                  solve( !KU( idsign(<'Responder', pmult(~a.1, 'P'), pmult(x, 'P'), $A.2>,
                                     IBPriv(b2, ~IBMasterPrivateKey.1))
                         ) @ #vk.12 )
                    case Responder_1recv_send
                    solve( splitEqs(2) )
                      case split
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_idsign
                    solve( !KU( IBPriv(b2, ~IBMasterPrivateKey.1) ) @ #vk.15 )
                      case Reveal_IB_SIGN_privkey
                      solve( splitEqs(2) )
                        case split
                        solve( !KU( pmult((~a*~b*inv(~a.1)), 'P') ) @ #vk.13 )
                          case Initiator_1send
                          by solve( !KU( ~b ) @ #vk.21 )
                        next
                          case Responder_1recv_send
                          by solve( !KU( ~a ) @ #vk.21 )
                        next
                          case c_pmult
                          by solve( !KU( ~a ) @ #vk.22 )
                        qed
                      qed
                    next
                      case c_IBPriv
                      solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.20 )
                        case Reveal_IB_MasterPrivateKey
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( Commit( a2, b2,
                             <'Initiator', 'Responder', KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b))>
                     ) @ #i2 )
                case Initiator_2recv_send
                solve( St_Ini_1( ~id.1, a2, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                                 Sign_sk, ini_share, ~a.1
                       ) ▶₀ #i2 )
                  case Initiator_1send
                  solve( !KU( idsign(<'Responder', pmult(~a.1, 'P'), pmult(x, 'P'), $A.2>,
                                     IBPriv(b2, ~IBMasterPrivateKey.1))
                         ) @ #vk.12 )
                    case Responder_1recv_send
                    solve( splitEqs(2) )
                      case split
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_idsign
                    solve( !KU( IBPriv(b2, ~IBMasterPrivateKey.1) ) @ #vk.15 )
                      case Reveal_IB_SIGN_privkey
                      solve( splitEqs(2) )
                        case split
                        solve( !KU( pmult((~a*~b*inv(~a.1)), 'P') ) @ #vk.13 )
                          case Initiator_1send
                          by solve( !KU( ~b ) @ #vk.21 )
                        next
                          case Responder_1recv_send
                          by solve( !KU( ~a ) @ #vk.21 )
                        next
                          case c_pmult
                          by solve( !KU( ~a ) @ #vk.22 )
                        qed
                      qed
                    next
                      case c_IBPriv
                      solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.20 )
                        case Reveal_IB_MasterPrivateKey
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Reveal_IB_MasterPrivateKey
        solve( !IB_MasterPrivateKey( X, IBMasterPrivateKey.2 ) ▶₀ #l )
          case create_IB_AUTH_PrivateKeyGenerator
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( Commit( a2, b2,
                             <'Initiator', 'Responder', KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b))>
                     ) @ #i2 )
                case Initiator_2recv_send
                solve( St_Ini_1( ~id.1, a2, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                                 Sign_sk, ini_share, ~a.1
                       ) ▶₀ #i2 )
                  case Initiator_1send
                  solve( !KU( idsign(<'Responder', pmult(~a.1, 'P'), pmult(x, 'P'), $A.2>,
                                     IBPriv(b2, ~IBMasterPrivateKey.1))
                         ) @ #vk.12 )
                    case Responder_1recv_send
                    solve( splitEqs(2) )
                      case split
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_idsign
                    solve( !KU( IBPriv(b2, ~IBMasterPrivateKey.1) ) @ #vk.15 )
                      case Reveal_IB_SIGN_privkey
                      solve( splitEqs(2) )
                        case split
                        solve( !KU( pmult((~a*~b*inv(~a.1)), 'P') ) @ #vk.13 )
                          case Initiator_1send
                          by solve( !KU( ~b ) @ #vk.21 )
                        next
                          case Responder_1recv_send
                          by solve( !KU( ~a ) @ #vk.21 )
                        next
                          case c_pmult
                          by solve( !KU( ~a ) @ #vk.22 )
                        qed
                      qed
                    next
                      case c_IBPriv
                      solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.20 )
                        case Reveal_IB_MasterPrivateKey
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( Commit( a2, b2,
                             <'Initiator', 'Responder', KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b))>
                     ) @ #i2 )
                case Initiator_2recv_send
                solve( St_Ini_1( ~id.1, a2, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                                 Sign_sk, ini_share, ~a.1
                       ) ▶₀ #i2 )
                  case Initiator_1send
                  solve( !KU( idsign(<'Responder', pmult(~a.1, 'P'), pmult(x, 'P'), $A.2>,
                                     IBPriv(b2, ~IBMasterPrivateKey.1))
                         ) @ #vk.12 )
                    case Responder_1recv_send
                    solve( splitEqs(2) )
                      case split
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_idsign
                    solve( !KU( IBPriv(b2, ~IBMasterPrivateKey.1) ) @ #vk.15 )
                      case Reveal_IB_SIGN_privkey
                      solve( splitEqs(2) )
                        case split
                        solve( !KU( pmult((~a*~b*inv(~a.1)), 'P') ) @ #vk.13 )
                          case Initiator_1send
                          by solve( !KU( ~b ) @ #vk.21 )
                        next
                          case Responder_1recv_send
                          by solve( !KU( ~a ) @ #vk.21 )
                        next
                          case c_pmult
                          by solve( !KU( ~a ) @ #vk.22 )
                        qed
                      qed
                    next
                      case c_IBPriv
                      solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.20 )
                        case Reveal_IB_MasterPrivateKey
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case create_IB_SIGN_PrivateKeyGenerator
          by contradiction /* from formulas */
        qed
      next
        case Reveal_IB_SIGN_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), resp_share, $A>,
                             IBPriv(b, ~IBMasterPrivateKey.1))
                 ) @ #vk.4 )
            case Responder_1recv_send
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( Commit( a2, b2,
                             <'Initiator', 'Responder', KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b))>
                     ) @ #i2 )
                case Initiator_2recv_send
                solve( St_Ini_1( ~id.1, a2, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                                 Sign_sk, ini_share, ~a.1
                       ) ▶₀ #i2 )
                  case Initiator_1send
                  solve( !KU( idsign(<'Responder', pmult(~a.1, 'P'), pmult(x, 'P'), $A.2>,
                                     IBPriv(b2, ~IBMasterPrivateKey.1))
                         ) @ #vk.12 )
                    case Responder_1recv_send
                    solve( splitEqs(2) )
                      case split
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_idsign
                    solve( !KU( IBPriv(b2, ~IBMasterPrivateKey.1) ) @ #vk.15 )
                      case Reveal_IB_SIGN_privkey
                      solve( splitEqs(2) )
                        case split
                        solve( !KU( pmult((~a*~b*inv(~a.1)), 'P') ) @ #vk.13 )
                          case Initiator_1send
                          by solve( !KU( ~b ) @ #vk.21 )
                        next
                          case Responder_1recv_send
                          by solve( !KU( ~a ) @ #vk.21 )
                        next
                          case c_pmult
                          by solve( !KU( ~a ) @ #vk.22 )
                        qed
                      qed
                    next
                      case c_IBPriv
                      solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.20 )
                        case Reveal_IB_MasterPrivateKey
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              solve( Commit( a2, b2,
                             <'Initiator', 'Responder', KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b))>
                     ) @ #i2 )
                case Initiator_2recv_send
                solve( St_Ini_1( ~id.1, a2, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                                 Sign_sk, ini_share, ~a.1
                       ) ▶₀ #i2 )
                  case Initiator_1send
                  solve( !KU( idsign(<'Responder', pmult(~a.1, 'P'), pmult(x, 'P'), $A.2>,
                                     IBPriv(b2, ~IBMasterPrivateKey.1))
                         ) @ #vk.12 )
                    case Responder_1recv_send
                    solve( splitEqs(2) )
                      case split
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_idsign
                    solve( !KU( IBPriv(b2, ~IBMasterPrivateKey.1) ) @ #vk.15 )
                      case Reveal_IB_SIGN_privkey
                      solve( splitEqs(2) )
                        case split
                        solve( !KU( pmult((~a*~b*inv(~a.1)), 'P') ) @ #vk.13 )
                          case Initiator_1send
                          by solve( !KU( ~b ) @ #vk.21 )
                        next
                          case Responder_1recv_send
                          by solve( !KU( ~a ) @ #vk.21 )
                        next
                          case c_pmult
                          by solve( !KU( ~a ) @ #vk.22 )
                        qed
                      qed
                    next
                      case c_IBPriv
                      solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.20 )
                        case Reveal_IB_MasterPrivateKey
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_idsign
            solve( !KU( IBPriv(b, ~IBMasterPrivateKey.1) ) @ #vk.7 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.12 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma alivenessResponderNoAuthReveal [use_induction]:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i) ⇒
    ((((∃ t2 #j. Running( b, a, <'Initiator', 'Responder', t2> ) @ #j) ∨
       (∃ #r. Reveal( 'ID_AUTH', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_AUTH', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'AUTH' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, <'Initiator', 'Responder', t2> ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_AUTH', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_AUTH', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'AUTH' ) @ #j) ⇒ ⊥)"
*/
induction
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ t2 #j.
           (Running( b, a, <'Initiator', 'Responder', t2> ) @ #j) ∧ ¬(last(#j)))  ∥
         (∃ #r. (Reveal( 'ID_AUTH', a ) @ #r) ∧ ¬(last(#r)))  ∥
         (∃ #r. (Reveal( 'ID_AUTH', b ) @ #r) ∧ ¬(last(#r)))  ∥
         (∃ #j. (Reveal( 'PKG', 'AUTH' ) @ #j) ∧ ¬(last(#j))) )
    case case_1
    solve( Commit( a, b, <'Responder', 'Initiator', t> ) @ #i )
      case Responder_2recv
      solve( (∀ #j. (K( t ) @ #j) ⇒ ⊥)  ∥ (∃ K X #l. (Reveal( K, X ) @ #l)) )
        case case_1
        solve( St_Resp_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                          Sign_sk, resp_share, b, ini_share, t
               ) ▶₀ #i )
          case Responder_1recv_send
          solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                             IBPriv(b.1, ~IBMasterPrivateKey.1))
                 ) @ #vk )
            case Initiator_2recv_send
            solve( (∀ #j.
                     (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ ⊥)  ∥
                   (∃ K X #l. (Reveal( K, X ) @ #l)) )
              case case_1
              solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                                 IBPriv(Resp, ~IBMasterPrivateKey.1))
                     ) @ #vk.8 )
                case c_idsign
                solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.11 )
                  case Reveal_IB_SIGN_privkey
                  solve( splitEqs(1) )
                    case split_case_01
                    solve( !KU( pmult(~b, 'P') ) @ #vk.12 )
                      case Responder_1recv_send
                      solve( !KU( pmult(~a, 'P') ) @ #vk.14 )
                        case Initiator_1send
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma alivenessResponderNoSignReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i) ⇒
    ((((∃ a2 t2 #j. Running( b, a2, <'Initiator', 'Responder', t2> ) @ #j) ∨
       (∃ #r. Reveal( 'ID_SIGN', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_SIGN', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'SIGN' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i)
 ∧
  (∀ a2 t2 #j.
    (Running( b, a2, <'Initiator', 'Responder', t2> ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'SIGN' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Responder', 'Initiator', t> ) @ #i )
  case Responder_2recv
  solve( (∀ #j. (K( t ) @ #j) ⇒ ⊥)  ∥ (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Resp_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                      Sign_sk, resp_share, b, ini_share, t
           ) ▶₀ #i )
      case Responder_1recv_send
      solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                         IBPriv(b.1, ~IBMasterPrivateKey.1))
             ) @ #vk )
        case Initiator_2recv_send
        by contradiction /* from formulas */
      next
        case c_idsign
        solve( !KU( IBPriv(b.1, ~IBMasterPrivateKey.1) ) @ #vk.5 )
          case Reveal_IB_SIGN_privkey
          by contradiction /* from formulas */
        next
          case c_IBPriv
          solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.8 )
            case Reveal_IB_MasterPrivateKey
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( St_Resp_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                      Sign_sk, resp_share, b, ini_share, t
           ) ▶₀ #i )
      case Responder_1recv_send
      solve( Reveal( K, X ) @ #l )
        case Reveal_IB_AUTH_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                             IBPriv(b.1, ~IBMasterPrivateKey.1))
                 ) @ #vk )
            case Initiator_2recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b.1, ~IBMasterPrivateKey.1) ) @ #vk.5 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.8 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Reveal_IB_MasterPrivateKey
        solve( !IB_MasterPrivateKey( X, IBMasterPrivateKey.2 ) ▶₀ #l )
          case create_IB_AUTH_PrivateKeyGenerator
          solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                             IBPriv(b.1, ~IBMasterPrivateKey.1))
                 ) @ #vk )
            case Initiator_2recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b.1, ~IBMasterPrivateKey.1) ) @ #vk.5 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.8 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case create_IB_SIGN_PrivateKeyGenerator
          by contradiction /* from formulas */
        qed
      next
        case Reveal_IB_SIGN_privkey
        solve( !IB_Identity( ~id.1, X, Auth_pk, Auth_sk, Sign_pk, Sign_sk
               ) ▶₀ #l )
          case create_IB_identity
          solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                             IBPriv(b.1, ~IBMasterPrivateKey.1))
                 ) @ #vk )
            case Initiator_2recv_send
            by contradiction /* from formulas */
          next
            case c_idsign
            solve( !KU( IBPriv(b.1, ~IBMasterPrivateKey.1) ) @ #vk.5 )
              case Reveal_IB_SIGN_privkey
              by contradiction /* from formulas */
            next
              case c_IBPriv
              solve( !KU( ~IBMasterPrivateKey.1 ) @ #vk.8 )
                case Reveal_IB_MasterPrivateKey
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma weakagreementResponderNoSignReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i) ⇒
    ((((∃ t2 #j. Running( b, a, <'Initiator', 'Responder', t2> ) @ #j) ∨
       (∃ #r. Reveal( 'ID_SIGN', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_SIGN', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'SIGN' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i)
 ∧
  (∀ t2 #j. (Running( b, a, <'Initiator', 'Responder', t2> ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'SIGN' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Responder', 'Initiator', t> ) @ #i )
  case Responder_2recv
  solve( (∀ #j. (K( t ) @ #j) ⇒ ⊥)  ∥ (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Resp_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                      Sign_sk, resp_share, b, ini_share, t
           ) ▶₀ #i )
      case Responder_1recv_send
      solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                         IBPriv(b.1, ~IBMasterPrivateKey.1))
             ) @ #vk )
        case Initiator_2recv_send
        solve( (∀ #j.
                 (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ ⊥)  ∥
               (∃ K X #l. (Reveal( K, X ) @ #l)) )
          case case_1
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                             IBPriv(Resp, ~IBMasterPrivateKey.1))
                 ) @ #vk.8 )
            case c_idsign
            solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.11 )
              case Reveal_IB_SIGN_privkey
              solve( splitEqs(1) )
                case split_case_01
                solve( !KU( pmult(~b, 'P') ) @ #vk.12 )
                  case Responder_1recv_send
                  solve( !KU( pmult(~a, 'P') ) @ #vk.14 )
                    case Initiator_1send
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreemenResponderNoSignReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i) ⇒
    ((((∃ #j. Running( b, a, <'Initiator', 'Responder', t> ) @ #j) ∨
       (∃ #r. Reveal( 'ID_SIGN', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_SIGN', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'SIGN' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'Initiator', 'Responder', t> ) @ #j) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'SIGN' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Responder', 'Initiator', t> ) @ #i )
  case Responder_2recv
  solve( (∀ #j. (K( t ) @ #j) ⇒ ⊥)  ∥ (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Resp_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                      Sign_sk, resp_share, b, ini_share, t
           ) ▶₀ #i )
      case Responder_1recv_send
      solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                         IBPriv(b.1, ~IBMasterPrivateKey.1))
             ) @ #vk )
        case Initiator_2recv_send
        solve( (∀ #j.
                 (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ ⊥)  ∥
               (∃ K X #l. (Reveal( K, X ) @ #l)) )
          case case_1
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                             IBPriv(Resp, ~IBMasterPrivateKey.1))
                 ) @ #vk.8 )
            case c_idsign
            solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.11 )
              case Reveal_IB_SIGN_privkey
              solve( splitEqs(1) )
                case split_case_01
                solve( !KU( pmult(~b, 'P') ) @ #vk.12 )
                  case Responder_1recv_send
                  solve( !KU( pmult(~a, 'P') ) @ #vk.14 )
                    case Initiator_1send
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementResponderNoSignReveal:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i) ⇒
    ((((∃ #j.
         ((Running( b, a, <'Initiator', 'Responder', t> ) @ #j) ∧ (#j < #i)) ∧
         (¬(∃ a2 b2 #i2.
             (Commit( a2, b2, <'Responder', 'Initiator', t> ) @ #i2) ∧
             (¬(#i2 = #i))))) ∨
       (∃ #r. Reveal( 'ID_SIGN', a ) @ #r)) ∨
      (∃ #r. Reveal( 'ID_SIGN', b ) @ #r)) ∨
     (∃ #j. Reveal( 'PKG', 'SIGN' ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'Responder', 'Initiator', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'Initiator', 'Responder', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'Responder', 'Initiator', t> ) @ #i2)
      ∧
       ¬(#i2 = #i)))) ∧
  (∀ #r. (Reveal( 'ID_SIGN', a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( 'ID_SIGN', b ) @ #r) ⇒ ⊥) ∧
  (∀ #j. (Reveal( 'PKG', 'SIGN' ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'Responder', 'Initiator', t> ) @ #i )
  case Responder_2recv
  solve( (∀ #j. (K( t ) @ #j) ⇒ ⊥)  ∥ (∃ K X #l. (Reveal( K, X ) @ #l)) )
    case case_1
    solve( St_Resp_1( ~id, a, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                      Sign_sk, resp_share, b, ini_share, t
           ) ▶₀ #i )
      case Responder_1recv_send
      solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                         IBPriv(b.1, ~IBMasterPrivateKey.1))
             ) @ #vk )
        case Initiator_2recv_send
        solve( (∀ #j.
                 (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ ⊥)  ∥
               (∃ K X #l. (Reveal( K, X ) @ #l)) )
          case case_1
          solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                             IBPriv(Resp, ~IBMasterPrivateKey.1))
                 ) @ #vk.8 )
            case c_idsign
            solve( !KU( IBPriv(Resp, ~IBMasterPrivateKey.1) ) @ #vk.11 )
              case Reveal_IB_SIGN_privkey
              solve( splitEqs(1) )
                case split_case_01
                solve( !KU( pmult(~b, 'P') ) @ #vk.12 )
                  case Responder_1recv_send
                  solve( !KU( pmult(~a, 'P') ) @ #vk.14 )
                    case Initiator_1send
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executability_lemma:
  exists-trace
  "∃ #i.
    ((Full( ) @ #i) ∧
     (∀ #i.1 #j #k.
       (((User( ) @ #i.1) ∧ (User( ) @ #j)) ∧ (User( ) @ #k)) ⇒
       (((#i.1 = #j) ∨ (#j = #k)) ∨ (#i.1 = #k)))) ∧
    (¬(∃ X Y #r. Reveal( X, Y ) @ #r))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (Full( ) @ #i)
 ∧
  (∀ #i.1 #j #k.
    (User( ) @ #i.1) ∧ (User( ) @ #j) ∧ (User( ) @ #k)
   ⇒
    ((#i.1 = #j) ∨ (#j = #k) ∨ (#i.1 = #k))) ∧
  (∀ X Y #r. (Reveal( X, Y ) @ #r) ⇒ ⊥)"
*/
simplify
solve( (∀ #j. (K( key ) @ #j) ⇒ ⊥)  ∥ (∃ K X #l. (Reveal( K, X ) @ #l)) )
  case case_1
  solve( St_Resp_1( ~id, Resp, Auth_pk, Auth_sk, GetIBMasterPublicKey(x),
                    Sign_sk, resp_share, Ini, ini_share, key
         ) ▶₀ #i )
    case Responder_1recv_send
    solve( !KU( idsign(<'Initiator', pmult(~b, 'P')>,
                       IBPriv(Ini, ~IBMasterPrivateKey.1))
           ) @ #vk )
      case Initiator_2recv_send
      solve( (∀ #j.
               (K( KDF(em('P', 'P')^(~IBMasterPrivateKey*~a*~b)) ) @ #j) ⇒ ⊥)  ∥
             (∃ K X #l. (Reveal( K, X ) @ #l)) )
        case case_1
        solve( !KU( idsign(<'Responder', pmult(~a, 'P'), pmult(~b, 'P'), $A.1>,
                           IBPriv(Resp, ~IBMasterPrivateKey.1))
               ) @ #vk.8 )
          case Responder_1recv_send
          solve( !KU( pmult(~b, 'P') ) @ #vk.8 )
            case Responder_1recv_send
            solve( !KU( pmult(~a, 'P') ) @ #vk.6 )
              case Initiator_1send
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

/*
==============================================================================
summary of summaries:

analyzed: BP_IBS_3.spthy

  output:          BP_IBS_3_Full.spthy
  secrecy_session_key (all-traces): verified (96 steps)
  session_escrow (exists-trace): verified (13 steps)
  Weak_Forward_Secrecy_key (all-traces): falsified - found trace (21 steps)
  Strong_Forward_Secrecy_key (all-traces): falsified - found trace (20 steps)
  alivenessInitiatorNoAuthReveal (all-traces): falsified - found trace (9 steps)
  alivenessInitiatorNoSignReveal (all-traces): verified (34 steps)
  weakagreementInitiatorNoSignReveal (all-traces): verified (34 steps)
  noninjectiveagreemenInitiatorNoSignReveal (all-traces): verified (34 steps)
  injectiveagreementInitiatorNoSignReveal (all-traces): verified (138 steps)
  alivenessResponderNoAuthReveal (all-traces): falsified - found trace (14 steps)
  alivenessResponderNoSignReveal (all-traces): verified (34 steps)
  weakagreementResponderNoSignReveal (all-traces): falsified - found trace (12 steps)
  noninjectiveagreemenResponderNoSignReveal (all-traces): falsified - found trace (12 steps)
  injectiveagreementResponderNoSignReveal (all-traces): falsified - found trace (12 steps)
  executability_lemma (exists-trace): verified (9 steps)

==============================================================================
*/
end