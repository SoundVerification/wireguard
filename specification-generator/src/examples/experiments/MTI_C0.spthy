theory MTI_C0
begin

builtins: diffie-hellman 

functions: kdf/1

// Enable this equation to find a small-subgroup (for <1>) attack.
// equations: exp(1,x) = 1

section{* The MTI/C0 protocol *}

/*
 * Protocol:	MTI/C0
 * Modeler: 	Benedikt Schmidt
 * Date: 	February 2012
 * Source:	"About the Security of MTI/C0 and MQV"
 *	        Sebastien Kunz-Jacques, David Pointcheval
 * 		SCN'06, Springer, 2006
 *
 * Status: 	complete
 */

// Public key infrastructure
rule Register_pk:
  [ Fr(~ltk) ] 
 --> 
  [ !Ltk($A, ~ltk), !Pk($A, 'g'^~ltk), Out('g'^~ltk) ]

// Initiator
rule Init_1:
  [ Fr( ~ekI )
  , !Pk( $R, 'g'^~ltkR)  ]
 -->
  [ Init_1( $I, $R, 'g'^~ltkR, ~ekI )
  , Out( ('g'^~ltkR)^~ekI ) ]

rule Init_2:
  [ Init_1( $I, $R, 'g'^~ltkR, ~ekI )
  , !Ltk( $I, ~ltkI)
  , In( Y ) ]
 --[ AcceptedI( ~ekI, $I, $R, ('g'^~ltkR)^~ekI, Y
              ,  kdf( $I, $R, ('g'^~ltkR)^~ekI, Y, Y^(inv(~ltkI))^~ekI ) )
 ]->
  [ !SessionKey( ~ekI
               , kdf( $I, $R, ('g'^~ltkR)^~ekI, Y, Y^(inv(~ltkI))^~ekI ) ) ]

// Responder
rule Resp_1:
    [ Fr( ~ekR )
    , !Ltk( $R, ~ltkR )
    , !Pk( $I, 'g'^~ltkI )
    , In( X ) ]
  --[ AcceptedR( ~ekR, $I, $R, X, ('g'^~ltkI)^~ekR
               , kdf(  $I, $R, X, ('g'^~ltkI)^~ekR, X^(inv(~ltkR))^~ekR ) )
  ]->
    [ Out( ('g'^~ltkI)^~ekR )
    , !SessionKey( ~ekR
                 , kdf( $I, $R, X, ('g'^~ltkI)^~ekR, X^(inv(~ltkR))^~ekR ) )
    ]


// Reveal actions
rule Sessionkey_Reveal:
    [ !SessionKey(~tid, k) ]
  --[ SesskRev(~tid) ]->
    [ Out(k) ]

// Longterm Key reveal
rule Ltk_Reveal:
    [ !Ltk(~A, k) ]
  --[ LtkRev(~A) ]->
    [ Out(k) ]


lemma Executable:
  "not (Ex #i #j ttest tpartner I R sessKey hki hkr.
     AcceptedI( ttest,   I, R, hki, hkr, sessKey ) @ i &
     AcceptedR( tpartner,I, R, hki, hkr, sessKey ) @ j)"


lemma Secrecy_wrt_sesskRev_and_ltk_rev_Initiator:
  "not (Ex #i1 #i2 ttest I R sessKey  hki hkr.
     AcceptedI( ttest, I, R, hki, hkr, sessKey ) @ i1 &
     K(sessKey) @ i2 &
     // No session key reveal of test
     not (Ex #i3. SesskRev( ttest ) @ i3) &
     // No session key reveal of partner
     not (Ex #i3 #i4 tpartner kpartner.
            SesskRev( tpartner ) @ i3
          & AcceptedR( tpartner, I, R, hki, hkr, kpartner) @ i4
         ) &
     // No longterm key reveal of I before completion.
     not (Ex #i3. LtkRev( I ) @ i3 & i3 < i1) &
     // No longterm key reveal of R before completion.
     not (Ex #i3. LtkRev( R ) @ i3 & i3 < i1)
     )
  "

lemma Secrecy_wrt_sesskRev_and_ltk_rev_Responder:
  "not (Ex #i1 #i2 ttest I R sessKey  hki hkr.
     AcceptedR( ttest, I, R, hki, hkr, sessKey ) @ i1 &
     K(sessKey) @ i2 &
     // No session key reveal of test
     not (Ex #i3. SesskRev( ttest ) @ i3) &
     // No session key reveal of partner
     not (Ex #i3 #i4 tpartner kpartner.
            SesskRev( tpartner ) @ i3
          & AcceptedI( tpartner, I, R, hki, hkr, kpartner) @ i4
         ) &
     // No longterm key reveal of I before completion.
     not (Ex #i3. LtkRev( I ) @ i3 & i3 < i1) &
     // No longterm key reveal of R before completion.
     not (Ex #i3. LtkRev( R ) @ i3 & i3 < i1)
     )
  "

end
