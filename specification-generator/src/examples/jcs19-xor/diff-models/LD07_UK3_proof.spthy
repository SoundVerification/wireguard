theory LD07_UK3_proof begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: Tag/2 */

/* looping facts with injective instances: Tag/2 */

/* looping facts with injective instances: Tag/2 */

/* looping facts with injective instances: Tag/2 */

rule (modulo E) SetupLearning:
   [ Fr( ~k ), Fr( ~k1 ) ]
  --[ Setup( ~k ), OnlyOnce( 'setup' ) ]->
   [ Tag( ~k, (~k⊕~k1) ) ]

rule (modulo E) tag1:
   [ In( r1 ), Tag( ~k, x ) ]
  --[
  Response( ~k, 'Tag' ), Challenge( x, 'Tag' ), Tag( ~k, x ),
  Running( ~k, 'Tag', x )
  ]->
   [ Out( h((r1⊕x)) ), Tag( ~k, x ) ]

rule (modulo E) tag2:
   [ Fr( ~k2 ), Fr( ~k3 ), In( <newKey, newhash> ), Tag( ~k, x ) ]
  --[
  Eq( h((newKey⊕x)), newhash ), Alive( ~k, 'Reader' ),
  Update( x, newKey, 'Tag' )
  ]->
   [ Tag( diff(~k, ~k2), diff((newKey⊕x), (~k2⊕~k3)) ) ]

restriction equality [right]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction equality [left]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction unique [right]:
  "∀ x #i #j.
    ((OnlyOnce( x ) @ #i) ∧ (OnlyOnce( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique [left]:
  "∀ x #i #j.
    ((OnlyOnce( x ) @ #i) ∧ (OnlyOnce( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma executable [right]:
  exists-trace
  "∃ x y #i #j.
    (((Challenge( x, 'Tag' ) @ #i) ∧ (Update( x, y, 'Tag' ) @ #j)) ∧
     (¬(y = zero))) ∧
    (¬(∃ #l. (Challenge( x, 'Tag' ) @ #l) ∧ (¬(#i = #l))))"
/*
guarded formula characterizing all satisfying traces:
"∃ x y #i #j.
  (Challenge( x, 'Tag' ) @ #i) ∧ (Update( x, y, 'Tag' ) @ #j)
 ∧
  (¬(y = zero)) ∧ (∀ #l. (Challenge( x, 'Tag' ) @ #l) ⇒ #i = #l)"
*/
simplify
solve( Tag( ~k, x ) ▶₁ #i )
  case SetupLearning
  solve( Tag( ~k.1, x ) ▶₃ #j )
    case tag1
    solve( !KU( h(z.1) ) @ #vk.3 )
      case tag1
      solve( Tag( ~k.1, x.1 ) ▶₁ #vr.1 )
        case SetupLearning
        solve( splitEqs(2) )
          case split
          solve( splitEqs(0) )
            case split_case_7
            solve( splitEqs(1) )
              case split
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executable [left]:
  exists-trace
  "∃ x y #i #j.
    (((Challenge( x, 'Tag' ) @ #i) ∧ (Update( x, y, 'Tag' ) @ #j)) ∧
     (¬(y = zero))) ∧
    (¬(∃ #l. (Challenge( x, 'Tag' ) @ #l) ∧ (¬(#i = #l))))"
/*
guarded formula characterizing all satisfying traces:
"∃ x y #i #j.
  (Challenge( x, 'Tag' ) @ #i) ∧ (Update( x, y, 'Tag' ) @ #j)
 ∧
  (¬(y = zero)) ∧ (∀ #l. (Challenge( x, 'Tag' ) @ #l) ⇒ #i = #l)"
*/
simplify
solve( Tag( ~k, x ) ▶₁ #i )
  case SetupLearning
  solve( Tag( ~k.1, x ) ▶₃ #j )
    case tag1
    solve( !KU( h(z.1) ) @ #vk.3 )
      case tag1
      solve( Tag( ~k.1, x.1 ) ▶₁ #vr.1 )
        case SetupLearning
        solve( splitEqs(2) )
          case split
          solve( splitEqs(0) )
            case split_case_7
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case tag1
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case tag1
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case tag1
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case tag1
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  qed
next
  case Rule_Destrd_union
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case tag1
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case tag1
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    qed
  qed
next
  case Rule_Destrd_xor
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case tag1
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      qed
    next
      case d_xor_case_2
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case tag1
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case tag1
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      qed
    next
      case d_xor_case_2
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case tag1
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case h
        step( solve( Tag( ~k, x ) ▶₁ #vr ) )
          case SetupLearning
          by sorry
        next
          case tag1
          by sorry
        next
          case tag2
          step( solve( Tag( ~k, x.1 ) ▶₃ #vr.1 ) )
            case SetupLearning
            by sorry
          next
            case tag1
            step( solve( Tag( ~k, x.1 ) ▶₁ #vr.2 ) )
              case SetupLearning
              by sorry
            next
              case tag1
              by sorry
            next
              case tag2
              step( solve( Tag( ~k, x.2 ) ▶₃ #vr.3 ) )
                case SetupLearning
                by sorry
              next
                case tag1
                step( solve( Tag( ~k, x.2 ) ▶₁ #vr.4 ) )
                  case SetupLearning
                  step( solve( !KU( h(z) ) @ #vk.2 ) )
                    case c_h
                    by sorry
                  next
                    case tag1
                    step( solve( Tag( ~k.1, x.3 ) ▶₁ #vr.6 ) )
                      case SetupLearning
                      step( solve( !KU( r1.2 ) @ #vk.9 ) )
                        case c_fst
                        by sorry
                      next
                        case c_h
                        by sorry
                      next
                        case c_pair
                        by sorry
                      next
                        case c_snd
                        by sorry
                      next
                        case c_union
                        by sorry
                      next
                        case c_xor
                        by sorry
                      next
                        case c_zero
                        by sorry
                      next
                        case coerce
                        by sorry
                      next
                        case fresh
                        step( solve( !KU( r1 ) @ #vk.4 ) )
                          case c_fst
                          by sorry
                        next
                          case c_h
                          by sorry
                        next
                          case c_pair
                          by sorry
                        next
                          case c_snd
                          by sorry
                        next
                          case c_union
                          by sorry
                        next
                          case c_xor
                          by sorry
                        next
                          case c_zero
                          by sorry
                        next
                          case coerce
                          by sorry
                        next
                          case fresh
                          step( solve( !KU( ~x.3 ) @ #vk.3 ) )
                            case fresh
                            step( solve( !KU( ~x ) @ #vk.4 ) )
                              case fresh
                              step( solve( splitEqs(5) ) )
                                case split
                                step( solve( splitEqs(4) ) )
                                  case split
                                  step( solve( !KU( newKey.1 ) @ #vk.8 ) )
                                    case c_fst
                                    by sorry
                                  next
                                    case c_h
                                    by sorry
                                  next
                                    case c_pair
                                    by sorry
                                  next
                                    case c_snd
                                    by sorry
                                  next
                                    case c_union
                                    by sorry
                                  next
                                    case c_xor
                                    by sorry
                                  next
                                    case c_zero
                                    by sorry
                                  next
                                    case coerce
                                    by sorry
                                  next
                                    case fresh
                                    step( solve( !KU( ~x.4 ) @ #vk.5 ) )
                                      case fresh
                                      step( solve( !KU( newKey ) @ #vk.6 ) )
                                        case c_fst
                                        by sorry
                                      next
                                        case c_h
                                        by sorry
                                      next
                                        case c_pair
                                        by sorry
                                      next
                                        case c_snd
                                        by sorry
                                      next
                                        case c_union
                                        by sorry
                                      next
                                        case c_xor
                                        by sorry
                                      next
                                        case coerce
                                        by sorry
                                      next
                                        case fresh
                                        step( solve( !KU( ~x.2 ) @ #vk.6 ) )
                                          case fresh
                                          step( solve( splitEqs(3) ) )
                                            case split
                                            step( solve( splitEqs(0) ) )
                                              case split_case_1
                                              step( solve( !KU( h((~k⊕~k1)) ) @ #vk.5 ) )
                                                case tag1
                                                step( solve( !KU( h((~k⊕~k1⊕~x.1)) ) @ #vk.7 ) )
                                                  case tag1
                                                  step( solve( Tag( ~k.1, x.2 ) ▶₁ #vr.6 ) )
                                                    case tag2
                                                    step( solve( Tag( ~k.2, x.3 ) ▶₁ #vr.7 ) )
                                                      case SetupLearning
                                                      step( solve( Tag( ~k.1, x.2 ) ▶₃ #vr.7 ) )
                                                        case tag1
                                                        step( solve( Tag( ~k.1, x.2 ) ▶₁ #vr.8 ) )
                                                          case SetupLearning
                                                          by ATTACK // trace found
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case split_case_2
                                              by sorry
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        by sorry
                                      qed
                                    qed
                                  next
                                    case pub
                                    by sorry
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          by sorry
                        qed
                      next
                        case pub
                        by sorry
                      qed
                    next
                      case tag1
                      by sorry
                    next
                      case tag2
                      by sorry
                    qed
                  qed
                next
                  case tag1
                  by sorry
                next
                  case tag2
                  by sorry
                qed
              next
                case tag2
                by sorry
              qed
            qed
          next
            case tag2
            by sorry
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    by sorry
  qed
next
  case Rule_Send
  by sorry
next
  case Rule_SetupLearning
  by sorry
next
  case Rule_tag1
  by sorry
next
  case Rule_tag2
  by sorry
qed

end