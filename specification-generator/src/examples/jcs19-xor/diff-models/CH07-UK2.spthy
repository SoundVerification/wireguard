theory CH07_UK2 begin

builtins: xor, hashing, multiset
functions: rot/2, lh/1, rh/1

rule setup:
   let data1 = <~k1,~id1>
       data2 = <~k2,~id2>
       datab = diff(data1, data2)
       dataReader = data1 + data2
   in
   [ Fr( ~k1 ), Fr( ~id1 )
   , Fr( ~k2 ), Fr( ~id2 )
   ]
 --[ OnlyOnce('setup') ]->
   [  Transcript(data1, 'learning')    
   , Reader(dataReader, 'guessing')
   , TagRun(datab, 'guessing')
   ]

rule transcript:
   let hash = h((~r1⊕~r2⊕~k))
         m1 = <~r2,lh(rot(~id,hash) XOR hash)>
         m2 = rh(rot(~id,hash) XOR hash)
  in
  [ Transcript(<~k,~id>,phase)
  , Fr(~r1)
  , Fr(~r2) 
  ]
--[ Phase(phase) ]->
  [ Out(~r1)
  , Out(<~r2,m1>)
  , Out(m2)
  ]

rule initiatereader:
  [ Reader(d1 + d2, phase), Fr(~r0)]
--[ Phase(phase)]->
  [ ReaderRun(d1, phase)]

rule reader1:
   [ Fr( ~r1 ) ]
 --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 )
   , Initiated( ~r1 ) 
   ]

rule tag1:
   let hash = h((r1⊕~r2⊕~k)) in 
   [ In( r1 )
   , Fr( ~r2 )
   , TagRun( <~k, ~id>, phase )
   ]
 --[ Response( ~k, 'Tag' )
   , Challenge(~r2, 'Tag') 
   , Phase(phase)
   ]->
   [ Out( <~r2,lh(rot(~id,hash) XOR hash)>)
   , TagState(~k, ~id, r1, ~r2, hash, phase)
   ]

rule reader2:
   [ Initiated( ~r1 )
   , ReaderRun( <~k, ~id>, phase)
   , In( <r2, lh(rot(~id,hash) XOR hash)> ) 
   ]
 --[ Alive( ~k, 'Tag' )
   , Response(~k, 'Reader') 
   , Eq( h((~r1⊕r2⊕~k)), hash )
   , Phase(phase)
   ]->
   [ Out( rh(rot(~id,hash) XOR hash) ) ]

rule tag2:
   [ In( rh(rot(~id,hash) XOR hash) )
   , TagState(~k, ~id, r1, ~r2, hash, phase)
   ]
 --[ Alive( ~k, 'Reader' ), Phase(phase) ]->
   [ ]

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"

restriction unique:
  "∀ x #i #j. ((OnlyOnce(x) @ #i) ∧ (OnlyOnce(x) @ #j)) ⇒ (#i = #j)"

// FINDS PROOF AUTOMATICALLY [left+right]
lemma executable:
  exists-trace "∃ x #j. ((Response( x, 'Tag' ) @ #j))"

// Observational Equivalence: PROVEN automatically, <=10 minutes

end