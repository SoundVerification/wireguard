theory MPAuth_EA
begin

/* 
============
INTRODUCTION
============
* Protocol:	MP-Auth
* Modeler: 	Lara Schmid
* Date: 	March 2020
* Source:	[1] "Advancing the Formal Foundations for Voting Protocols", Lara Schmid, PhD Thesis, ETH ZÃ¼rich.

=========
RESULTS: 
=========

// for -D=infallible
- lemma functional_withAgreement (exists-trace): verified (10 steps)
- lemma functional (exists-trace): verified (10 steps)
- lemma entity_authentication (all-traces): verified (582 steps)
- lemma device_authentication (all-traces): verified (580 steps)
- lemma weak_data_agreement_S_claims_wrt_D (all-traces): verified (576 steps)
- lemma weak_data_agreement_D_claims_wrt_known_S (all-traces): verified (125 steps)

// for -D=untrained
- lemma functional_withAgreement (exists-trace): verified (12 steps)
- lemma functional (exists-trace): verified (12 steps)
- lemma entity_authentication (all-traces): falsified - found trace (13 steps)
- lemma device_authentication (all-traces): falsified - found trace (13 steps)
- lemma weak_data_agreement_S_claims_wrt_D (all-traces): falsified - found trace (13 steps)
- lemma weak_data_agreement_D_claims_wrt_known_S (all-traces): verified (122 steps)


// for -D=ruleBased with Rule4($H,'noTellEx','pw',$D)
  functional_withAgreement (exists-trace): verified (12 steps)
  functional (exists-trace): verified (12 steps)
  entity_authentication (all-traces): verified (576 steps)
  device_authentication (all-traces): verified (571 steps)
  weak_data_agreement_S_claims_wrt_D (all-traces): verified (567 steps)
  weak_data_agreement_D_claims_wrt_known_S (all-traces): verified (122 steps)


*/

/* built-ins */
builtins: signing, asymmetric-encryption, hashing, symmetric-encryption
functions: f/1, pw/1,r/1  // f/1 used for function in protocol, pw/1 and r/1 used to give password and random nonces a type.


/* only allow human agent rules (corresponding to infallible human) */
#ifdef infallible
axiom only_infallible_humans:  
  	"not (Ex #k. H('Human') @k)" 
#endif

/* only allow for untrained human rules (corresponding to fallible human) */
#ifdef ruleBased
axiom only_fallible_humansRB:  
  	"not (Ex H x #k. H_role(H,x) @k)" 
#endif
#ifdef untrained
axiom only_fallible_humansU:  
  	"not (Ex H x #k. H_role(H,x) @k)"
#endif


/* untrained human rules*/ 
// insecure channels
rule H_fresh:
        [ Fr(~x) ]
	--[ Fresh($H,$x.1,~x), !HK($H,$x.1,~x),
		H($H) ]->
	[ !HK($H,$x.1,~x)]

rule H_send: 
	[ !HK($H,$x.1,x.2) ]
	--[ Send($H,$x.1,x.2),
		H($H) ]->
	[ Out(<$x.1,x.2>)]

rule H_receive: 
	[ In( <$x.1,x.2>) ]
	--[ Receive($H,$x.1,x.2), !HK($H,$x.1, x.2),
		H($H) ]->
	[ !HK($H,$x.1, x.2) ]

// secure channel
rule H_send_S:
  	[ !HK($H,$x.1,x.2) ]
	--[ Send($H,$x.1,x.2),
		H($H), To($A)]->
	[ Out_S($H,$A,$x.1,x.2) ]

rule H_receive_S:
	[ In_S( $A,$H, $x.1, x.2 ) ]
	--[ Receive($H,$x.1,x.2), !HK($H,$x.1,x.2), 
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2) ]

rule H_send_S2: 
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2) ]
	--[ Send($H,$x.1,x.2), 
  	    Send($H,$y.1,y.2), 
	    H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1>,<x.2,y.2>) ]


rule H_send_S3:
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2) ]
	--[ Send($H,$x.1,x.2), 
	    Send($H,$y.1,y.2),
	    Send($H,$z.1,z.2), 
	    H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1,$z.1>,<x.2,y.2,z.2>) ]

rule H_send_S4:
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$w.1,w.2) ]
	--[     Send($H,$x.1,x.2), 
		Send($H,$y.1,y.2),
		Send($H,$z.1,z.2), 
		Send($H,$w.1,w.2), 
		H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1,$z.1,$w.1>,<x.2,y.2,z.2,w.2>) ]


rule H_receive_S2:
	[ In_S( $A,$H, <$x.1,$y.1>, <x.2,y.2> ) ]
	--[ Receive($H,$x.1,x.2), 
		Receive($H,$y.1,y.2), !HK($H,$x.1,x.2),!HK($H,$y.1,y.2),
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2),!HK($H,$y.1,y.2) ]


rule H_receive_S4:
	[ In_S( $A,$H, <$x.1,$y.1,$z.1,$v.1>,<x.2,y.2,z.2,v.2> ) ]
	--[     Receive($H,$x.1,x.2), 
		Receive($H,$y.1,y.2), 
		Receive($H,$z.1,z.2), 
		Receive($H,$v.1,v.2), !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$v.1,v.2),
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$v.1,v.2) ]



/* Channel rules */
rule ChanOut_S:
	[Out_S($A,$B,xn,x)]
	--[ChanOut_S($A,$B,xn,x)]->
	[!Sec($A,$B,xn,x)]

rule ChanIn_S:
	[!Sec($A,$B,xn,x)]
	--[ChanIn_S($A,$B,xn,x)]->
	[In_S($A,$B,xn,x)]

rule ChanOut_C:
	[Out_C($A,$B,xn,x)]
	--[ChanOut_C($A,$B,xn,x)]->
	[!Conf($B,xn,x)]

rule ChanIn_C:
	[!Conf($B,xn,x), In($A)]
	--[ChanIn_C($A,$B,xn,x)]->
	[In_C($A,$B,xn,x)]

rule ChanIn_CAdv:
	[In(<$A,$B,xn,x>)]
	--[]->
	[In_C($A,$B,xn,x)]

rule ChanOut_A:
	[Out_A($A,$B,xn,x)]
	--[ChanOut_A($A,$B,xn,x)]->
	[!Auth($A,xn,x), Out(<$A,$B,xn,x>)]
rule ChanIn_A:
	[!Auth($A,xn,x), In($B)]
	--[ChanIn_A($A,$B,xn,x)]->
	[In_A($A,$B,xn,x)]


/* setup */
rule passworddistribution:
	[Fr(~pw)]
	--[PasswordHS($X,$Y,~pw)]->
	[!Password($X,$Y,~pw)]
rule publickeyinfrastructure:
	[Fr(~skX)]
	--[LontermKey($X,~skX)]->
	[!Ltk($X, ~skX),!Pk($X, pk(~skX)), Out(pk(~skX)) ]

rule Setup: 
  	[ !Password($H,$S,~pw), !Ltk($S,~skS) ] 
  	--[ Setup($H), Roles($H,$D,$P,$S), Device($H,$D), User($idH,$H)
		, InitK($H,'D',$D), InitK($H,'P',$P), InitK($H,'S',$S), InitK($H,'pw',pw(~pw)), InitK($H,'idH',$idH), InitK($H,'idS',$idS)
		, Rule4($H,'noTellEx','pw',$D)
				
	]-> 
  	[ AgSt_D0($D,'D_0',< $H, $idH, pk(~skS) >)
	, AgSt_S0($S,'S_0',< ~skS, $H, $idS, pw(~pw), $idH >) 
	, !ID_S($S,$idS)
	
	, !HK($H,'D',$D), !HK($H,'P',$P), !HK($H,'S',$S), !HK($H,'pw',pw(~pw)), !HK($H,'idH',$idH), !HK($H,'idS',$idS)	
	, AgSt_H0($H,'H_0',< $D, $P, $S, pw(~pw), $idH, $idS >) 
  	]

/* agent rules */
rule D_4: 
	[ AgSt_D0($D,'D_0',< $H, $idH, pk(~skS) >), In(<$idS,r(~rS)>)
	, !ID_S($S,$idS), !Ltk($S,~skS) // modeling that device D knows S belongs to idS and that it has right corresponding pk(skS), because S is already registered 
	 ]
 	--[ D($D) ]->
	[ AgSt_D5($D,'D_5',< $H, $idH, pk(~skS), $idS, $S, r(~rS) >), Out_S($D,$H,'idS',$idS) ]
rule D_6: 
	[ AgSt_D5($D,'D_5',< $H, $idH, pk(~skS), $idS, $S, r(~rS) >), In_S($H,$D,<'pw','idH' >,<pw(~pw),$idH >), Fr(~rD) ]
 	--[DfromHx($D,$H,'pw',pw(~pw)), DfromHx($D,$H,'idH',$idH), RunningD($D,$S,<$H,f(<r(~rS),r(~rD)>)>), D($D) ]->
	[ AgSt_D7($D,'D_7',< $H, $idH, pk(~skS), $idS, $S, r(~rS), r(~rD), pw(~pw) >),
			Out( < aenc(r(~rD),pk(~skS)) , senc( <f(r(~rS)), $idH, pw(~pw) >,f(<r(~rS),r(~rD)>)) >) ]
rule D_10:
	[ AgSt_D7($D,'D_7',< $H, $idH, pk(~skS), $idS, $S, r(~rS), r(~rD), pw(~pw) >),
		In(senc( f(r(~rD)),f(<r(~rS),r(~rD)>) ))]
	--[Dfin(), CommitD($D,$S,<$H,f(<r(~rS),r(~rD)>)>), D($D)]->
	[ Out_S($D,$H,'success','success')] 		

rule S_2:
	[ AgSt_S0($S,'S_0',< ~skS,$H, $idS, pw(~pw), $idH >), In('start'), Fr(~rS) ]
	--[ Sstart($S) ]->
	[ AgSt_S3($S,'S_3',< ~skS,$H, $idS, pw(~pw), $idH, r(~rS) >), Out(<$idS,r(~rS)>) ]
rule S_8:
	[ AgSt_S3($S,'S_3',< ~skS,$H, $idS, pw(~pw), $idH, r(~rS) >),
		In( < aenc(r(~rD),pk(~skS)) , senc( <f(r(~rS)), $idH, pw(~pw) >,f(<r(~rS),r(~rD)>)) >) ]
	--[ Commit($S,$H,pw(~pw)), CommitS($S,$D,<$H,f(<r(~rS),r(~rD)>)>), RunningS($S,$D,<$H,f(<r(~rS),r(~rD)>)>), CommitCA($S,$H) ]-> 
	[ Out( senc( f(r(~rD)),f(<r(~rS),r(~rD)>) )) ]

/* human agent rules */
rule H_1:
	[ AgSt_H0($H,'H_0',< $D, $P, $S, pw(~pw), $idH, $idS >)  ]
	--[H_role($H,'1'), Send($H,'S',$S) ]->
	[ AgSt_H1($H,'H_1',< $D, $P, $S, pw(~pw), $idH, $idS >), Out(<'S',$S>) ]
rule H_5:           
	[ AgSt_H1($H,'H_1',< $D, $P, $S, pw(~pw), $idH, $idS >), In_S($D,$H,'idS',$idS) ]
	--[H_role($H,'5'), Receive($H,'idS',$idS), Send($H,'pw',pw(~pw)), Send($H,'idH',$idH), To($D) ]->
	[ AgSt_H6($H,'H_6',< $D, $P, $S, pw(~pw), $idH, $idS >), Out_S($H,$D,<'pw','idH' >,<pw(~pw),$idH >)]
rule H_11:
	[ AgSt_H6($H,'H_6',< $D, $P, $S, pw(~pw), $idH, $idS >), In_S($D,$H,'success','success')]
	--[Hfin(), Receive($H,'success','success')]->
	[] 

#ifdef ruleBased
/* Rule-Based Human Rules */

axiom noTell:
	"All l m #s #i. Rule3('Human','noTell',l) @s & Send('Human',l,m) @i ==> F "

axiom noTellEx:
	"All P l m #i #s. Rule4('Human','noTellEx',l,P)@s & Send('Human',l,m) @i ==> To(P) @i"

axiom noGet:	
	"( All l x #s #i. Rule3('Human','noGet',l) @s & Receive('Human',l,x) @i ==> F)"

axiom noGetEx:	
	"( All l x P #s #i. Rule4('Human','noGetEx',l,P) @s & Receive('Human',l,x) @i ==> From(P) @i)"

axiom ICompare:
	" All l y #s #i. Rule3('Human','ICompare',l)@s &  Receive('Human',l,y) @i ==> Ex #j. InitK('Human',l,y) @j"


#endif

/* axioms assumptions */

/* Every Human starts in the initial state */
axiom setup_for_IK:
	"All H #i. H(H) @i ==> Ex #j. Setup(H) @j & j<i"

/* No secure channels between humans exist. Humans
   must communicate over incecure channels.         
   This assumption is necessary to remove unsolved chains
   in the protocol model. It is not a strong restriction
   because the protocols do not rely on human to human 
   for security. */
axiom not_Chan_S_human_to_human:
	"All A B mn m #i #j #k.
		ChanOut_S(A,B,mn,m) @i & H(A) @j & H(B) @k ==> F"

/* Assumption: Two distinct roles are not executed by the same agent */
axiom notSameRole:
	"All H1 H2 D1 D2 P1 P2 S1 S2 #i #j. Roles(H1,D1,P1,S1) @i & Roles(H2,D2,P2,S2) @j ==>
		  not H1 = D1
		& not H1 = D2
		& not H1 = P1
		& not H1 = P2
		& not H1 = S1
		& not H1 = S2
		& not D1 = P1
		& not D1 = P2
		& not D1 = S1
		& not D1 = S2
		& not P1 = S1
		& not P1 = S2
	"
/* Assumption: Two humans do not share a single device */
axiom Device:
	"All H1 H2 D #i #j. Device(H1,D) @i & Device (H2,D) @j ==> H1=H2 "




/*
The following axiom states that if H enters something on the device D, then D receives it immediately. 
*/
axiom DeviceImmediateProcessing:
	"All D H xn x #i #k.
		Send(H,xn,x) @i & To(D) @i & DfromHx(D,H,xn,x) @k ==>
		  not(Ex #j. D(D) @j & i<j & j<k)"
/* 
The follwowing axiom states that a Id of a human uniquely determines human
*/
axiom uniqueUserID: // every human H has unique user ID idH
	"(All idH H1 H2 #i #j. User(idH,H1) @i & User(idH,H2) @j ==> H1=H2)"




#ifdef untrained
/* Additional assumptions only used to find attack trace (not for proofs) */

axiom OnlyOneDevice: // one Human only has one device
	"All H D2 D1 #i #j. Device(H,D1) @i & Device(H,D2) @j ==> D1=D2 "
#endif



/* lemmas */

lemma functional_withAgreement: exists-trace
	"(All H1 H2 #i #j. Setup(H1) @i & Setup(H2) @j ==> #i = #j) 
	& (Ex D #j S k m #k
		. 
		CommitD(D,S,<'Human',k>) @j
		& Commit(S,'Human',m) @k &  RunningS(S,D,<'Human',k>) @k 
		)"

/* Functionality Lemma */

lemma functional: exists-trace
	"(All H1 H2 #i #j. Setup(H1) @i & Setup(H2) @j ==> #i = #j) 
	& (Ex #k #n S m 
		.
		Dfin() @k
		& Commit(S,'Human',m) @n
		
		)"

/* Entity and Device Authentication */

lemma entity_authentication: 
	"All S m #k. Commit(S,'Human',m) @k ==> 
		(Ex #i #j. Sstart(S)@i & H('Human') @j & i<j &j<k) 		//in case when untrained human rules are used
		|(Ex x #i #j. Sstart(S)@i & H_role('Human',x) @j& i<j &j<k) 	//in case when (infallible) human agent rules are used
		
	"

lemma device_authentication: 
	"All S #k. CommitCA(S,'Human') @k ==> 
		(Ex D #i #j #s. Sstart(S)@i & D(D) @j & i<j &j<k & Device('Human',D) @s )		
	"





/* Weak Data Agreement between D and S, with D knowing who S is */

lemma weak_data_agreement_S_claims_wrt_D:
	"All S D k #i. CommitS(S,D,<'Human',k>) @i ==> Ex D1 S1 #j. RunningD(D1,S1,<'Human',k>) @j" 

lemma weak_data_agreement_D_claims_wrt_known_S:
	"All D S k #i. CommitD(D,S,<'Human',k>) @i ==> Ex D1 #j. RunningS(S,D1,<'Human',k>) @j" 
	




end

 
