theory OTPoverSMS_MA 
begin

/* 
============
INTRODUCTION
============
* Protocol:	OTP over SMS
* Modeler: 	Lara Schmid
* Date: 	March 2020
* Source:	[1] "Advancing the Formal Foundations for Voting Protocols", Lara Schmid, PhD Thesis, ETH ZÃ¼rich.

=========
RESULTS: 
=========

// for -D=infallible
- lemma functional (exists-trace): verified (7 steps)
- lemma message_authentication (all-traces): verified (6 steps)

// for -D=untrained
- lemma functional (exists-trace): verified (7 steps)
- lemma message_authentication (all-traces): falsified - found trace (5 steps)

// for -D=ruleBased with  Rule3($H,'ICompare','m') 
  functional (exists-trace): verified (8 steps)
  message_authentication (all-traces): verified (7 steps)


*/


/* built-ins */
builtins: signing, asymmetric-encryption, hashing
functions: m/1 // used to give message a type.


/* only allow human agent rules (corresponding to infallible human) */
#ifdef infallible
axiom only_infallible_humans:  
  	"not (Ex #k. H('Human') @k)" 
#endif

/* only allow for untrained human rules (corresponding to fallible human) */
#ifdef ruleBased
axiom only_fallible_humansRB:  
  	"not (Ex H x #k. H_role(H,x) @k)" 
#endif
#ifdef untrained
axiom only_fallible_humansU:  
  	"not (Ex H x #k. H_role(H,x) @k)"
#endif


/* untrained human rules*/ 
// insecure channels
rule H_fresh:
        [ Fr(~x) ]
	--[ Fresh($H,$x.1,~x), !HK($H,$x.1,~x),
		H($H) ]->
	[ !HK($H,$x.1,~x)]

rule H_send: 
	[ !HK($H,$x.1,x.2) ]
	--[ Send($H,$x.1,x.2),
		H($H) ]->
	[ Out(<$x.1,x.2>)]

rule H_receive: 
	[ In( <$x.1,x.2>) ]
	--[ Receive($H,$x.1,x.2), !HK($H,$x.1, x.2),
		H($H) ]->
	[ !HK($H,$x.1, x.2) ]

// secure channel
rule H_send_S:
  	[ !HK($H,$x.1,x.2) ]
	--[ Send($H,$x.1,x.2),
		H($H), To($A)]->
	[ Out_S($H,$A,$x.1,x.2) ]

rule H_receive_S:
	[ In_S( $A,$H, $x.1, x.2 ) ]
	--[ Receive($H,$x.1,x.2), !HK($H,$x.1,x.2), 
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2) ]

rule H_send_S2: 
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2) ]
	--[ Send($H,$x.1,x.2), 
  	    Send($H,$y.1,y.2), 
	    H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1>,<x.2,y.2>) ]


rule H_send_S3:
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2) ]
	--[ Send($H,$x.1,x.2), 
	    Send($H,$y.1,y.2),
	    Send($H,$z.1,z.2), 
	    H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1,$z.1>,<x.2,y.2,z.2>) ]

rule H_send_S4:
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$w.1,w.2) ]
	--[     Send($H,$x.1,x.2), 
		Send($H,$y.1,y.2),
		Send($H,$z.1,z.2), 
		Send($H,$w.1,w.2), 
		H($H), To($A)]->
	[ Out_S($H,$A,<$x.1,$y.1,$z.1,$w.1>,<x.2,y.2,z.2,w.2>) ]


rule H_receive_S2:
	[ In_S( $A,$H, <$x.1,$y.1>, <x.2,y.2> ) ]
	--[ Receive($H,$x.1,x.2), 
		Receive($H,$y.1,y.2), !HK($H,$x.1,x.2),!HK($H,$y.1,y.2),
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2),!HK($H,$y.1,y.2) ]


rule H_receive_S4:
	[ In_S( $A,$H, <$x.1,$y.1,$z.1,$v.1>,<x.2,y.2,z.2,v.2> ) ]
	--[     Receive($H,$x.1,x.2), 
		Receive($H,$y.1,y.2), 
		Receive($H,$z.1,z.2), 
		Receive($H,$v.1,v.2), !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$v.1,v.2),
		H($H), From($A)]->
	[ !HK($H,$x.1,x.2), !HK($H,$y.1,y.2), !HK($H,$z.1,z.2), !HK($H,$v.1,v.2) ]



/* Channel rules */
rule ChanOut_S:
	[Out_S($A,$B,xn,x)]
	--[ChanOut_S($A,$B,xn,x)]->
	[!Sec($A,$B,xn,x)]

rule ChanIn_S:
	[!Sec($A,$B,xn,x)]
	--[ChanIn_S($A,$B,xn,x)]->
	[In_S($A,$B,xn,x)]

rule ChanOut_C:
	[Out_C($A,$B,xn,x)]
	--[ChanOut_C($A,$B,xn,x)]->
	[!Conf($B,xn,x)]

rule ChanIn_C:
	[!Conf($B,xn,x), In($A)]
	--[ChanIn_C($A,$B,xn,x)]->
	[In_C($A,$B,xn,x)]

rule ChanIn_CAdv:
	[In(<$A,$B,xn,x>)]
	--[]->
	[In_C($A,$B,xn,x)]

rule ChanOut_A:
	[Out_A($A,$B,xn,x)]
	--[ChanOut_A($A,$B,xn,x)]->
	[!Auth($A,xn,x), Out(<$A,$B,xn,x>)]
rule ChanIn_A:
	[!Auth($A,xn,x), In($B)]
	--[ChanIn_A($A,$B,xn,x)]->
	[In_A($A,$B,xn,x)]


/* setup */
rule Setup: 
  	[ Fr(~m) ] 
  	--[ Setup($H), Roles($H,$D,$P,$S), Device($H,$D)
		, InitK($H,'D',$D), InitK($H,'P',$P), InitK($H,'S',$S), InitK($H,'m',m(~m)), InitK($H,'idH',$idH)	
		, Rule3($H,'ICompare','m') 
	]-> 
  	[ AgSt_D0($D,'D_0',< $H >)
    	, AgSt_S0($S,'S_0',< $H, $D, $idH >) 
		
	, !HK($H,'D',$D), !HK($H,'P',$P), !HK($H,'S',$S), !HK($H,'m',m(~m)), !HK($H,'idH',$idH)	
	, AgSt_H0($H,'H_0',< $D, $P, $S, m(~m), $idH >) 
  	]

/* agent rules */
rule D_4: 
	[ AgSt_D0($D,'D_0',< $H >), In_C($S,$D,'l',<~otpw,m(~m)>) ]
 	--[ Dfin() ]->
	[ Out_S($D,$H,<'otpw','m'>,<~otpw,m(~m)>) ]

rule S_2:
	[ AgSt_S0($S,'S_0',< $H, $D, $idH >), In(<$idH,m(~m)>), Fr(~otpw) ]
	--[ ]->
	[ AgSt_S3($S,'S_3',< $H, $D, $idH, ~otpw, m(~m) >), Out_C($S,$D,'l',<~otpw,m(~m)>) ]
rule S_6:
	[ AgSt_S3($S,'S_3',< $H, $D, $idH, ~otpw, m(~m) >), In(<m(~m),~otpw>) ]
	--[ Commit($S,$H,m(~m)) ]->
	[ ]

/* human agent rules */
rule H_1:
	[ AgSt_H0($H,'H_0',< $D, $P, $S, m(~m), $idH >)  ]
	--[H_role($H,'1'), Send($H,'S',$S), Send($H,'idH',$idH) , Send($H,'m',m(~m)) ]->
	[ AgSt_H1($H,'H_1',< $D, $P, $S, m(~m), $idH >), Out(< <'S','idH','m'>,<$S,$idH,m(~m)> >) ]
rule H_4:           
	[ AgSt_H1($H,'H_1',< $D, $P, $S, m(~m), $idH >), In_S($D,$H,<'otpw','m'>,<~otpw,m(~m)>) ]
	--[H_role($H,'4'), Receive($H,'otpw',~otpw), Receive($H,'m',m(~m)), Send($H,'otpw',~otpw) ]->
	[ Out(<'otpw',~otpw>)]



#ifdef ruleBased
/* Rule-Based Human Rules */

axiom noTell:
	"All l m #s #i. Rule3('Human','noTell',l) @s & Send('Human',l,m) @i ==> F "

axiom noTellEx:
	"All P l m #i #s. Rule4('Human','noTellEx',l,P)@s & Send('Human',l,m) @i ==> To(P) @i"

axiom noGet:	
	"( All l x #s #i. Rule3('Human','noGet',l) @s & Receive('Human',l,x) @i ==> F)"

axiom noGetEx:	
	"( All l x P #s #i. Rule4('Human','noGetEx',l,P) @s & Receive('Human',l,x) @i ==> From(P) @i)"

axiom ICompare:
	" All l y #s #i. Rule3('Human','ICompare',l)@s &  Receive('Human',l,y) @i ==> Ex #j. InitK('Human',l,y) @j"


#endif

/* axioms assumptions */

/* Every Human starts in the initial state */
axiom setup_for_IK:
	"All H #i. H(H) @i ==> Ex #j. Setup(H) @j & j<i"

/* No secure channels between humans exist. Humans
   must communicate over incecure channels.         
   This assumption is necessary to remove unsolved chains
   in the protocol model. It is not a strong restriction
   because the protocols do not rely on human to human 
   for security. */
axiom not_Chan_S_human_to_human:
	"All A B mn m #i #j #k.
		ChanOut_S(A,B,mn,m) @i & H(A) @j & H(B) @k ==> F"

/* Assumption: Two distinct roles are not executed by the same agent */
axiom notSameRole:
	"All H1 H2 D1 D2 P1 P2 S1 S2 #i #j. Roles(H1,D1,P1,S1) @i & Roles(H2,D2,P2,S2) @j ==>
		  not H1 = D1
		& not H1 = D2
		& not H1 = P1
		& not H1 = P2
		& not H1 = S1
		& not H1 = S2
		& not D1 = P1
		& not D1 = P2
		& not D1 = S1
		& not D1 = S2
		& not P1 = S1
		& not P1 = S2
	"
/* Assumption: Two humans do not share a single device */
axiom Device:
	"All H1 H2 D #i #j. Device(H1,D) @i & Device (H2,D) @j ==> H1=H2 "





/* lemmas */

/* Functionality Lemma */

lemma functional: exists-trace
	"(All H1 H2 #i #j. Setup(H1) @i & Setup(H2) @j ==> #i = #j) 
	& (Ex #k #n S m 
		.
		Dfin() @k
		& Commit(S,'Human',m) @n
		
		)"

/* Message Authentication */

lemma message_authentication:
	"All S m #k. Commit(S,'Human',m) @k ==> 
		(Ex mn #i. Send('Human',mn,m) @i & i < k)" 







end

 
