theory alethea_sel_ShHh
begin


/* 
============
INTRODUCTION
============
* Protocol:	Alethea's selection phase
* Modeler: 	Lara Schmid
* Date: 	March 2020
* Source:	[1] "Advancing the Formal Foundations for Voting Protocols", Lara Schmid, PhD Thesis, ETH ZÃ¼rich.

=========
RESULTS: 
=========

- lemma functional: 		verified w/o oracle
- lemma functional2:		verified w/o oracle
- lemma functional3: 		verified w/o oracle

- lemma indivVerif_ps: 		verified w/o oracle
- lemma indivVerif_sel: 	verified w/o oracle 
- lemma univVerif_sel: 		verified w/o oracle


*/
/*============
SPECIFICATION:
============== */

/*=====================
Functions and equations 
======================= */
builtins: signing, asymmetric-encryption, hashing, symmetric-encryption, multiset


/* ==========
Channel rules
============= */
rule ChanOut_S: [Out_S($A,$B,x)]--[ChanOut_S($A,$B,x)]->[!Sec($A,$B,x)]
rule ChanIn_S: [!Sec($A,$B,x)]--[ChanIn_S($A,$B,x)]->[In_S($A,$B,x)]
/*
rule ChanOut_C:	[Out_C($A,$B,x)]--[ChanOut_C($A,$B,x)]->[!Conf($B,x)]
rule ChanIn_C:	[!Conf($B,x), In($A)]--[ChanIn_C($A,$B,x)]->[In_C($A,$B,x)]
rule ChanIn_CAdv: [In(<$A,$B,x>)]--[]->[In_C($A,$B,x)]
*/
rule ChanOut_A: [Out_A($A,x)]--[ChanOut_A($A,x)]->[!Auth($A,x), Out(<$A,x>)]
rule ChanIn_A:	[!Auth($A,x)]--[ChanIn_A($A,x)]->[In_A($A,x)]


/* =====
Protocol
======== */

rule publickeyinfrastructure:
   [ Fr(~skX) ]--[ LongtermKey($X,~skX) ]-> [ !Ltk($X,~skX), !Pk($X,pk(~skX)), Out(pk(~skX)) ]


rule Setup: 
  	[ !Ltk('S',~skS), !Ltk('D1',~eskD1), !Ltk('D2',~eskD2) ] 
  	--[ 	Setup(), 
		Voter('H1'), 
		Voter('H2'),
		Device('H1','D1'),
		Device('H2','D2')

	]-> 
	[ AgSt_D0('D1',<'H1','S',~eskD1,pk(~skS)> )
	, AgSt_D0('D2',<'H2','S',~eskD2,pk(~skS)> )
	
	, AgSt_S0('S', <'E',~skS, 'H1','D1',pk(~eskD1), 'H2','D2',pk(~eskD2) >) 

	, AgSt_A0('A',<'S','BB','E'>) 
	, AgSt_BB0('BB',<'S'>) 
	, Env('E')
	
	
	, AgSt_H0('H1',<'D1','BB'>)
	, AgSt_H0('H2',<'D2','BB'>)

	]
	// leave out explicit send of "ev" from S to BB, assume that everyone is measuring the environment at the same moment (which would be the moment specified by "ev")

rule S_1a:
	[ AgSt_S0($S,<$E,~skS, $H1,$D1,epkD1, $H2,$D2,epkD2 >), Fr(~x1), Fr(~x2) ]
	--[
		Pseudonym($H1,pk(h($H1,~x1)),$H2,pk(h($H2,~x2)) )
	]->
	[
	 AgSt_S1($S,<$E,~skS, $H1,$D1,epkD1, $H2,$D2,epkD2, ~x1, ~x2 >)
	 , Out_A($S, aenc(~x1,epkD1) )	
	 , Out_A($S, aenc(~x2,epkD2) )		
	 , Pi(pk(h($H1,~x1)) + pk(h($H2,~x2)) ) //generate random permutation of the pseudonyms
	]

rule S_1b:
	[ AgSt_S1($S,<$E,~skS, $H1,$D1,epkD1, $H2,$D2,epkD2, ~x1, ~x2 >),
	  Pi(spkDa + spkDb) ] // pseudonyms are sent to BB in a random order
	--[  ]->
	[ Out_A($S,<'spkDs',spkDa,spkDb>), //correponds to [pkD] in thesis
	  AgSt_S1b($S,<$E,~skS, $H1,$D1,epkD1, $H2,$D2,epkD2, ~x1, ~x2, spkDa,spkDb >) 
	]

rule BB_1:
	[ AgSt_BB0($BB,<$S>) 
	, In_A($S,<'spkDs',spkDa,spkDb >)
	]
	--[ 	BB_spkDs($BB,<'spkDs',spkDa,spkDb >), //corresponds to signal BBps in thesis
		Running_DBB($BB,spkDa), 
		Running_DBB($BB,spkDb)
	]->
	[ AgSt_BB1($BB,<$S,'spkDs',spkDa,spkDb > )
	, Out_A($BB,<'spkDs',spkDa,spkDb >)

	]

rule A_1:
	[ AgSt_A0($A,<$S,$BB,$E>)
	, In_A($BB,<'spkDs',spkDa,spkDb >)
	]
	--[ 	]->
	[ AgSt_A1($A,<$S,$BB,$E,'spkDs',spkDa,spkDb > )
	, PseudonymsPublished() 				// this fact models that only after this rule the event in the environment takes place. Auditors would see if this order was not preserved in reality. Thus, this fact models that at least one auditor does the check that the event in the environment happens after the voter codes have been published.
	]

rule D_1: 
	[ AgSt_D0($D,<$H,$S,~eskD,pkS> )
	, In_A($S, aenc(x,pk(~eskD)) )
	
	]
	--[ 	D($D), 
		Running_DS($D,$S,<pk(~eskD),pkS,h($H,x)>),
		Commit_DBB($D,<pk(h($H,x))>),
	    	Secret($D,x)	
	]->
	[ Out_S($D,$H,pk(h($H,x)) ) ]

rule H_5: 
	[ AgSt_H0($H,< $D,$BB >)
	, In_S($D,$H,spkDD)
	, In_A($BB,<'spkDs',spkDa,spkDb >)
	] 
	--[ 	Verify_spkDD($H,spkDD,spkDa,spkDb)  // corresponds to signal verify_ps(H, pkD \in [pkD]) in thesis
	]-> 
	[ AgSt_H1($H,<$D,$BB,spkDD,spkDa,spkDb >)]

//one of the rules environment_1 or environment_2 can be triggered (only once) after the voter codes have been published
rule environment_1:
	[ Env($E), PseudonymsPublished()] 
	--[ 	Env_No($E,'1') ]->
	[ Out_A($E,'1')] 

rule environment_2:
	[ Env($E), PseudonymsPublished()]
	--[ 	Env_No($E,'2') ]->
	[ Out_A($E,'2')]


rule S_2a: 
	[ AgSt_S1b($S,<$E,~skS, $H1,$D1,epkD1, $H2,$D2,epkD2, ~x1, ~x2, spkDa,spkDb >),
	  In_A($E,'1')
	]
 	--[ 	Commit_DS($D1,$S,<epkD1,pk(~skS),h($H1,~x1)>),
		Commit_DS($D2,$S,<epkD2,pk(~skS),h($H2,~x2)>),
		Running_SBB($S,spkDa)
	]->  
	[ Out_A($S,<'SG',spkDa>)	
	] 

rule S_2b: 
	[ AgSt_S1b($S,<$E,~skS, $H1,$D1,epkD1, $H2,$D2,epkD2, ~x1, ~x2, spkDa,spkDb >),
	  In_A($E,'2')
	]
 	--[ 	Commit_DS($D1,$S,<epkD1,pk(~skS),h($H1,~x1)>),
		Commit_DS($D2,$S,<epkD2,pk(~skS),h($H2,~x2)>),
		Running_SBB($S,spkDb)
	]->  
	[ Out_A($S,<'SG',spkDb>)	
	] 

rule BB_2:
	[ AgSt_BB1($BB,<$S,'spkDs',spkDa,spkDb > )
	, In_A($S,<'SG',spkDsel>)
	]
	--[ 	BB_SG($BB,<'SG',spkDsel >),
		Commit_SBB($BB,spkDsel)
	]->
	[ Out_A($BB,<'SG',spkDsel>)
	]

rule H_9: 
	[ AgSt_H1($H,<$D,$BB,spkDD,spkDa,spkDb >),
	  In_A($BB,<'SG',spkDsel>)
	]
	--[     Sel($H, spkDD, spkDsel) // corresponds to signal verify_sel(H,pkD\in[pkDSG]) in thesis
	]->
	[ ]

rule A_2:
	[ AgSt_A1($A,<$S,$BB,$E,'spkDs',spkDa,spkDb > ),
	  In_A($BB,<'SG',spkDsel>),
	  In_A($E,r)
	]
	--[ 	Verify_SG($A,spkDsel,r,spkDa,spkDb)
	]->
	[ ]


/* =========
RESTRICTIONS
========== */

// there is only one setup
restriction OneSetup:
	"All #i #j. Setup() @i & Setup() @j ==> #i = #j "


/* ====
LEMMAS 
======= */
/* ==================
Functional properties
=================== */
lemma functional: exists-trace  //spkD2,spkD1 in list and spkD2 chosen in SG
	" Ex H1 H2 #i spkD2 spkD1 BB  #j #k #l  E #m #n #o #p A #q
	      	.
		not (H1 = H2)
		& Pseudonym(H1,spkD1,H2,spkD2) @i 
		& BB_spkDs(BB,<'spkDs',spkD2,spkD1 >) @j
		& Verify_spkDD(H1,spkD1,spkD2,spkD1 ) @k
		& Verify_spkDD(H2,spkD2,spkD2,spkD1 ) @l
		& Env_No(E,'1')	@m
		& BB_SG(BB,<'SG',spkD2 >) @n
		& Sel(H1, spkD1, spkD2) @o
		& Sel(H2, spkD2, spkD2) @p
		& Verify_SG(A,spkD2,'1',spkD2,spkD1) @q "

lemma functional2: exists-trace //spkD2,spkD1 in list and spkD1 chosen in SG
	" Ex H1 H2 #i spkD2 spkD1 BB  #j #k #l  E #m #n #o #p A #q
	      	.
		not (H1 = H2)
		& Pseudonym(H1,spkD1,H2,spkD2) @i 
		& BB_spkDs(BB,<'spkDs',spkD2,spkD1 >) @j
		& Verify_spkDD(H1,spkD1,spkD2,spkD1 ) @k
		& Verify_spkDD(H2,spkD2,spkD2,spkD1 ) @l
		& Env_No(E,'2')	@m
		& BB_SG(BB,<'SG',spkD1 >) @n
		& Sel(H1, spkD1, spkD1) @o
		& Sel(H2, spkD2, spkD1) @p
		& Verify_SG(A,spkD1,'2',spkD2,spkD1) @q "

lemma functional3: exists-trace //spkD1,spkD2 in list and spkD2 chosen in SG
	" Ex H1 H2 #i spkD2 spkD1 BB  #j #k #l  E #m #n #o #p A #q
	      	.
		not (H1 = H2)
		& Pseudonym(H1,spkD1,H2,spkD2) @i 
		& BB_spkDs(BB,<'spkDs',spkD1,spkD2 >) @j
		& Verify_spkDD(H1,spkD1,spkD1,spkD2 ) @k
		& Verify_spkDD(H2,spkD2,spkD1,spkD2 ) @l
		& Env_No(E,'2')	@m
		& BB_SG(BB,<'SG',spkD2 >) @n
		& Sel(H1, spkD1, spkD2) @o
		& Sel(H2, spkD2, spkD2) @p
		& Verify_SG(A,spkD2,'2',spkD1,spkD2) @q "



/*=================================
Individual verifiability properties
=================================*/

lemma indivVerif_ps: // pkD \in [pkD] from thesis is expressed as "either pkD is first or second element of [pkD]"
	" (All H spkDD spkDb #i . 
		Verify_spkDD(H,spkDD,spkDD,spkDb) @i  
	==> (Ex BB spkD2 x #j. 
		BB_spkDs(BB,<'spkDs',spkDD,spkD2 >) @j
		& spkDD =pk(h(H,x))
	     )
	    |(Ex BB spkD2 x #j.  
		BB_spkDs(BB,<'spkDs',spkD2,spkDD >) @j
		& spkDD =pk(h(H,x)) 
	     )
	 )
	& (All H spkDD spkDb #i . 
		Verify_spkDD(H,spkDD,spkDb,spkDD) @i  
	==> (Ex BB spkD2 x #j. 
		BB_spkDs(BB,<'spkDs',spkDD,spkD2 >) @j
		& spkDD =pk(h(H,x))
	     )
	    |(Ex BB spkD2 x #j.  
		BB_spkDs(BB,<'spkDs',spkD2,spkDD >) @j
		& spkDD =pk(h(H,x)) 
	     )
	 )	
	"

lemma indivVerif_sel:
	" All H spkDD #i .
		Sel(H, spkDD, spkDD) @i
	==> Ex x BB #j. 
		BB_SG(BB,<'SG',spkDD >) @j
		& spkDD = pk(h(H,x)) 
		"

/*================================
Universal verifiability properties
================================*/
// [spkDSG]=select(r,[spkD]) means "no matter what environment chose, selection happened accordingly.
// we divide this into "either r chose '1' and the first element of [spkD] is correctly chosen to be [spkDSG] or r chose '2' and the second element of [spkD] is correctly chosen to be [spkDSG]".
//(Formally, we rewrite (A1 or A2 -> B) to (A1 -> B and A2 -> B) which is equivalent

lemma univVerif_sel: 
	" All A spkD1 spkD2 #a1.
		Verify_SG(A,spkD1,'1',spkD1,spkD2) @a1
	  ==> Ex BB #b1 #b2 .  
		// the same lists [spkD] and [spkDSG] are on BB (with the same relation)
		BB_spkDs(BB,<'spkDs',spkD1,spkD2 >) @b1
		& BB_SG(BB,<'SG',spkD1 >) @b2
	& All A spkD1 spkD2 #a1.
		Verify_SG(A,spkD2,'2',spkD1,spkD2) @a1
	  ==> Ex BB #b1 #b2 .  
		// the same lists [spkD] and [spkDSG] are on BB (with the same relation)
		BB_spkDs(BB,<'spkDs',spkD1,spkD2 >) @b1
		& BB_SG(BB,<'SG',spkD2 >) @b2
		"



end

