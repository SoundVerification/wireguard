theory PR5_ShHm
begin

/* 
============
INTRODUCTION
============
* Protocol:	Protocol PR_5
* Modeler: 	Lara Schmid
* Date: 	March 2020
* Source:	[1] "Advancing the Formal Foundations for Voting Protocols", Lara Schmid, PhD Thesis, ETH ZÃ¼rich.
* Disclaimer:	The pupose of this protocl is to establish a possibility result.
		We specify a simple protocol with one voter, as this is sufficeint for demonstrating possibility.

========
RESULTS:
========

- lemma functional: verified 
- lemma DRauth: verified 
 

*/

/*============
SPECIFICATION:
============== */

/*=====================
Functions and equations 
======================= */
builtins: signing, multiset

functions: sg/2, ver/2 //new signing function

equations:
// our equation for modeling the verification of signatures
ver(sg(m, sk), pk(sk)) = m 
// the function models that given a signature, one can also see the signed plaintext (only if one has the public key, but adversary has all public keys). With this, we do not explicitly have to always send the message in plaintext and signed, but only the signed one is enough.



/* ==========
Channel rules
============= */

rule ChanOut_A: [Out_A($A,x)]--[ChanOut_A($A,x)]->[!Auth($A,x), Out(<$A,x>)]
rule ChanIn_A:	[!Auth($A,x)]--[ChanIn_A($A,x)]->[In_A($A,x)]


//reliable insecure channel from H to P: all messages sent on a reliable channel, are received unchanged

rule ChanOut_IR_HP:  	[ Out_IR_HP($A,$B,m) ]--[ ChanOut_IR_HP($A,$B,m) ]->[ Out(<$A,$B,m>) ] 
rule ChanIn_IR_HP:  	[ In(<$A,$B,m>) ]--[ ChanIn_IR_HP($A,$B,m) ]->[ In_IR_HP($A,$B,m) ] 
 
//reliable insecure channel from P to S: all messages sent on a reliable channel, are received unchanged

rule ChanOut_IR_PS:  	[ Out_IR_PS($A,$B,m) ]--[ ChanOut_IR_PS($A,$B,m) ]->[ Out(<$A,$B,m>) ] 
rule ChanIn_IR_PS:  	[ In(<$A,$B,m>) ]--[ ChanIn_IR_PS($A,$B,m) ]->[ In_IR_PS($A,$B,m) ] 
restriction Chan_R_PS:
	"All A B m #i. Send_R_PS(A,B,m) @i ==> Ex #j. Receive_R_PS(A,B,m) @j "
 

//undeniable insecure channel: all messages sent on a undeniable channel, are received unchanged

rule ChanOut_IU:   	[ Out_IU($A,$B,m) ] --[ ChanOut_IU($A,$B,m) ]->[ Out(<$A,$B,m>) ] 
rule ChanIn_IU:   	[ In(<$A,$B,m>) ] --[ ChanIn_IU($A,$B,m) ]-> [ In_IU($A,$B,m) ] 
 
/* ======================
Adversary's fake evidence
====================== */
// the adversary can claim any term that he knows to be evidence
rule fakeEvidence:
	[ In(<ballot,evidence>) ] --[ Evidence(ballot,evidence) ]-> [ ] 


/* =====
Protocol
======== */

rule publickeyinfrastructure:
  [ Fr(~skX) ]--[ LongtermKey($X,~skX) ]-> [ !Ltk($X,~skX), !Pk($X,pk(~skX)), Out(pk(~skX)) ]

rule Setup: 
  	[ !Ltk('S',~skS) ] 
  	--[ 	Setup(),
		Voter('H'),
		Server('S'), Honest('S'),
		BBpkS('BB',<'pkS', pk(~skS)>)
	]-> 
  	[ Out(<'H',< 'BB','P',$v>>)
	, AgSt_BB0('BB',<'S'>)
	, AgSt_P0('P',<'S'>)
	, AgSt_S0('S',<~skS>)
	, Out_A('BB',<'pkS', pk(~skS)>)
	]

/* rule H_1 omitted as H is modeled by the adversary rules */

rule P: // P is partially trusted to forward messages from H to S
	[ AgSt_P0($P,<$S>), In_IR_HP($H,$P,b)] 
	--[ Receive_R_HP($H,$P,b),
	    Send_R_PS($P,$S,b)
	]->
	[  Out_IR_PS($P,$S,b) ]

rule S_1: 
	[ AgSt_S0($S, <~skS>), 
	  In_IR_PS($P,$S,<$v,$H>) // S implicitly (by pattern matching) only accepts ballots of the right format
	 ] 
	--[ Receive_R_PS($P,$S,<$v,$H>),
	    Send_U($S,$P,sg(<$v,$H>,~skS)),
	    Pub($S,$P,sg(<$v,$H>,~skS))
	]->
	[ Out_IU($S,$P,sg(<$v,$H>,~skS)),
	  Out_A($S, <'bs', <$v,$H> >),
	  Out_A($S, <'vs', $v >)
	]
rule BB: 
	[ AgSt_BB0($BB,<$S>)
	, In_A($S, <'bs', bs >)
	, In_A($S, <'vs', vs >)
	]
 	--[ 	BB_recorded($BB,<'bs', bs >),
		BB_tallied($BB,<'vs', vs >),
		End()
	]->  
	[ Out_A($BB, <'bs', bs >)
	, Out_A($BB, <'vs', vs >)
	]

/* rule H_5  omitted as H is modeled by the adversary rules */


/* =========
RESTRICTIONS
============ */
// there is only one setup
restriction OneSetup: 
	"All #i #j. Setup() @i & Setup() @j ==> #i = #j "


/* ====
LEMMAS 
======= */
/* ==================
Functional properties
=================== */
lemma functional: exists-trace
 	" Ex  #k BB
		.
		BB_recorded(BB,<'bs', <'v','H'> >) @k
		& BB_tallied(BB,<'vs','v'>) @k
		"
/*===========================
Dispute Resolution Properties
===========================*/
lemma DRauth: 
	"All  S #i.
		Honest(S) @i 
	==> // not Faulty 
	not (Ex b BB P b1 skS #k #l #m . 
		BB_recorded(BB,<'bs', b1 >) @k
		& not (b1=b)
		& Pub(S,P,sg(b,skS)) @l
		& BBpkS(BB,<'pkS', pk(skS)>) @m
		)"


end

