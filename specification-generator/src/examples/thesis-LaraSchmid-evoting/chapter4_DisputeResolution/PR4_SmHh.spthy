theory PR4_SmHh
begin

/* 
============
INTRODUCTION
============
* Protocol:	Protocol PR_4
* Modeler: 	Lara Schmid
* Date: 	March 2020
* Source:	[1] "Advancing the Formal Foundations for Voting Protocols", Lara Schmid, PhD Thesis, ETH ZÃ¼rich.
* Disclaimer:	The pupose of this protocl is to establish a possibility result.
		We specify a simple protocol with one voter, as this is sufficeint for demonstrating possibility.

========
RESULTS:
========
lemmas labeled with "reuse" are such that other lemmas can use their statements, however they do not just assume that the stated property holds, as the reuse-lemmas are also proven correct

- lemma [reuse] onlyonce1: verified 
- lemma [reuse] onlyonce2: verified 
- lemma [reuse] onlyonce3: verified 
- lemma [reuse] onlyonce4: verified 
- lemma [reuse] onlyonce5: verified 
- lemma [reuse] onlyonce6: verified 
- lemma [reuse] onlyonce7: verified 
- lemma functional: 	   verified 
- lemma DRvoterT: 	   verified 



*/

/*============
SPECIFICATION:
============== */

/*=====================
Functions and equations 
======================= */
builtins: signing, multiset

functions: sg/2, ver/2 //new signing function

equations:
// our equation for modeling the verification of signatures
ver(sg(m, sk), pk(sk)) = m 
// the function models that given a signature, one can also see the signed plaintext (only if one has the public key, but adversary has all public keys). With this, we do not explicitly have to always send the message in plaintext and signed, but only the signed one is enough.



/* ==========
Channel rules
============= */

rule ChanOut_A: [Out_A($A,x)]--[ChanOut_A($A,x)]->[!Auth($A,x), Out(<$A,x>)]
rule ChanIn_A:	[!Auth($A,x)]--[ChanIn_A($A,x)]->[In_A($A,x)]


//reliable insecure channel from H to P: all messages sent on a reliable channel, are received unchanged

rule ChanOut_IR_HP:  	[ Out_IR_HP($A,$B,m) ]--[ ChanOut_IR_HP($A,$B,m) ]->[ Out(<$A,$B,m>) ] 
rule ChanIn_IR_HP:  	[ In(<$A,$B,m>) ]--[ ChanIn_IR_HP($A,$B,m) ]->[ In_IR_HP($A,$B,m) ] 
restriction Chan_R_HP:
	"All A B m #i. Send_R_HP(A,B,m) @i ==> Ex #j. Receive_R_HP(A,B,m) @j "
 

//reliable insecure channel from P to S: all messages sent on a reliable channel, are received unchanged

rule ChanOut_IR_PS:  	[ Out_IR_PS($A,$B,m) ]--[ ChanOut_IR_PS($A,$B,m) ]->[ Out(<$A,$B,m>) ] 
rule ChanIn_IR_PS:  	[ In(<$A,$B,m>) ]--[ ChanIn_IR_PS($A,$B,m) ]->[ In_IR_PS($A,$B,m) ] 
restriction Chan_R_PS:
	"All A B m #i. Send_R_PS(A,B,m) @i ==> Ex #j. Receive_R_PS(A,B,m) @j "
 
//reliable insecure channel from S to P: all messages sent on a reliable channel, are received unchanged

rule ChanOut_IR_SP:  	[ Out_IR_SP($A,$B,m) ]--[ ChanOut_IR_SP($A,$B,m) ]->[ Out(<$A,$B,m>) ] 
rule ChanIn_IR_SP:  	[ In(<$A,$B,m>) ]--[ ChanIn_IR_SP($A,$B,m) ]->[ In_IR_SP($A,$B,m) ] 
restriction Chan_R_SP:
	"All A B m #i. Send_R_SP(A,B,m) @i ==> Ex #j. Receive_R_SP(A,B,m) @j "
 

//reliable insecure channel from P to H: all messages sent on a reliable channel, are received unchanged

rule ChanOut_IR_PH:  	[ Out_IR_PH($A,$B,m) ]--[ ChanOut_IR_PH($A,$B,m) ]->[ Out(<$A,$B,m>) ] 
rule ChanIn_IR_PH:  	[ In(<$A,$B,m>) ]--[ ChanIn_IR_PH($A,$B,m) ]->[ In_IR_PH($A,$B,m) ] 
restriction Chan_R_PH:
	"All A B m #i. Send_R_PH(A,B,m) @i ==> Ex #j. Receive_R_PH(A,B,m) @j "
 

/* ======================
Adversary's fake evidence
====================== */
// the adversary can claim any term that he knows to be evidence
rule fakeEvidence:
	[ In(<ballot,evidence>) ] --[ Evidence(ballot,evidence) ]-> [ ] 


/* =====
Protocol
======== */

rule publickeyinfrastructure:
  [ Fr(~skX) ]--[ LongtermKey($X,~skX) ]-> [ !Ltk($X,~skX), !Pk($X,pk(~skX)), Out(pk(~skX)) ]

rule Setup: 
  	[ !Ltk('S',~skS) ] 
  	--[ 	Setup(),
		Voter('H'),
		Server('S'), 
		BBpkS('BB',<'pkS', pk(~skS)>)
	]-> 
  	[ AgSt_H0('H',< 'BB','P',$v>)
	, AgSt_BB0('BB',<'S'>)
	, AgSt_P0('P',<'S'>)
	, AgSt_P1('P',<'H'>)
	, AgSt_S0('S',<~skS>)
	, Out(<'S',<~skS>>)
	, Out_A('BB',<'pkS', pk(~skS)>)
  	]

rule H_1:
	[ AgSt_H0($H, <$BB, $P, $v>) ]
	--[	Vote($H,$v), 
		Ballot($H,<$v,$H>),
		Send_R_HP($H,$P,<$v,$H>),
		H1()
	]->
	[ AgSt_H1($H, <$BB, $P, $v>), Out_IR_HP($H,$P,<$v,$H>)
	]

rule P: // P is partially trusted to forward messages from H to S
	[ AgSt_P0($P,<$S>), In_IR_HP($H,$P,b)] 
	--[ Receive_R_HP($H,$P,b),
	    Send_R_PS($P,$S,b),
	    P()
	]->
	[  Out_IR_PS($P,$S,b) ]

rule S_1:  // S is partially trusted to reply with a confirmation upon receiving a valid ballot (implicitly checked by pattern matching)
	[ AgSt_S0($S, <~skS>), 
	  In_IR_PS($P,$S,<$v,$H>)
	 ] 
	--[ Receive_R_PS($P,$S,<$v,$H>),
	    Send_R_SP($S,$P,sg(<$v,$H>,~skS)),
	    S1()
	]->
	[ Out_IR_SP($S,$P,sg(<$v,$H>,~skS))
	]

rule P_2: // P is partially trusted to forward messages from S to H
	[ AgSt_P1($P,<$H>), In_IR_SP($S,$P,c) ] 
	--[ Receive_R_SP($S,$P,c),
	    Send_R_PH($P,$H,c),
	    P2()
	]->
	[  Out_IR_PH($P,$H,c) ]

rule H_2:
	[ AgSt_H1($H, <$BB, $P, $v>), In_IR_PH($P,$H,c) ]
	--[ Receive_R_PH($P,$H,c),
	    Evidence(<$v,$H>,c),
	    H2()
	]->
	[ AgSt_H2($H, <$BB, $P, $v, c>) ]

rule BB: 
	[ AgSt_BB0($BB,<$S>)
	, In(<$S, <'bs', bs  >>)
	, In(<$S, <'vs', vs >>)
	]
 	--[ 	BB_recorded($BB,<'bs', bs >),
		BB_tallied($BB,<'vs', vs  >),
		End()
	]->  
	[ Out_A($BB, <'bs', bs >)
	, Out_A($BB, <'vs', vs >)
	]
	
rule H_5: 
	[ AgSt_H2($H, <$BB, $P, $v, c>),
	  In_A($BB, <'bs', bRecorded >)
	]
	--[	Verify($H,<$v,$H>, bRecorded), //this corresponds to the signal verifyC(H, <v,H>) in the thesis
	   	H5()
	]->
	[ ]



/* =========
RESTRICTIONS
============ */
// there is only one setup
restriction OneSetup: 
	"All #i #j. Setup() @i & Setup() @j ==> #i = #j "


/* ====
LEMMAS 
======= */

lemma onlyonce1 [reuse]: " All #i #j. H1() @i & H1() @j ==> #i = #j "
lemma onlyonce2 [reuse]: " All #i #j. H2() @i & H2() @j ==> #i = #j "
lemma onlyonce3 [reuse]: " All #i #j. P()  @i & P()  @j ==> #i = #j "
lemma onlyonce4 [reuse]: " All #i #j. P2() @i & P2() @j ==> #i = #j "
lemma onlyonce5 [reuse]: " All #i #j. S1() @i & S1() @j ==> #i = #j "
lemma onlyonce6 [reuse]: " All #i #j. H5() @i & H5() @j ==> #i = #j "
lemma onlyonce7 [reuse]: " All #i #j. End()@i & End()@j ==> #i = #j " 

	
/* ==================
Functional properties
=================== */
lemma functional: exists-trace
 	" Ex  #i #j #k
		.
		Vote('H','v') @i
		& Ballot('H',<'v','H'>) @j
		
		& Verify('H',<'v','H'>, <'v','H'> ) @k
		"
/*===========================
Dispute Resolution Properties
===========================*/
// As BB is honest, BB_recorded is always executed before End(), i.e., k<j holds as required by the Definition of DRvoterT. We thus leave this away for optimization.
lemma DRvoterT: 
	"All H b #i #j.
		Ballot(H,b) @i & End() @j & i<j 
	==> ( Ex BB #k .					
		BB_recorded(BB,<'bs', b >) @k )	
	|   //Faulty
	    ( Ex BB b1 skS #k #l #m . 
		BB_recorded(BB,<'bs', b1>) @k
		& not (b1=b) 
		& Evidence(b,sg(b,skS)) @l
		& BBpkS(BB,<'pkS', pk(skS)>) @m
		)"


end

