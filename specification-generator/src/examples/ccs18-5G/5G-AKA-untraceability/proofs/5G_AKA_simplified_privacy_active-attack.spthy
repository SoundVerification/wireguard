theory 5G_AKA_simplified_privacy_active begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: KDF/2, adec/2, aenc/2, f1/2, f1_star/2, f2/2, f5/2,
           f5_star/2, fst/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) init_homeNet:
   [ Fr( ~sk_HN ) ]
  --[ Once( 'homeNet' ) ]->
   [ !HSS( ~sk_HN ), !Pk( pk(~sk_HN) ), Out( pk(~sk_HN) ) ]

rule (modulo E) supi_supply:
   [ Fr( ~a ), Fr( ~b ) ]
  --[ Once( 'supiSupply' ) ]->
   [ !SUPI_Init( (~a+~b) ), SUPI( ~a ), SUPI( diff(~a, ~b) ) ]

rule (modulo E) add_subscription:
   [
   !SUPI_Init( (~supi+z) ), Fr( ~k ), Fr( ~sqn_root ),
   Fr( ~sqn_root_ ), !HSS( ~sk_HN )
   ]
  --[ Subscribe( ~supi ), Sqn_Create( ~supi, ~sqn_root ) ]->
   [
   !Ltk_Sym( ~supi, ~k, ~sqn_root ),
   Sqn_UE( ~supi, ('1'+~sqn_root), ~sqn_root, '1' ),
   Sqn_HSS( ~supi, ('1'+~sqn_root), ~sqn_root, '1' ),
   Sqn_UE( ~supi, ('1'+~sqn_root_), ~sqn_root_, '1' ),
   Sqn_HSS( ~supi, ('1'+~sqn_root_), ~sqn_root_, '1' )
   ]

rule (modulo E) ue_increase_sqn:
   [ Sqn_UE( ~supi, Sqn, ~sqn_root, count ), In( '1' ) ]
  --[
  Once( 'incr' ),
  Sqn_UE_Invariance( ~supi, ('1'+Sqn), ~sqn_root, ('1'+count) ),
  Sqn_UE_Change( ~supi, ('1'+Sqn) ), Sqn_UE_Desync( )
  ]->
   [ Sqn_UE( ~supi, ('1'+Sqn), ~sqn_root, ('1'+count) ) ]

rule (modulo E) ue_1_send_attachReq:
   [
   !Ltk_Sym( ~supi, ~k, ~sqn_root ), !Pk( pk_HN ), Fr( ~R ),
   Fr( ~tid ), Fr( ~cid )
   ]
  --[ Start_UE_Session( ~supi ) ]->
   [
   St_1_UE( ~tid, ~supi, ~k, ~sqn_root, aenc(<~supi, ~R>, pk_HN), ~cid
   ),
   Out( aenc(<~supi, ~R>, pk_HN) )
   ]

rule (modulo E) seaf_1_receive_attachReq:
   [
   In( aenc(<~supi, ~R>, pk(~sk_HN)) ), !HSS( ~sk_HN ),
   !Ltk_Sym( ~supi, ~k, ~sqn_root ),
   Sqn_HSS( ~supi, SqnHSS, ~sqn_root, count ), Fr( ~RAND ),
   In( count )
   ]
  --[
  Start_SEAF_Session( 'seaf' ),
  Sqn_HSS_Invariance( ~supi, ('1'+SqnHSS), ~sqn_root, ('1'+count) ),
  Src( ~RAND,
       <(f5(~k, ~RAND)⊕('1'+SqnHSS)), f1(~k, <('1'+SqnHSS), ~RAND>)>
  )
  ]->
   [
   Out( <~RAND, (f5(~k, ~RAND)⊕('1'+SqnHSS)), 
         f1(~k, <('1'+SqnHSS), ~RAND>)>
   )
   ]

rule (modulo E) ue_2_receive_authReq_freshness_success_send_authResp:
   [
   St_1_UE( ~tid, ~supi, ~k, ~sqn_root, suci, ~cid ),
   Sqn_UE( ~supi, SqnUE, ~sqn_root, count ), SUPI( ~supi ),
   In( <RAND, (f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>
   )
   ]
  --[
  Original( <(f5(~k, RAND)⊕(SqnUE+dif)), f1(~k, <(SqnUE+dif), RAND>)>
  ),
  UE_End( ),
  Sqn_UE_Invariance( ~supi, (SqnUE+dif), ~sqn_root, (count+dif) ),
  Sqn_UE_Change( ~supi, (SqnUE+dif) ),
  Sqn_UE_Use( ~supi, (SqnUE+dif) )
  ]->
   [
   St_2_UE( ~tid, ~supi, ~k, ~sqn_root, ~cid ),
   Out( KDF(f2(~k, RAND), RAND) ),
   Sqn_UE( ~supi, (SqnUE+dif), ~sqn_root, (count+dif) )
   ]

rule (modulo E) ue_2_receive_authReq_fail_freshness_send_sync_failure:
   [
   St_1_UE( ~tid, ~supi, ~k, ~sqn_root, suci, ~cid ),
   Sqn_UE( ~supi, SqnUE, ~sqn_root, count ), SUPI( ~supi ),
   In( <RAND, (SqnHSS⊕f5(~k, RAND)), f1(~k, <SqnHSS, RAND>)> ),
   In( count )
   ]
  --[
  UE_Sync_Failure( ),
  Replayed( <(SqnHSS⊕f5(~k, RAND)), f1(~k, <SqnHSS, RAND>)> ),
  UE_End( ), Greater_Or_Equal_Than( SqnUE, SqnHSS ), Once( 'fail' ),
  Sqn_UE_Invariance( ~supi, SqnUE, ~sqn_root, count ),
  Sqn_UE_Nochange( ~supi, SqnUE )
  ]->
   [ Out( <(SqnUE⊕f5_star(~k, RAND)), f1_star(~k, <SqnUE, RAND>)> ) ]

restriction phases [right]:
  "∀ UE1 UE2 #i #j.
    ((Start_UE_Session( UE1 ) @ #i) ∧ (Start_UE_Session( UE2 ) @ #j)) ⇒
    (((#i = #j) ∨ (∃ #k. ((UE_End( ) @ #k) ∧ (#i < #k)) ∧ (#k < #j))) ∨
     (∃ #k. ((UE_End( ) @ #k) ∧ (#j < #k)) ∧ (#k < #i)))"

restriction phases [left]:
  "∀ UE1 UE2 #i #j.
    ((Start_UE_Session( UE1 ) @ #i) ∧ (Start_UE_Session( UE2 ) @ #j)) ⇒
    (((#i = #j) ∨ (∃ #k. ((UE_End( ) @ #k) ∧ (#i < #k)) ∧ (#k < #j))) ∨
     (∃ #k. ((UE_End( ) @ #k) ∧ (#j < #k)) ∧ (#k < #i)))"

restriction subscribe_once [right]:
  "∀ supi #i #j.
    ((Subscribe( supi ) @ #i) ∧ (Subscribe( supi ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction subscribe_once [left]:
  "∀ supi #i #j.
    ((Subscribe( supi ) @ #i) ∧ (Subscribe( supi ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction greater_or_equal_than [right]:
  "∀ x y #i.
    (Greater_Or_Equal_Than( x, y ) @ #i) ⇒ (¬(∃ z. (x+z) = y))"
  // safety formula

restriction greater_or_equal_than [left]:
  "∀ x y #i.
    (Greater_Or_Equal_Than( x, y ) @ #i) ⇒ (¬(∃ z. (x+z) = y))"
  // safety formula

restriction once [right]:
  "∀ a #i #j. ((Once( a ) @ #i) ∧ (Once( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction once [left]:
  "∀ a #i #j. ((Once( a ) @ #i) ∧ (Once( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma dummy [right]:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by sorry

lemma dummy [left]:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by sorry

lemma sqn_ue_invariance [right, use_induction, sources]:
  all-traces
  "∀ supi Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_ue_invariance [left, use_induction, sources]:
  all-traces
  "∀ supi Sqn sqn_root count #i.
    (Sqn_UE_Invariance( supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi Sqn sqn_root count #i.
  (Sqn_UE_Invariance( supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_hss_invariance [right, use_induction, sources]:
  all-traces
  "∀ supi Sqn sqn_root count #i.
    (Sqn_HSS_Invariance( supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi Sqn sqn_root count #i.
  (Sqn_HSS_Invariance( supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

lemma sqn_hss_invariance [left, use_induction, sources]:
  all-traces
  "∀ supi Sqn sqn_root count #i.
    (Sqn_HSS_Invariance( supi, Sqn, sqn_root, count ) @ #i) ⇒
    ((count+sqn_root) = Sqn)"
/*
guarded formula characterizing all counter-examples:
"∃ supi Sqn sqn_root count #i.
  (Sqn_HSS_Invariance( supi, Sqn, sqn_root, count ) @ #i)
 ∧
  ¬((count+sqn_root) = Sqn)"
*/
by sorry

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_adec
  by sorry
next
  case Rule_Destrd_0_fst
  by sorry
next
  case Rule_Destrd_0_snd
  by sorry
next
  case Rule_Destrd_union
  by sorry
next
  case Rule_Destrd_xor
  by sorry
next
  case Rule_Equality
  by sorry
next
  case Rule_Send
  by sorry
next
  case Rule_add_subscription
  by sorry
next
  case Rule_init_homeNet
  by sorry
next
  case Rule_seaf_1_receive_attachReq
  by sorry
next
  case Rule_supi_supply
  by sorry
next
  case Rule_ue_1_send_attachReq
  by sorry
next
  case Rule_ue_2_receive_authReq_fail_freshness_send_sync_failure
  backward-search
    case LHS
    step( simplify )
    step( solve( SUPI( ~supi ) ▶₂ #i ) )
      case supi_supply_case_1
      step( solve( St_1_UE( ~tid, ~supi, ~k, ~sqn_root, suci, ~cid
                   ) ▶₀ #i ) )
        case ue_1_send_attachReq
        step( solve( !KU( f1(~k, <SqnHSS, RAND>) ) @ #vk.4 ) )
          case c_f1
          by step( solve( !KU( ~k ) @ #vk.7 ) )
        next
          case seaf_1_receive_attachReq
          step( solve( Sqn_UE( ~supi, SqnUE, ~sqn_root, count ) ▶₁ #i ) )
            case add_subscription
            by step( contradiction /* from formulas */ )
          next
            case ue_2_receive_authReq_freshness_success_send_authResp
            step( solve( (#vr.1 = #vr.8)  ∥
                         (∃ #k. (UE_End( ) @ #k) ∧ (#vr.1 < #k) ∧ (#k < #vr.8))  ∥
                         (∃ #k. (UE_End( ) @ #k) ∧ (#vr.8 < #k) ∧ (#k < #vr.1)) ) )
              case case_3
              step( solve( UE_End( ) @ #k.1 ) )
                case ue_2_receive_authReq_freshness_success_send_authResp
                step( solve( SUPI( ~supi.1 ) ▶₂ #k.1 ) )
                  case supi_supply
                  step( solve( (∃ #k.
                                 (UE_End( ) @ #k) ∧ (#vr.7 < #k) ∧ (#k < #vr.1))  ∥
                               (∃ #k. (UE_End( ) @ #k) ∧ (#vr.1 < #k) ∧ (#k < #vr.7)) ) )
                    case case_1
                    step( solve( !KU( f1(~k, <(~sqn_root+count+dif), RAND.1>)
                                 ) @ #vk.12 ) )
                      case seaf_1_receive_attachReq
                      step( solve( !KU( (f5(~k, ~RAND)⊕('1'+'1'+~sqn_root)) ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( (f5(~k, ~RAND)⊕('1'+'1'+~sqn_root))
                                     ) ▶₀ #vk.4 ) )
                          case seaf_1_receive_attachReq
                          step( solve( !HSS( ~sk_HN.1 ) ▶₁ #vr.8 ) )
                            case init_homeNet
                            step( solve( !Ltk_Sym( ~supi.1, ~k.2, ~sqn_root.1 ) ▶₂ #vr.8 ) )
                              case add_subscription_case_1
                              step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                                case d_0_snd
                                step( solve( (#vr.9, 0) ~~> (#vk.4, 0) ) )
                                  case d_0_fst
                                  step( solve( (#vr.10, 0) ~~> (#vk.4, 0) ) )
                                    case Xor
                                    step( solve( !KU( ~RAND ) @ #vk.5 ) )
                                      case seaf_1_receive_attachReq
                                      step( solve( Sqn_UE( ~supi, ('1'+~sqn_root), ~sqn_root, '1'
                                                   ) ▶₁ #k.1 ) )
                                        case add_subscription
                                        step( solve( !KU( aenc(<~supi, ~R.2>, pk(~sk_HN))
                                                     ) @ #vk.6 ) )
                                          case ue_1_send_attachReq
                                          step( solve( (#vr.7 = #vr.11)  ∥
                                                       (∃ #k.
                                                         (UE_End( ) @ #k)
                                                        ∧
                                                         (#vr.7 < #k) ∧ (#k < #vr.11))  ∥
                                                       (∃ #k.
                                                         (UE_End( ) @ #k)
                                                        ∧
                                                         (#vr.11 < #k) ∧ (#k < #vr.7)) ) )
                                            case case_1
                                            step( solve( (∃ #k.
                                                           (UE_End( ) @ #k)
                                                          ∧
                                                           (#vr.1 < #k) ∧ (#k < #vr.7))  ∥
                                                         (∃ #k.
                                                           (UE_End( ) @ #k)
                                                          ∧
                                                           (#vr.7 < #k) ∧ (#k < #vr.1)) ) )
                                              case case_2
                                              step( solve( !KU( '1' ) @ #vk.7 ) )
                                                case pub
                                                by ATTACK // trace found
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ue_increase_sqn
            by sorry
          qed
        qed
      qed
    next
      case supi_supply_case_2
      by sorry
    qed
  next
    case RHS
    step( simplify )
    by sorry
  qed
next
  case Rule_ue_2_receive_authReq_freshness_success_send_authResp
  by sorry
next
  case Rule_ue_increase_sqn
  by sorry
qed

end