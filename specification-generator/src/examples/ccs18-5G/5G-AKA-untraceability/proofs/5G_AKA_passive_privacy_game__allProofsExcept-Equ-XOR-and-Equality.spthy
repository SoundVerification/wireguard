theory 5G_AKA_passive_privacy_game__all_except_Equality_XOR begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: KDF/2, adec/2, aenc/2, f1/2, f1_star/2, f2/2, f5/2,
           f5_star/2, fst/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) init_homeNet:
   [ Fr( ~sk_HN ) ]
  --[ Once( 'homeNet' ) ]->
   [ !Pk( pk(~sk_HN) ), Out( pk(~sk_HN) ) ]

rule (modulo E) supi_supply:
   [
   Fr( ~supi1 ), Fr( ~supi2 ), Fr( ~sqn1 ), Fr( ~sqn2 ), Fr( ~k1 ),
   Fr( ~k2 )
   ]
  --[ Once( 'supiSupply' ) ]->
   [
   !SUPI_Init( (~supi1+~supi2) ), UE( <~supi1, ~sqn1, ~k1> ),
   UE( diff(<~supi1, ~sqn1, ~k1>, <~supi2, ~sqn2, ~k2>) )
   ]

rule (modulo E) session:
   [ UE( <~supi, ~sqn, ~k> ), !Pk( pk_HN ), Fr( ~R ), Fr( ~RAND ) ]
  --[
  Executable( ~supi ), Secret( f5(~k, ~RAND) ), Secret( ~k ),
  Secret( ~sqn ), Secret( ~supi )
  ]->
   [
   Out( aenc(<~supi, ~R>, pk_HN) ),
   Out( <~RAND, (~sqn⊕f5(~k, ~RAND)), f1(~k, <~sqn, ~RAND>)> ),
   Out( KDF(f2(~k, ~RAND), ~RAND) )
   ]

restriction once [right]:
  "∀ a #i #j. ((Once( a ) @ #i) ∧ (Once( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction once [left]:
  "∀ a #i #j. ((Once( a ) @ #i) ∧ (Once( a ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma dummy [right]:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by contradiction /* from formulas */

lemma dummy [left]:
  all-traces "¬(⊥)"
/*
guarded formula characterizing all counter-examples:
"⊥"
*/
by contradiction /* from formulas */

lemma mainSourceLemma [right, use_induction, sources]:
  all-traces "∀ t #i. (Secret( t ) @ #i) ⇒ (¬(∃ #k. !KU( t ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ t #i. (Secret( t ) @ #i) ∧ ∃ #k. (!KU( t ) @ #k)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥ (∀ #k. (!KU( t ) @ #k) ⇒ last(#k)) )
    case case_1
    solve( Secret( t ) @ #i )
      case session_case_1
      solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
        case supi_supply_case_1
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          solve( !KU( f5(~k, ~RAND) ) @ #k.1 )
            case c_f5
            by solve( !KU( ~k ) @ #vk )
          qed
        qed
      next
        case supi_supply_case_2
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          solve( !KU( f5(~k, ~RAND) ) @ #k.1 )
            case c_f5
            by solve( !KU( ~k ) @ #vk )
          qed
        qed
      qed
    next
      case session_case_2
      solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
        case supi_supply_case_1
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~k ) @ #k.1 )
        qed
      next
        case supi_supply_case_2
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~k ) @ #k.1 )
        qed
      qed
    next
      case session_case_3
      solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
        case supi_supply_case_1
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~sqn ) @ #k.1 )
        qed
      next
        case supi_supply_case_2
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~sqn ) @ #k.1 )
        qed
      qed
    next
      case session_case_4
      solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
        case supi_supply_case_1
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~supi ) @ #k.1 )
        qed
      next
        case supi_supply_case_2
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~supi ) @ #k.1 )
        qed
      qed
    qed
  next
    case case_2
    solve( Secret( t ) @ #i )
      case session_case_1
      solve( (last(#i))  ∥ (∀ #k.1. (!KU( ~k ) @ #k.1) ⇒ last(#k.1)) )
        case case_1
        solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
          case supi_supply_case_1
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( f5(~k, ~RAND) ) @ #i )
          qed
        next
          case supi_supply_case_2
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( f5(~k, ~RAND) ) @ #i )
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥ (∀ #k. (!KU( ~sqn ) @ #k) ⇒ last(#k)) )
          case case_1
          solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
            case supi_supply_case_1
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( f5(~k, ~RAND) ) @ #i )
            qed
          next
            case supi_supply_case_2
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( f5(~k, ~RAND) ) @ #i )
            qed
          qed
        next
          case case_2
          solve( (last(#i))  ∥ (∀ #k. (!KU( ~supi ) @ #k) ⇒ last(#k)) )
            case case_1
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( f5(~k, ~RAND) ) @ #i )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( f5(~k, ~RAND) ) @ #i )
              qed
            qed
          next
            case case_2
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( f5(~k, ~RAND) ) @ #k.1 )
                  case c_f5
                  by contradiction /* cyclic */
                next
                  case session
                  by contradiction /* cyclic */
                qed
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( f5(~k, ~RAND) ) @ #k.1 )
                  case c_f5
                  by contradiction /* cyclic */
                next
                  case session
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case session_case_2
      solve( (last(#i))  ∥
             (∀ #k.1. (!KU( f5(~k, ~RAND) ) @ #k.1) ⇒ last(#k.1)) )
        case case_1
        solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
          case supi_supply_case_1
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~k ) @ #i )
          qed
        next
          case supi_supply_case_2
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~k ) @ #i )
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥ (∀ #k. (!KU( ~sqn ) @ #k) ⇒ last(#k)) )
          case case_1
          solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
            case supi_supply_case_1
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~k ) @ #i )
            qed
          next
            case supi_supply_case_2
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~k ) @ #i )
            qed
          qed
        next
          case case_2
          solve( (last(#i))  ∥ (∀ #k. (!KU( ~supi ) @ #k) ⇒ last(#k)) )
            case case_1
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~k ) @ #i )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~k ) @ #i )
              qed
            qed
          next
            case case_2
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~k ) @ #k.1 )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~k ) @ #k.1 )
              qed
            qed
          qed
        qed
      qed
    next
      case session_case_3
      solve( (last(#i))  ∥
             (∀ #k.1. (!KU( f5(~k, ~RAND) ) @ #k.1) ⇒ last(#k.1)) )
        case case_1
        solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
          case supi_supply_case_1
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~sqn ) @ #i )
          qed
        next
          case supi_supply_case_2
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~sqn ) @ #i )
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥ (∀ #k.1. (!KU( ~k ) @ #k.1) ⇒ last(#k.1)) )
          case case_1
          solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
            case supi_supply_case_1
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~sqn ) @ #i )
            qed
          next
            case supi_supply_case_2
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~sqn ) @ #i )
            qed
          qed
        next
          case case_2
          solve( (last(#i))  ∥ (∀ #k. (!KU( ~supi ) @ #k) ⇒ last(#k)) )
            case case_1
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~sqn ) @ #i )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~sqn ) @ #i )
              qed
            qed
          next
            case case_2
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( ~sqn ) @ #k.1 )
                  case session
                  by contradiction /* cyclic */
                qed
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( ~sqn ) @ #k.1 )
                  case session
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case session_case_4
      solve( (last(#i))  ∥
             (∀ #k.1. (!KU( f5(~k, ~RAND) ) @ #k.1) ⇒ last(#k.1)) )
        case case_1
        solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
          case supi_supply_case_1
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~supi ) @ #i )
          qed
        next
          case supi_supply_case_2
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~supi ) @ #i )
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥ (∀ #k.1. (!KU( ~k ) @ #k.1) ⇒ last(#k.1)) )
          case case_1
          solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
            case supi_supply_case_1
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~supi ) @ #i )
            qed
          next
            case supi_supply_case_2
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~supi ) @ #i )
            qed
          qed
        next
          case case_2
          solve( (last(#i))  ∥ (∀ #k. (!KU( ~sqn ) @ #k) ⇒ last(#k)) )
            case case_1
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~supi ) @ #i )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~supi ) @ #i )
              qed
            qed
          next
            case case_2
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( ~supi ) @ #k.1 )
                  case session
                  by solve( !KU( ~sk_HN ) @ #vk )
                qed
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( ~supi ) @ #k.1 )
                  case session
                  by solve( !KU( ~sk_HN ) @ #vk )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma mainSourceLemma [left, use_induction, sources]:
  all-traces "∀ t #i. (Secret( t ) @ #i) ⇒ (¬(∃ #k. !KU( t ) @ #k))"
/*
guarded formula characterizing all counter-examples:
"∃ t #i. (Secret( t ) @ #i) ∧ ∃ #k. (!KU( t ) @ #k)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥ (∀ #k. (!KU( t ) @ #k) ⇒ last(#k)) )
    case case_1
    solve( Secret( t ) @ #i )
      case session_case_1
      solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
        case supi_supply_case_1
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          solve( !KU( f5(~k, ~RAND) ) @ #k.1 )
            case c_f5
            by solve( !KU( ~k ) @ #vk )
          qed
        qed
      next
        case supi_supply_case_2
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          solve( !KU( f5(~k, ~RAND) ) @ #k.1 )
            case c_f5
            by solve( !KU( ~k ) @ #vk )
          qed
        qed
      qed
    next
      case session_case_2
      solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
        case supi_supply_case_1
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~k ) @ #k.1 )
        qed
      next
        case supi_supply_case_2
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~k ) @ #k.1 )
        qed
      qed
    next
      case session_case_3
      solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
        case supi_supply_case_1
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~sqn ) @ #k.1 )
        qed
      next
        case supi_supply_case_2
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~sqn ) @ #k.1 )
        qed
      qed
    next
      case session_case_4
      solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
        case supi_supply_case_1
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~supi ) @ #k.1 )
        qed
      next
        case supi_supply_case_2
        solve( !Pk( pk_HN ) ▶₁ #i )
          case init_homeNet
          by solve( !KU( ~supi ) @ #k.1 )
        qed
      qed
    qed
  next
    case case_2
    solve( Secret( t ) @ #i )
      case session_case_1
      solve( (last(#i))  ∥ (∀ #k.1. (!KU( ~k ) @ #k.1) ⇒ last(#k.1)) )
        case case_1
        solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
          case supi_supply_case_1
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( f5(~k, ~RAND) ) @ #i )
          qed
        next
          case supi_supply_case_2
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( f5(~k, ~RAND) ) @ #i )
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥ (∀ #k. (!KU( ~sqn ) @ #k) ⇒ last(#k)) )
          case case_1
          solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
            case supi_supply_case_1
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( f5(~k, ~RAND) ) @ #i )
            qed
          next
            case supi_supply_case_2
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( f5(~k, ~RAND) ) @ #i )
            qed
          qed
        next
          case case_2
          solve( (last(#i))  ∥ (∀ #k. (!KU( ~supi ) @ #k) ⇒ last(#k)) )
            case case_1
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( f5(~k, ~RAND) ) @ #i )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( f5(~k, ~RAND) ) @ #i )
              qed
            qed
          next
            case case_2
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( f5(~k, ~RAND) ) @ #k.1 )
                  case c_f5
                  by contradiction /* cyclic */
                next
                  case session
                  by contradiction /* cyclic */
                qed
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( f5(~k, ~RAND) ) @ #k.1 )
                  case c_f5
                  by contradiction /* cyclic */
                next
                  case session
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case session_case_2
      solve( (last(#i))  ∥
             (∀ #k.1. (!KU( f5(~k, ~RAND) ) @ #k.1) ⇒ last(#k.1)) )
        case case_1
        solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
          case supi_supply_case_1
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~k ) @ #i )
          qed
        next
          case supi_supply_case_2
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~k ) @ #i )
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥ (∀ #k. (!KU( ~sqn ) @ #k) ⇒ last(#k)) )
          case case_1
          solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
            case supi_supply_case_1
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~k ) @ #i )
            qed
          next
            case supi_supply_case_2
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~k ) @ #i )
            qed
          qed
        next
          case case_2
          solve( (last(#i))  ∥ (∀ #k. (!KU( ~supi ) @ #k) ⇒ last(#k)) )
            case case_1
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~k ) @ #i )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~k ) @ #i )
              qed
            qed
          next
            case case_2
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~k ) @ #k.1 )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~k ) @ #k.1 )
              qed
            qed
          qed
        qed
      qed
    next
      case session_case_3
      solve( (last(#i))  ∥
             (∀ #k.1. (!KU( f5(~k, ~RAND) ) @ #k.1) ⇒ last(#k.1)) )
        case case_1
        solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
          case supi_supply_case_1
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~sqn ) @ #i )
          qed
        next
          case supi_supply_case_2
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~sqn ) @ #i )
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥ (∀ #k.1. (!KU( ~k ) @ #k.1) ⇒ last(#k.1)) )
          case case_1
          solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
            case supi_supply_case_1
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~sqn ) @ #i )
            qed
          next
            case supi_supply_case_2
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~sqn ) @ #i )
            qed
          qed
        next
          case case_2
          solve( (last(#i))  ∥ (∀ #k. (!KU( ~supi ) @ #k) ⇒ last(#k)) )
            case case_1
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~sqn ) @ #i )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~sqn ) @ #i )
              qed
            qed
          next
            case case_2
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( ~sqn ) @ #k.1 )
                  case session_case_1
                  by contradiction /* cyclic */
                next
                  case session_case_2
                  by contradiction /* cyclic */
                qed
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( ~sqn ) @ #k.1 )
                  case session_case_1
                  by contradiction /* cyclic */
                next
                  case session_case_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case session_case_4
      solve( (last(#i))  ∥
             (∀ #k.1. (!KU( f5(~k, ~RAND) ) @ #k.1) ⇒ last(#k.1)) )
        case case_1
        solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
          case supi_supply_case_1
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~supi ) @ #i )
          qed
        next
          case supi_supply_case_2
          solve( !Pk( pk_HN ) ▶₁ #i )
            case init_homeNet
            by solve( !KU( ~supi ) @ #i )
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥ (∀ #k.1. (!KU( ~k ) @ #k.1) ⇒ last(#k.1)) )
          case case_1
          solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
            case supi_supply_case_1
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~supi ) @ #i )
            qed
          next
            case supi_supply_case_2
            solve( !Pk( pk_HN ) ▶₁ #i )
              case init_homeNet
              by solve( !KU( ~supi ) @ #i )
            qed
          qed
        next
          case case_2
          solve( (last(#i))  ∥ (∀ #k. (!KU( ~sqn ) @ #k) ⇒ last(#k)) )
            case case_1
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~supi ) @ #i )
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                by solve( !KU( ~supi ) @ #i )
              qed
            qed
          next
            case case_2
            solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i )
              case supi_supply_case_1
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( ~supi ) @ #k.1 )
                  case session_case_1
                  by solve( !KU( ~sk_HN ) @ #vk )
                next
                  case session_case_2
                  by solve( !KU( ~sk_HN ) @ #vk )
                qed
              qed
            next
              case supi_supply_case_2
              solve( !Pk( pk_HN ) ▶₁ #i )
                case init_homeNet
                solve( !KU( ~supi ) @ #k.1 )
                  case session_case_1
                  by solve( !KU( ~sk_HN ) @ #vk )
                next
                  case session_case_2
                  by solve( !KU( ~sk_HN ) @ #vk )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executable [right]:
  exists-trace
  "∃ s1 s2 #i1 #i2.
    ((Executable( s1 ) @ #i1) ∧ (Executable( s2 ) @ #i2)) ∧
    (#i1 < #i2)"
/*
guarded formula characterizing all satisfying traces:
"∃ s1 s2 #i1 #i2.
  (Executable( s1 ) @ #i1) ∧ (Executable( s2 ) @ #i2) ∧ #i1 < #i2"
*/
simplify
solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i1 )
  case supi_supply_case_1
  solve( !Pk( pk_HN ) ▶₁ #i1 )
    case init_homeNet
    solve( UE( <~supi.1, ~sqn.1, ~k.1> ) ▶₀ #i2 )
      case supi_supply_case_2
      solve( !Pk( pk_HN ) ▶₁ #i2 )
        case init_homeNet
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma executable [left]:
  exists-trace
  "∃ s1 s2 #i1 #i2.
    ((Executable( s1 ) @ #i1) ∧ (Executable( s2 ) @ #i2)) ∧
    (#i1 < #i2)"
/*
guarded formula characterizing all satisfying traces:
"∃ s1 s2 #i1 #i2.
  (Executable( s1 ) @ #i1) ∧ (Executable( s2 ) @ #i2) ∧ #i1 < #i2"
*/
simplify
solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i1 )
  case supi_supply_case_1
  solve( !Pk( pk_HN ) ▶₁ #i1 )
    case init_homeNet
    solve( UE( <~supi.1, ~sqn.1, ~k.1> ) ▶₀ #i2 )
      case supi_supply_case_2
      solve( !Pk( pk_HN ) ▶₁ #i2 )
        case init_homeNet
        SOLVED // trace found
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_adec
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( aenc(x, pk(x.1)) ) ▶₀ #i ) )
      case init_homeNet
      by step( contradiction /* impossible chain */ )
    next
      case session_case_1
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case aenc
            by step( solve( !KU( ~sk_HN ) @ #vk ) )
          next
            case d_0_adec
            by step( contradiction /* impossible chain */ )
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case aenc
            by step( solve( !KU( ~sk_HN ) @ #vk ) )
          next
            case d_0_adec
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case session_case_2
      by step( contradiction /* impossible chain */ )
    next
      case session_case_3
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( aenc(x, pk(x.1)) ) ▶₀ #i ) )
      case init_homeNet
      by step( contradiction /* impossible chain */ )
    next
      case session_case_1
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case aenc
            by step( solve( !KU( ~sk_HN ) @ #vk ) )
          next
            case d_0_adec
            by step( contradiction /* impossible chain */ )
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case aenc
            by step( solve( !KU( ~sk_HN ) @ #vk ) )
          next
            case d_0_adec
            by step( contradiction /* impossible chain */ )
          qed
        qed
      qed
    next
      case session_case_2
      by step( contradiction /* impossible chain */ )
    next
      case session_case_3
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case init_homeNet
      by step( contradiction /* impossible chain */ )
    next
      case session_case_1
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_adec
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( contradiction /* impossible chain */ )
            next
              case pair
              by step( solve( !KU( ~sk_HN ) @ #vk ) )
            qed
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_adec
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( contradiction /* impossible chain */ )
            next
              case pair
              by step( solve( !KU( ~sk_HN ) @ #vk ) )
            qed
          qed
        qed
      qed
    next
      case session_case_2
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
            next
              case pair
              MIRRORED
            qed
          next
            case pair
            MIRRORED
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
            next
              case pair
              MIRRORED
            qed
          next
            case pair
            MIRRORED
          qed
        qed
      qed
    next
      case session_case_3
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case init_homeNet
      by step( contradiction /* impossible chain */ )
    next
      case session_case_1
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_adec
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( contradiction /* impossible chain */ )
            next
              case pair
              by step( solve( !KU( ~sk_HN ) @ #vk ) )
            qed
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_adec
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( contradiction /* impossible chain */ )
            next
              case pair
              by step( solve( !KU( ~sk_HN ) @ #vk ) )
            qed
          qed
        qed
      qed
    next
      case session_case_2
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
            next
              case pair
              MIRRORED
            qed
          next
            case pair
            MIRRORED
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
            next
              case pair
              MIRRORED
            qed
          next
            case pair
            MIRRORED
          qed
        qed
      qed
    next
      case session_case_3
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case init_homeNet
      by step( contradiction /* impossible chain */ )
    next
      case session_case_1
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_adec
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( contradiction /* impossible chain */ )
            next
              case pair
              by step( solve( !KU( ~sk_HN ) @ #vk ) )
            qed
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_adec
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( contradiction /* impossible chain */ )
            next
              case pair
              by step( solve( !KU( ~sk_HN ) @ #vk ) )
            qed
          qed
        qed
      qed
    next
      case session_case_2
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
            next
              case pair
              MIRRORED
            qed
          next
            case pair
            MIRRORED
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
            next
              case pair
              MIRRORED
            qed
          next
            case pair
            MIRRORED
          qed
        qed
      qed
    next
      case session_case_3
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case init_homeNet
      by step( contradiction /* impossible chain */ )
    next
      case session_case_1
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_adec
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( contradiction /* impossible chain */ )
            next
              case pair
              by step( solve( !KU( ~sk_HN ) @ #vk ) )
            qed
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_adec
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( contradiction /* impossible chain */ )
            next
              case pair
              by step( solve( !KU( ~sk_HN ) @ #vk ) )
            qed
          qed
        qed
      qed
    next
      case session_case_2
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #vr ) )
          case supi_supply_case_1
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
            next
              case pair
              MIRRORED
            qed
          next
            case pair
            MIRRORED
          qed
        next
          case supi_supply_case_2
          step( solve( (#vl, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( contradiction /* impossible chain */ )
          next
            case d_0_snd
            step( solve( (#vr.3, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
            next
              case pair
              MIRRORED
            qed
          next
            case pair
            MIRRORED
          qed
        qed
      qed
    next
      case session_case_3
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_union
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case init_homeNet
      by step( contradiction /* impossible chain */ )
    next
      case session_case_1
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        by step( contradiction /* impossible chain */ )
      qed
    next
      case session_case_2
      by step( contradiction /* impossible chain */ )
    next
      case session_case_3
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case init_homeNet
      by step( contradiction /* impossible chain */ )
    next
      case session_case_1
      step( solve( !Pk( pk_HN ) ▶₁ #vr ) )
        case init_homeNet
        by step( contradiction /* impossible chain */ )
      qed
    next
      case session_case_2
      by step( contradiction /* impossible chain */ )
    next
      case session_case_3
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_xor
  by sorry
next
  case Rule_Equality
  by sorry // removed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_init_homeNet
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_session
  backward-search
    case LHS
    step( simplify )
    step( solve( !Pk( pk_HN ) ▶₁ #i ) )
      case init_homeNet
      step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i ) )
        case supi_supply_case_1
        MIRRORED
      next
        case supi_supply_case_2
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Pk( pk_HN ) ▶₁ #i ) )
      case init_homeNet
      step( solve( UE( <~supi, ~sqn, ~k> ) ▶₀ #i ) )
        case supi_supply_case_1
        MIRRORED
      next
        case supi_supply_case_2
        MIRRORED
      qed
    qed
  qed
next
  case Rule_supi_supply
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
qed

end