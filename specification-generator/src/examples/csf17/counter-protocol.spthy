/*
 * Protocol:    Counter-based detection example
 * Modeler:     Kevin Milner
 * Date:        May 2016
 * Source:      Original
 */

theory counter_example
begin
heuristic: I
builtins: signing, hashing
functions: S/1

restriction Eq_testing: "All x y #i. Eq(x,y) @ i ==> x = y"
restriction InEq_testing: "All x y #i. InEq(x,y) @ i ==> not(x = y)"

//There's one id, per role, per direction.
restriction pairings_unique:
    "All id1 id2 role ki kr #i #j.
        Paired(id1,role,ki,kr) @ i & Paired(id2,role,ki,kr) @ j
    ==> #i = #j"

rule RegisterKey:
    [ Fr(~ltkA) ]
  --[ Key(~ltkA) ]->
    [ !F_AgentKey(~ltkA), Out(pk(~ltkA)) ]

rule CompromiseKey:
    [ !F_AgentKey(~ltk) ]
  --[ Compromise(pk(~ltk)) ]->
    [ Out(~ltk) ]

/* Models an agent adding anothers public key out-of-band, we assume
 * that all relationships set up this way are 'sane' in that both of the
 * keys involved were generated fresh. */
rule BindState_Init:
    [ !F_AgentKey(~ltkA)
    , !F_AgentKey(~ltkB)
    , Fr(~id)
    ]--[
      Paired(~id, 'I', ~ltkA, ~ltkB)
    , Counter(~id, '0')
    , F_InvariantSource_I(~id,~ltkA,pk(~ltkB))
    ]->
    [ /* For search efficiency, state is divided into
       * an invariant portion and a variant portion. This
       * allows tamarin to immediately bind the keys back
       * to this initial pairing rule. The fresh ~id is used
       * to identify this pairing. */
      St_I(~id, ~ltkA, pk(~ltkB), 'm0', '0')
    ]

rule BindState_Resp:
    [ !F_AgentKey(~ltkA)
    , !F_AgentKey(~ltkB)
    , Fr(~id)
    ]--[
      Paired(~id, 'R', ~ltkA, ~ltkB)
    , Counter(~id, '0')
    , F_InvariantSource_R(~id,~ltkA,pk(~ltkB))
    ]->
    [ St_R(~id, ~ltkA, pk(~ltkB), 'm1', '0')
    ]

//////////////////////////////////////////
//   Message rules
rule I_m0:
    [ St_I(~id, ~ltkI, pkR, 'm0', ic)
    , Fr(~ni)
    ]--[
      Begin('I', <pk(~ltkI),pkR>, S(ic))
    , Counter(<~id,'m0'>, ic)
    , Gen(~ni)
    , Injectivity(~id,ic,~ni)

    , Invariant_I(~id,~ltkI,pkR)
    ]->
    [ St_I(~id, ~ltkI, pkR, <'m2',~ni>, ic)
    , Out(~ni)
    ]

rule R_m1:
    let m1 = <'1', pk(~ltkR), pkI, ni, ~nr, S(rc)> in
    [ St_R(~id, ~ltkR, pkI, 'm1', rc)
    , Fr(~nr)
    , In(ni)
    ]--[
      Begin('R', <pkI,pk(~ltkR)>, S(rc))
    , Counter(<~id,'m1'>, rc)
    , Nonces(~id,ni,~nr)
    , Gen(~nr)
    , Injectivity(~id,rc,~nr)

    , Invariant_R(~id,~ltkR,pkI)
    ]->
    [ St_R(~id, ~ltkR, pkI, <'m2', ni, ~nr>, S(rc))
    , Out(<m1, sign{m1}~ltkR>) 
    ]

rule I_m2:
    let m1 = <'1', pkR, pk(~ltkI), ni, nr, src>
        m2 = <'2', pk(~ltkI), pkR, ni, nr, src> in
    [ St_I(~id, ~ltkI, pkR, <'m2', ni>, ic)
    , In(<m1, sig>) 
    ]--[
      Eq(verify(sig,m1,pkR), true)
    , Eq(S(ic),src)
    , Counter(~id,S(ic))
    , Nonces(~id,ni,nr)
    , Session('I', <pk(~ltkI),pkR>, <ni, nr>, src)
    , Injectivity(~id,ni,S(ic))

    , Invariant_I(~id,~ltkI,pkR)
    ]->
    [ St_I(~id, ~ltkI, pkR, 'm0', S(ic))
    , Out(<m2, sign{m2}~ltkI>) 
    ]  


rule I_detect:
    let m1 = <'1', pkR, pk(~ltkI), ni, nr, src>
        m2 = <'2', pk(~ltkI), pkR, ni, nr, src> in
    [ St_I(~id, ~ltkI, pkR, <'m2', ni>, ic)
    , In(<m1, sig>) 
    ]--[
      Eq(verify(sig,m1,pkR), true)
    , InEq(S(ic),src)
    , Detect(<pk(~ltkI),pkR>)
    , Counter(~id,S(ic))
    , Nonces(~id,ni,nr)
    , Session('I', <pk(~ltkI),pkR>, <ni, nr>, src)
    , Injectivity(~id,ni,S(ic))

    , Invariant_I(~id,~ltkI,pkR)
    ]->
    [ Remediate_Compromise(~id, ~ltkI, pkR, 'm0', S(ic))
    , Out(<m2, sign{m2}~ltkI>) 
    ]  

/*
rule R_detect:
    let m2 = <'2', pkI, pk(~ltkR), ni, nr, sic> in
    [ St_R(~id, ~ltkR, pkI, <'m2', ni, nr>, rc)
    , Fr(~inj)
    , In(<m2, sig>) 
    ]--[
      Eq(verify(sig,m2,pkI), true)
    , InEq(S(rc), sic)
    , Detect(<pkI,pk(~ltkR)>)
    , Session('R', <pkI,pk(~ltkR)>, <ni,nr>, sic)
    , Counter(~id,S(rc))
    , Injectivity(~id,nr,S(rc))

    , Invariant_R(~id,~ltkR,pkI)
    ]->
    [ Remediate_Compromise(~id, ~ltkR, pkI, 'm1', S(rc))
    ]
*/
rule R_m2:
    let m2 = <'2', pkI, pk(~ltkR), ni, nr, src> in
    [ St_R(~id, ~ltkR, pkI, <'m2', ni, nr>, src)
    , Fr(~inj)
    , In(<m2, sig>)
    ]--[
      Eq(verify(sig,m2,pkI), true)
    , Completed(~id)
    , Session('R', <pkI,pk(~ltkR)>, <ni,nr>, src)
    , Counter(~id,src)
    , Injectivity(~id,nr,src)

    , Invariant_R(~id,~ltkR,pkI)
    ]->
    [ St_R(~id, ~ltkR, pkI, 'm1', src)
    ]



//////////////////////////////////////////
//   Helper Lemmas:
lemma invariant_sources[sources]:
    "(All id ka kb #i.
        Invariant_I(id,ka,kb) @ i
    ==> Ex #j. F_InvariantSource_I(id,ka,kb) @ j & #j < #i)
    &(All id ka kb #i.
        Invariant_R(id,ka,kb) @ i
    ==> Ex #j. F_InvariantSource_R(id,ka,kb) @ j & #j < #i)"

lemma count_unique[reuse, use_induction]:
    "All id c #i #j.
        Counter(id,c) @ i & Counter(id,c) @ j
    ==> #i = #j"

lemma nonces_unique[reuse, use_induction]:
    "All id ni nr #i #j.
        Nonces(id,ni,nr) @ i & Nonces(id,ni,nr) @ j
    ==> #i = #j"

lemma force_nonce_ordering[reuse]:
    "(All role pks ni nr c #i #j.
        Session(role, pks, <ni,nr>, c) @ i & Gen(ni) @ j
    ==> #j < #i)
    &(All role pks ni nr c #i #j.
        Session(role, pks, <ni,nr>, c) @ i & Gen(nr) @ j
    ==> #j < #i)
    &(All id ni nr #i #j.
        Nonces(id, ni, nr) @ i & Gen(ni) @ j
    ==> #j < #i)"


//////////////////////////////////////////
//   Trace existence
lemma exists_session: exists-trace
    "Ex pks nonces c #t0 #t1. #t0 < #t1 &
        Session('I', pks, nonces, c) @ t0
        & Session('R', pks, nonces, c) @ t1
        & not(Ex #k key. Compromise(key) @ k) & not(Ex #k. Detect(pks) @ k)"

lemma exists_second_session: exists-trace
    "Ex pks nonces nonces2 c #t0 #t1 #t2 #t3. #t0 < #t2 & #t1 < #t3 & c = S('0') &
        Session('I',pks,nonces,c) @ t0
        & Session('R',pks,nonces,c) @ t1
      & Session('I',pks,nonces2,S(c)) @ t2
        & Session('R',pks,nonces2,S(c)) @ t3
        & not(Ex #k key. Compromise(key) @ k) & not(Ex #k. Detect(pks) @ k)"

lemma exists_detect_no_R_compromise: exists-trace
    "Ex ki kr  #i.
        Detect(<ki,kr>) @ i & not(Ex #j. Compromise(kr) @ j)"


lemma exists_detect_no_I_compromise: exists-trace
    "Ex ki kr  #i.
        Detect(<ki,kr>) @ i & not(Ex #j. Compromise(ki) @ j)"

//////////////////////////////////////////
//   Additional helper lemma for injectivity

lemma injectivity[reuse]:
    "All id n1 n2 n3 #i #j on1 on2 #k.
        //Injective facts that are linked by n2
        Injectivity(id,n1,n2) @ i & Injectivity(id,n2,n3) @ j
        //And some other injective fact with the same id with relation to j
        & Injectivity(id,on1,on2) @ k & #k < #j
    ==> //can't be in between (might be equal to #i, though)
        not(#i < #k)"

//////////////////////////////////////////
//  Trace properties
lemma detect_sound:
    "All ki kr #t1.
        Detect(<ki, kr>) @ t1
    ==> (Ex #t0. #t0 < #t1 & Compromise(ki) @ t0)
        | (Ex #t0. #t0 < #t1 & Compromise(kr) @ t0)"

//Protocol Property without compromise
lemma correct_dolevyao:
    "All pks nonces c #t1.
        Session('R',pks,nonces,c) @ t1 & not(Ex k #tc. Compromise(k) @ tc)
    ==> Ex #t0. #t0 < #t1 & 
            Session('I',pks,nonces,c) @ t0"

lemma unmatching_implies_detect_with_R_uncompromised[use_induction]:
    "All keys nonces1 nonces2 c1 c2 #t1 #t2 #t3.
        #t1 < #t3 &
        //Given an matching session
        Begin('R', keys, c2) @ t3
        & Session('I', keys, nonces2, c2) @ t2
        //Where detection did not occur
        & not(Detect(keys) @ t2)
        //Then for all sessions before that
        & Session('R', keys, nonces1, c1) @ t1
    ==> //Either that session was also matching
        (Ex #t0. Session('I', keys, nonces1, c1) @ t0)
        //Or I's key was compromised
        | (Ex i r #tc. (keys = <i,r>) & Compromise(i) @ tc)" 

end
