package theta

import . "wireguard-gobra/wireguard/verification/term"

type Theta domain {
    // this domain models the theta function. 
    // note that this encoding does not respect the changing set of dom(theta) as done in the IO spec

    // for initiator
    func getPP(Theta) Term
    func getKI(Theta) Term
    func getPkR(Theta) Term
    func getPsk(Theta) Term
    func getEkI(Theta) Term
    func getTs(Theta) Term
    func getMac1I(Theta) Term
    func getMac2I(Theta) Term
    func getC3(Theta) Term
    func getH4(Theta) Term
    func getSidR(Theta) Term
    func getEpkR(Theta) Term
    func getCEmpty(Theta) Term
    func getMac1R(Theta) Term
    func getMac2R(Theta) Term
    func getKIR(Theta) Term
    func getKRI(Theta) Term
    func getP(Theta) Term
    func getNIR(Theta) uint64
    func getNIRTerm(Theta) Term
    func getNRI(Theta) uint64
    func getNRITerm(Theta) Term

    // for responder
    func getKR(Theta) Term
    func getPkI(Theta) Term
    func getSidI(Theta) Term
    // func getPsk(Theta) Term
    func getEkR(Theta) Term
    func getEpkI(Theta) Term
    // func getTs(Theta) Term
    // func getMac1I(Theta) Term
    // func getMac2I(Theta) Term
    // func getC3(Theta) Term
    // func getH4(Theta) Term
    // func getMac1R(Theta) Term
    // func getMac2R(Theta) Term
    // func getKIR(Theta) Term
    // func getKRI(Theta) Term
    // func getP(Theta) Term
    // func getNRI(Theta) Term
    // func getNIR(Theta) Term


    // theta constructors to easily create a theta function in the implementation
    func createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I Term) Theta
    func createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI Term) Theta
    func createThetaI3(pp, kIR, kRI, p, sidR Term) Theta
    func createThetaI4(pp, kIR, kRI, p, sidR Term, nIR uint64) Theta
    func createThetaI5(pp, kIR, kRI, nRITerm, p Term) Theta

    func createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I Term) Theta
    func createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI Term) Theta
    func createThetaR3(pp, kIR, kRI, sidI, p Term) Theta
    func createThetaR4(pp, kIR, kRI, sidI, p Term, nRI uint64) Theta
    func createThetaR5(pp, kIR, kRI, sidI, p, nIR Term) Theta

    // axioms to connect constructors' parameters to getter functions
    // createThetaI1
    axiom {
        forall pp, kI, pkR, psk, ekI, ts, mac1I, mac2I Term :: { createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I) } getPP(createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I)) == pp &&
            getKI(createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I)) == kI &&
            getPkR(createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I)) == pkR &&
            getPsk(createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I)) == psk &&
            getEkI(createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I)) == ekI &&
            getTs(createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I)) == ts &&
            getMac1I(createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I)) == mac1I &&
            getMac2I(createThetaI1(pp, kI, pkR, psk, ekI, ts, mac1I, mac2I)) == mac2I
    }

    // createThetaI2
    axiom {
        forall pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI Term :: { createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI) } getPP(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == pp &&
            getKI(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == kI &&
            getPkR(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == pkR &&
            getPsk(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == psk &&
            getEkI(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == ekI &&
            getC3(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == c3 &&
            getH4(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == h4 &&
            getSidR(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == sidR &&
            getEpkR(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == epkR &&
            getCEmpty(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == cEmpty &&
            getMac1R(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == mac1R &&
            getMac2R(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == mac2R &&
            getKIR(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == kIR &&
            getKRI(createThetaI2(pp, kI, pkR, psk, ekI, c3, h4, sidR, epkR, cEmpty, mac1R, mac2R, kIR, kRI)) == kRI
    }

    // createThetaI3
    axiom {
        forall pp, kIR, kRI, p, sidR Term :: { createThetaI3(pp, kIR, kRI, p, sidR) } getPP(createThetaI3(pp, kIR, kRI, p, sidR)) == pp &&
            getKIR(createThetaI3(pp, kIR, kRI, p, sidR)) == kIR &&
            getKRI(createThetaI3(pp, kIR, kRI, p, sidR)) == kRI &&
            getP(createThetaI3(pp, kIR, kRI, p, sidR)) == p &&
            getSidR(createThetaI3(pp, kIR, kRI, p, sidR)) == sidR
    }

    // createThetaI4
    axiom {
        forall pp, kIR, kRI, p, sidR Term, nIR uint64 :: { createThetaI4(pp, kIR, kRI, p, sidR, nIR) } getPP(createThetaI4(pp, kIR, kRI, p, sidR, nIR)) == pp &&
            getKIR(createThetaI4(pp, kIR, kRI, p, sidR, nIR)) == kIR &&
            getKRI(createThetaI4(pp, kIR, kRI, p, sidR, nIR)) == kRI &&
            getP(createThetaI4(pp, kIR, kRI, p, sidR, nIR)) == p &&
            getSidR(createThetaI4(pp, kIR, kRI, p, sidR, nIR)) == sidR &&
            getNIR(createThetaI4(pp, kIR, kRI, p, sidR, nIR)) == nIR
    }

    // createThetaI5
    axiom {
        forall pp, kIR, kRI, nRITerm, p Term :: { createThetaI5(pp, kIR, kRI, nRITerm, p) } getPP(createThetaI5(pp, kIR, kRI, nRITerm, p)) == pp &&
            getKIR(createThetaI5(pp, kIR, kRI, nRITerm, p)) == kIR &&
            getKRI(createThetaI5(pp, kIR, kRI, nRITerm, p)) == kRI &&
            getNRITerm(createThetaI5(pp, kIR, kRI, nRITerm, p)) == nRITerm &&
            getP(createThetaI5(pp, kIR, kRI, nRITerm, p)) == p
    }

    // createThetaR1
    axiom {
        forall pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I Term :: { createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I) } getPP(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == pp &&
            getKR(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == kR &&
            getPkI(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == pkI &&
            getSidI(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == sidI &&
            getPsk(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == psk &&
            getEkR(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == ekR &&
            getEpkI(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == epkI &&
            getTs(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == ts &&
            getMac1I(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == mac1I &&
            getMac2I(createThetaR1(pp, kR, pkI, sidI, psk, ekR, epkI, ts, mac1I, mac2I)) == mac2I
    }

    // createThetaR2
    axiom {
        forall pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI Term :: { createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI) } getPP(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == pp &&
            getKR(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == kR &&
            getPkI(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == pkI &&
            getPsk(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == psk &&
            getEkR(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == ekR &&
            getEpkI(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == epkI &&
            getC3(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == c3 &&
            getH4(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == h4 &&
            getSidI(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == sidI &&
            getMac1R(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == mac1R &&
            getMac2R(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == mac2R &&
            getKIR(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == kIR &&
            getKRI(createThetaR2(pp, kR, pkI, psk, ekR, epkI, c3, h4, sidI, mac1R, mac2R, kIR, kRI)) == kRI
    }

    // createThetaR3
    axiom {
        forall pp, kIR, kRI, sidI, p Term :: { createThetaR3(pp, kIR, kRI, sidI, p) } getPP(createThetaR3(pp, kIR, kRI, sidI, p)) == pp &&
            getKIR(createThetaR3(pp, kIR, kRI, sidI, p)) == kIR &&
            getKRI(createThetaR3(pp, kIR, kRI, sidI, p)) == kRI &&
            getSidI(createThetaR3(pp, kIR, kRI, sidI, p)) == sidI &&
            getP(createThetaR3(pp, kIR, kRI, sidI, p)) == p
    }

    // createThetaR4
    axiom {
        forall pp, kIR, kRI, sidI, p Term, nRI uint64 :: { createThetaR4(pp, kIR, kRI, sidI, p, nRI) } getPP(createThetaR4(pp, kIR, kRI, sidI, p, nRI)) == pp &&
            getKIR(createThetaR4(pp, kIR, kRI, sidI, p, nRI)) == kIR &&
            getKRI(createThetaR4(pp, kIR, kRI, sidI, p, nRI)) == kRI &&
            getSidI(createThetaR4(pp, kIR, kRI, sidI, p, nRI)) == sidI &&
            getP(createThetaR4(pp, kIR, kRI, sidI, p, nRI)) == p &&
            getNRI(createThetaR4(pp, kIR, kRI, sidI, p, nRI)) == nRI
    }

    // createThetaR5
    axiom {
        forall pp, kIR, kRI, sidI, p, nIR Term :: { createThetaR5(pp, kIR, kRI, sidI, p, nIR) } getPP(createThetaR5(pp, kIR, kRI, sidI, p, nIR)) == pp &&
            getKIR(createThetaR5(pp, kIR, kRI, sidI, p, nIR)) == kIR &&
            getKRI(createThetaR5(pp, kIR, kRI, sidI, p, nIR)) == kRI &&
            getSidI(createThetaR5(pp, kIR, kRI, sidI, p, nIR)) == sidI &&
            getP(createThetaR5(pp, kIR, kRI, sidI, p, nIR)) == p &&
            getNIRTerm(createThetaR5(pp, kIR, kRI, sidI, p, nIR)) == nIR
    }
}
