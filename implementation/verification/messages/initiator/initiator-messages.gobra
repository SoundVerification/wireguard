package messageInitiator

import by "wireguard-gobra/wireguard/verification/bytes"
import ft "wireguard-gobra/wireguard/verification/fact"
import tm "wireguard-gobra/wireguard/verification/term"

// messages defined on Bytes
ghost
ensures res == by.expB(by.generatorB(), kI)
pure func Bytes_pkI(kI by.Bytes) (res by.Bytes) {
	return by.expB(by.generatorB(), kI)
}

ghost
ensures res == by.expB(by.generatorB(), ekI)
pure func Bytes_epkI(ekI by.Bytes) (res by.Bytes) {
	return by.expB(by.generatorB(), ekI)
}

ghost
ensures res == by.hashB(by.infoBytesB())
pure func Bytes_c0() (res by.Bytes) {
	return by.hashB(by.infoBytesB())
}

ghost
ensures res == by.hashB(by.tuple2B(Bytes_c0(), by.prologueBytesB()))
pure func Bytes_h0() (res by.Bytes) {
	return by.hashB(by.tuple2B(Bytes_c0(), by.prologueBytesB()))
}

ghost
ensures res == by.hashB(by.tuple2B(Bytes_h0(), pkR))
pure func Bytes_h1(pkR by.Bytes) (res by.Bytes) {
	return by.hashB(by.tuple2B(Bytes_h0(), pkR))
}

ghost
ensures res == by.kdf1B(by.tuple2B(Bytes_c0(), Bytes_epkI(ekI)))
pure func Bytes_c1(ekI by.Bytes) (res by.Bytes) {
	return by.kdf1B(by.tuple2B(Bytes_c0(), Bytes_epkI(ekI)))
}

ghost
ensures res == by.hashB(by.tuple2B(Bytes_h1(pkR),Bytes_epkI(ekI)))
pure func Bytes_h2(pkR, ekI by.Bytes) (res by.Bytes) {
	return by.hashB(by.tuple2B(Bytes_h1(pkR),Bytes_epkI(ekI)))
}

ghost
ensures res == by.kdf1B(by.tuple2B(Bytes_c1(ekI), by.expB(pkR, ekI)))
pure func Bytes_c2(pkR, ekI by.Bytes) (res by.Bytes) {
	return by.kdf1B(by.tuple2B(Bytes_c1(ekI), by.expB(pkR, ekI)))
}

ghost
ensures res == by.kdf2B(by.tuple2B(Bytes_c1(ekI), by.expB(pkR, ekI)))
pure func Bytes_k1(pkR, ekI by.Bytes) (res by.Bytes) {
	return by.kdf2B(by.tuple2B(Bytes_c1(ekI), by.expB(pkR, ekI)))
}

ghost
ensures res == by.aeadB(Bytes_k1(pkR, ekI), by.zeroStringB(12), Bytes_pkI(kI), Bytes_h2(pkR, ekI))
pure func Bytes_c_pkI(kI, pkR, ekI by.Bytes) (res by.Bytes) {
	return by.aeadB(Bytes_k1(pkR, ekI), by.zeroStringB(12), Bytes_pkI(kI), Bytes_h2(pkR, ekI))
}

ghost
ensures res == by.hashB(by.tuple2B(Bytes_h2(pkR, ekI), Bytes_c_pkI(kI, pkR, ekI)))
pure func Bytes_h3(kI, pkR, ekI by.Bytes) (res by.Bytes) {
	return by.hashB(by.tuple2B(Bytes_h2(pkR, ekI), Bytes_c_pkI(kI, pkR, ekI)))
}

ghost
ensures res == by.kdf1B(by.tuple2B(Bytes_c2(pkR, ekI), by.expB(pkR, kI)))
pure func Bytes_c3(kI, pkR, ekI by.Bytes) (res by.Bytes) {
	return by.kdf1B(by.tuple2B(Bytes_c2(pkR, ekI), by.expB(pkR, kI)))
}

ghost
ensures res == by.kdf2B(by.tuple2B(Bytes_c2(pkR, ekI), by.expB(pkR, kI)))
pure func Bytes_k2(kI, pkR, ekI by.Bytes) (res by.Bytes) {
	return by.kdf2B(by.tuple2B(Bytes_c2(pkR, ekI), by.expB(pkR, kI)))
}

ghost
ensures res == by.aeadB(Bytes_k2(kI, pkR, ekI), by.zeroStringB(12), ts, Bytes_h3(kI, pkR, ekI))
pure func Bytes_c_ts(kI, pkR, ekI, ts by.Bytes) (res by.Bytes) {
	return by.aeadB(Bytes_k2(kI, pkR, ekI), by.zeroStringB(12), ts, Bytes_h3(kI, pkR, ekI))
}

ghost
ensures res == by.hashB(by.tuple2B(Bytes_h3(kI, pkR, ekI), Bytes_c_ts(kI, pkR, ekI, ts)))
pure func Bytes_h4(kI, pkR, ekI, ts by.Bytes) (res by.Bytes) {
	return by.hashB(by.tuple2B(Bytes_h3(kI, pkR, ekI), Bytes_c_ts(kI, pkR, ekI, ts)))
}

ghost
ensures res == by.tuple7B(by.integer32B(1),sidI,Bytes_epkI(ekI),Bytes_c_pkI(kI,pkR, ekI),Bytes_c_ts(kI,pkR,ekI,ts),mac1,mac2)
pure func Bytes_M1(sidI, kI, pkR, ekI, ts, mac1, mac2 by.Bytes) (res by.Bytes) {
	return by.tuple7B(by.integer32B(1),sidI,Bytes_epkI(ekI),Bytes_c_pkI(kI,pkR, ekI),Bytes_c_ts(kI,pkR,ekI,ts),mac1,mac2)
}



ghost
ensures res == by.kdf1B(by.tuple2B(c3, epkR))
pure func Bytes_c4(c3, epkR by.Bytes) (res by.Bytes) {
	return by.kdf1B(by.tuple2B(c3, epkR))
}

ghost
ensures res == by.hashB(by.tuple2B(h4, epkR))
pure func Bytes_h5(h4, epkR by.Bytes) (res by.Bytes) {
	return by.hashB(by.tuple2B(h4, epkR))
}

ghost
ensures res == by.kdf1B(by.tuple2B(Bytes_c4(c3, epkR), by.expB(epkR, ekI)))
pure func Bytes_c5(ekI, c3, epkR by.Bytes) (res by.Bytes) {
	return by.kdf1B(by.tuple2B(Bytes_c4(c3, epkR), by.expB(epkR, ekI)))
}

ghost
ensures res == by.kdf1B(by.tuple2B(Bytes_c5(ekI, c3, epkR), by.expB(epkR, kI)))
pure func Bytes_c6(kI, ekI, c3, epkR by.Bytes) (res by.Bytes) {
	return by.kdf1B(by.tuple2B(Bytes_c5(ekI, c3, epkR), by.expB(epkR, kI)))
}

ghost
ensures res == by.kdf1B(by.tuple2B(Bytes_c6(kI, ekI, c3, epkR), psk))
pure func Bytes_c7(kI, psk, ekI, c3, epkR by.Bytes) (res by.Bytes) {
	return by.kdf1B(by.tuple2B(Bytes_c6(kI, ekI, c3, epkR), psk))
}

ghost
ensures res == by.kdf2B(by.tuple2B(Bytes_c6(kI, ekI, c3, epkR), psk))
pure func Bytes_pi(kI, psk, ekI, c3, epkR by.Bytes) (res by.Bytes) {
	return by.kdf2B(by.tuple2B(Bytes_c6(kI, ekI, c3, epkR), psk))
}

ghost
ensures res == by.kdf3B(by.tuple2B(Bytes_c6(kI, ekI, c3, epkR), psk))
pure func Bytes_k3(kI, psk, ekI, c3, epkR by.Bytes) (res by.Bytes) {
	return by.kdf3B(by.tuple2B(Bytes_c6(kI, ekI, c3, epkR), psk))
}

ghost
ensures res == by.hashB(by.tuple2B(Bytes_h5(h4, epkR), Bytes_pi(kI, psk, ekI, c3, epkR)))
pure func Bytes_h6(kI, psk, ekI, c3, h4, epkR by.Bytes) (res by.Bytes) {
	return by.hashB(by.tuple2B(Bytes_h5(h4, epkR), Bytes_pi(kI, psk, ekI, c3, epkR)))
}

ghost
ensures res == by.aeadB(Bytes_k3(kI, psk, ekI, c3, epkR), by.zeroStringB(12), by.zeroStringB(0), Bytes_h6(kI, psk, ekI, c3, h4, epkR))
pure func Bytes_c_empty(kI, psk, ekI, c3, h4, epkR by.Bytes) (res by.Bytes) {
	return by.aeadB(Bytes_k3(kI, psk, ekI, c3, epkR), by.zeroStringB(12), by.zeroStringB(0), Bytes_h6(kI, psk, ekI, c3, h4, epkR))
}

ghost
ensures res == by.tuple7B(by.integer32B(2), sidR, sidI, epkR, Bytes_c_empty(kI, psk, ekI, c3, h4, epkR), mac1, mac2)
pure func Bytes_M2(sidI, sidR, kI, psk, ekI, c3, h4, epkR, mac1, mac2 by.Bytes) (res by.Bytes) {
	return by.tuple7B(by.integer32B(2), sidR, sidI, epkR, Bytes_c_empty(kI, psk, ekI, c3, h4, epkR), mac1, mac2)
}

ghost
ensures res == by.kdf1B(Bytes_c7(kI, psk, ekI, c3, epkR))
pure func Bytes_k_IR(kI, psk, ekI, c3, epkR by.Bytes) (res by.Bytes) {
	return by.kdf1B(Bytes_c7(kI, psk, ekI, c3, epkR))
}

ghost
ensures res == by.kdf2B(Bytes_c7(kI, psk, ekI, c3, epkR))
pure func Bytes_k_RI(kI, psk, ekI, c3, epkR by.Bytes) (res by.Bytes) {
	return by.kdf2B(Bytes_c7(kI, psk, ekI, c3, epkR))
}


// messages defined on Term
ghost 
ensures res == tm.exp(tm.generator(), kI)
pure func Term_pkI(kI tm.Term) (res tm.Term) {
	return tm.exp(tm.generator(), kI)
}

ghost 
ensures res == tm.exp(tm.generator(), ekI)
pure func Term_epkI(ekI tm.Term) (res tm.Term) {
	return tm.exp(tm.generator(), ekI)
}

ghost 
ensures res == tm.hash(tm.infoTerm())
pure func Term_c0() (res tm.Term) {
	return tm.hash(tm.infoTerm())
}

ghost 
ensures res == tm.hash(tm.tuple2(Term_c0(), tm.prologueTerm()))
pure func Term_h0() (res tm.Term) {
	return tm.hash(tm.tuple2(Term_c0(), tm.prologueTerm()))
}

ghost 
ensures res == tm.hash(tm.tuple2(Term_h0(), pkR))
pure func Term_h1(pkR tm.Term) (res tm.Term) {
	return tm.hash(tm.tuple2(Term_h0(), pkR))
}

ghost 
ensures res == tm.kdf1(tm.tuple2(Term_c0(), Term_epkI(ekI)))
pure func Term_c1(ekI tm.Term) (res tm.Term) {
	return tm.kdf1(tm.tuple2(Term_c0(), Term_epkI(ekI)))
}

ghost 
ensures res == tm.hash(tm.tuple2(Term_h1(pkR),Term_epkI(ekI)))
pure func Term_h2(pkR, ekI tm.Term) (res tm.Term) {
	return tm.hash(tm.tuple2(Term_h1(pkR),Term_epkI(ekI)))
}

ghost 
ensures res == tm.kdf1(tm.tuple2(Term_c1(ekI), tm.exp(pkR, ekI)))
pure func Term_c2(pkR, ekI tm.Term) (res tm.Term) {
	return tm.kdf1(tm.tuple2(Term_c1(ekI), tm.exp(pkR, ekI)))
}

ghost 
ensures res == tm.kdf2(tm.tuple2(Term_c1(ekI), tm.exp(pkR, ekI)))
pure func Term_k1(pkR, ekI tm.Term) (res tm.Term) {
	return tm.kdf2(tm.tuple2(Term_c1(ekI), tm.exp(pkR, ekI)))
}

ghost 
ensures res == tm.aead(Term_k1(pkR, ekI), tm.zeroString(12), Term_pkI(kI), Term_h2(pkR, ekI))
pure func Term_c_pkI(kI, pkR, ekI tm.Term) (res tm.Term) {
	return tm.aead(Term_k1(pkR, ekI), tm.zeroString(12), Term_pkI(kI), Term_h2(pkR, ekI))
}

ghost 
ensures res == tm.hash(tm.tuple2(Term_h2(pkR, ekI), Term_c_pkI(kI, pkR, ekI)))
pure func Term_h3(kI, pkR, ekI tm.Term) (res tm.Term) {
	return tm.hash(tm.tuple2(Term_h2(pkR, ekI), Term_c_pkI(kI, pkR, ekI)))
}

ghost 
ensures res == tm.kdf1(tm.tuple2(Term_c2(pkR, ekI), tm.exp(pkR, kI)))
pure func Term_c3(kI, pkR, ekI tm.Term) (res tm.Term) {
	return tm.kdf1(tm.tuple2(Term_c2(pkR, ekI), tm.exp(pkR, kI)))
}

ghost 
ensures res == tm.kdf2(tm.tuple2(Term_c2(pkR, ekI), tm.exp(pkR, kI)))
pure func Term_k2(kI, pkR, ekI tm.Term) (res tm.Term) {
	return tm.kdf2(tm.tuple2(Term_c2(pkR, ekI), tm.exp(pkR, kI)))
}

ghost 
ensures res == tm.aead(Term_k2(kI, pkR, ekI), tm.zeroString(12), ts, Term_h3(kI, pkR, ekI))
pure func Term_c_ts(kI, pkR, ekI, ts tm.Term) (res tm.Term) {
	return tm.aead(Term_k2(kI, pkR, ekI), tm.zeroString(12), ts, Term_h3(kI, pkR, ekI))
}

ghost 
ensures res == tm.hash(tm.tuple2(Term_h3(kI, pkR, ekI), Term_c_ts(kI, pkR, ekI, ts)))
pure func Term_h4(kI, pkR, ekI, ts tm.Term) (res tm.Term) {
	return tm.hash(tm.tuple2(Term_h3(kI, pkR, ekI), Term_c_ts(kI, pkR, ekI, ts)))
}

ghost 
ensures res == tm.tuple7(tm.integer32(1),sidI,Term_epkI(ekI),Term_c_pkI(kI,pkR, ekI),Term_c_ts(kI,pkR,ekI,ts),mac1,mac2)
pure func Term_M1(sidI, kI, pkR, ekI, ts, mac1, mac2 tm.Term) (res tm.Term) {
	return tm.tuple7(tm.integer32(1),sidI,Term_epkI(ekI),Term_c_pkI(kI,pkR, ekI),Term_c_ts(kI,pkR,ekI,ts),mac1,mac2)
}


ghost 
ensures res == tm.kdf1(tm.tuple2(c3, epkR))
pure func Term_c4(c3, epkR tm.Term) (res tm.Term) {
	return tm.kdf1(tm.tuple2(c3, epkR))
}

ghost 
ensures res == tm.hash(tm.tuple2(h4, epkR))
pure func Term_h5(h4, epkR tm.Term) (res tm.Term) {
	return tm.hash(tm.tuple2(h4, epkR))
}

ghost 
ensures res == tm.kdf1(tm.tuple2(Term_c4(c3, epkR), tm.exp(epkR, ekI)))
pure func Term_c5(ekI, c3, epkR tm.Term) (res tm.Term) {
	return tm.kdf1(tm.tuple2(Term_c4(c3, epkR), tm.exp(epkR, ekI)))
}

ghost 
ensures res == tm.kdf1(tm.tuple2(Term_c5(ekI, c3, epkR), tm.exp(epkR, kI)))
pure func Term_c6(kI, ekI, c3, epkR tm.Term) (res tm.Term) {
	return tm.kdf1(tm.tuple2(Term_c5(ekI, c3, epkR), tm.exp(epkR, kI)))
}

ghost 
ensures res == tm.kdf1(tm.tuple2(Term_c6(kI, ekI, c3, epkR), psk))
pure func Term_c7(kI, psk, ekI, c3, epkR tm.Term) (res tm.Term) {
	return tm.kdf1(tm.tuple2(Term_c6(kI, ekI, c3, epkR), psk))
}

ghost 
ensures res == tm.kdf2(tm.tuple2(Term_c6(kI, ekI, c3, epkR), psk))
pure func Term_pi(kI, psk, ekI, c3, epkR tm.Term) (res tm.Term) {
	return tm.kdf2(tm.tuple2(Term_c6(kI, ekI, c3, epkR), psk))
}

ghost 
ensures res == tm.kdf3(tm.tuple2(Term_c6(kI, ekI, c3, epkR), psk))
pure func Term_k3(kI, psk, ekI, c3, epkR tm.Term) (res tm.Term) {
	return tm.kdf3(tm.tuple2(Term_c6(kI, ekI, c3, epkR), psk))
}

ghost 
ensures res == tm.hash(tm.tuple2(Term_h5(h4, epkR), Term_pi(kI, psk, ekI, c3, epkR)))
pure func Term_h6(kI, psk, ekI, c3, h4, epkR tm.Term) (res tm.Term) {
	return tm.hash(tm.tuple2(Term_h5(h4, epkR), Term_pi(kI, psk, ekI, c3, epkR)))
}

ghost 
ensures res == tm.aead(Term_k3(kI, psk, ekI, c3, epkR), tm.zeroString(12), tm.zeroString(0), Term_h6(kI, psk, ekI, c3, h4, epkR))
pure func Term_c_empty(kI, psk, ekI, c3, h4, epkR tm.Term) (res tm.Term) {
	return tm.aead(Term_k3(kI, psk, ekI, c3, epkR), tm.zeroString(12), tm.zeroString(0), Term_h6(kI, psk, ekI, c3, h4, epkR))
}

ghost 
ensures res == tm.tuple7(tm.integer32(2), sidR, sidI, epkR, Term_c_empty(kI, psk, ekI, c3, h4, epkR), mac1, mac2)
pure func Term_M2(sidI, sidR, kI, psk, ekI, c3, h4, epkR, mac1, mac2 tm.Term) (res tm.Term) {
	return tm.tuple7(tm.integer32(2), sidR, sidI, epkR, Term_c_empty(kI, psk, ekI, c3, h4, epkR), mac1, mac2)
}

ghost 
ensures res == tm.kdf1(Term_c7(kI, psk, ekI, c3, epkR))
pure func Term_k_IR(kI, psk, ekI, c3, epkR tm.Term) (res tm.Term) {
	return tm.kdf1(Term_c7(kI, psk, ekI, c3, epkR))
}

ghost 
ensures res == tm.kdf2(Term_c7(kI, psk, ekI, c3, epkR))
pure func Term_k_RI(kI, psk, ekI, c3, epkR tm.Term) (res tm.Term) {
	return tm.kdf2(Term_c7(kI, psk, ekI, c3, epkR))
}
