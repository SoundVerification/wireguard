package patternInitiator

import by "wireguard-gobra/wireguard/verification/bytes"
import ft "wireguard-gobra/wireguard/verification/fact"
import io "wireguard-gobra/wireguard/verification/iospec"
import mi "wireguard-gobra/wireguard/verification/messages/initiator"
import mr "wireguard-gobra/wireguard/verification/messages/responder"
import pl "wireguard-gobra/wireguard/verification/place"
import tm "wireguard-gobra/wireguard/verification/term"

ghost
requires pl.token(p) && io.P_i(p, rid, s)
requires mset[ft.Fact]{ ft.init1(rid, pp, kI, ltpk, ekI, psk, c3, h4) } subset s
requires by.gamma(t) == by.gamma(mi.Term_M2(rid, sidR, kI, psk, ekI, c3, h4, epkR, mac1, mac2))
ensures  pl.token(p) && io.P_i(p, rid, s)
ensures  t == mi.Term_M2(rid, x1, kI, psk, ekI, c3, h4, x2, x3, x4)
func patternProperty1(rid, pp, kI, ltpk, psk, ekI, c3, h4, sidR, epkR, mac1, mac2, t tm.Term, p pl.Place, s mset[ft.Fact]) (x1,x2,x3,x4 tm.Term)

ghost
requires pl.token(p) && io.P_r(p, rid, s)
requires mset[ft.Fact]{ ft.resp0(rid, pp) } subset s
requires by.gamma(t) == by.gamma(mr.Term_M1(sidI, kR, pkI, epkI, ts, mac1, mac2))
ensures  pl.token(p) && io.P_r(p, rid, s)
ensures  t == mr.Term_M1(x1, kR, pkI, x2, x3, x4, x5)
func patternProperty3(rid, pp, kR, pkI, sidI, epkI, ts, mac1, mac2, t tm.Term, p pl.Place, s mset[ft.Fact]) (x1,x2,x3,x4,x5 tm.Term)

ghost
requires pl.token(p)
requires isInitiator ==> io.P_i(p, rid, s)
requires isInitiator ==> mset[ft.Fact]{ ft.init3(rid, pp, ownKey, foreignKey) } subset s
requires !isInitiator ==> io.P_r(p, rid, s)
requires !isInitiator ==>
    mset[ft.Fact]{ ft.resp2(rid, pp, foreignKey, ownKey, tm.zeroString(1), tm.zeroString(1)) } subset s ||
    mset[ft.Fact]{ ft.resp3(rid, pp, foreignKey, ownKey) } subset s
requires by.gamma(t) == by.gamma(tm.tuple4(tm.integer32(4), rid, n, tm.aead(foreignKey,n,msg,tm.zeroString(0))))
ensures  pl.token(p)
ensures  isInitiator ==> io.P_i(p, rid, s)
ensures  !isInitiator ==> io.P_r(p, rid, s)
ensures  t == tm.tuple4(tm.integer32(4), rid, x1, tm.aead(foreignKey,x1,x2,tm.zeroString(0)))
func patternProperty4(rid, pp, ownKey, foreignKey, n, msg, t tm.Term, p pl.Place, s mset[ft.Fact], isInitiator bool) (x1, x2 tm.Term)
