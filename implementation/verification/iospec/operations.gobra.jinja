{# 
- `imports` are an array of import with the following fields:
  - `qualifier` qualifier to be used in the import statement
  - `path` import path to the package
- `bios` are an array of bio with the following fields:
  - `name`
  - `operation_name`
  - `inputs` consisting each of `name` and `type` (token `t` is automatically an input)
  - `outputs` consisting each of `name` and `type` (token `t1` is automatically an output)
  - `can_fail` specifies whether the first output (in addition) is `err` of type int
-#}
// DO NOT edit this file - auto-generated from events.gobra.py using template events.gobra.jinja
package iospec

{% for import in imports %}
import {{ import.qualifier }} "{{ import.path }}"
{% endfor %}

{% for bio in bios %}
//////////////////// {{ bio.operation_name }}{% if not bio.generate_permission_only %} & {{ bio.name }}{% endif %} ////////////////////
pred {{ bio.operation_name }}(ghost t Place{% for arg in bio.inputs %}, ghost {{ arg.name }} {{ arg.type }}{% endfor %})

{% for arg in bio.outputs -%}
ghost
requires {{ bio.operation_name }}(t{% for input in bio.inputs %}, {{ input.name }}{% endfor %})
pure func get_{{ bio.operation_name }}_{{ arg.name }}(t Place{% for input in bio.inputs %}, {{ input.name }} {{ input.type }}{% endfor %}) ({{ arg.name }} {{ arg.type }})

{% endfor %}
ghost
requires {{ bio.operation_name }}(t{% for input in bio.inputs %}, {{ input.name }}{% endfor %})
pure func get_{{ bio.operation_name }}_t1(t Place{% for input in bio.inputs %}, {{ input.name }} {{ input.type }}{% endfor %}) (t1 Place)

{% if not bio.generate_permission_only -%}
ghost
requires token(t) && {{ bio.operation_name }}(t{% for arg in bio.inputs %}, {{ arg.name }}{% endfor %})
{% for arg in bio.outputs %}
ensures {% if bio.can_fail %}err == 0 ==> {% endif %}{{ arg.name }} == old(get_{{ bio.operation_name }}_{{ arg.name }}(t{% for arg in bio.inputs %}, {{ arg.name }}{% endfor %}))
{% endfor %}
ensures {% if bio.can_fail %}err == 0 ==> {% endif %}token(t1) && t1 == old(get_{{ bio.operation_name }}_t1(t{% for arg in bio.inputs %}, {{ arg.name }}{% endfor %}))
func {{ bio.name }}(t Place{% for arg in bio.inputs %}, {{ arg.name }} {{ arg.type }}{% endfor %}) ({% if bio.can_fail %}err int, {% endif %}{% for arg in bio.outputs %}{{ arg.name }} {{ arg.type }}, {% endfor %}t1 Place)


{% endif %}
{% endfor %}
