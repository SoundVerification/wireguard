// DO NOT edit this file - auto-generated from events.gobra.py using template events.gobra.jinja
package iospec

import . "wireguard-gobra/wireguard/verification/claim"
import . "wireguard-gobra/wireguard/verification/fact"
import . "wireguard-gobra/wireguard/verification/place"
import . "wireguard-gobra/wireguard/verification/term"
import . "wireguard-gobra/wireguard/verification/theta"

//////////////////// e_1I & internalBio1I ////////////////////
pred e_1I(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_1I(t, theta, l, a, r)
pure func get_e_1I_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_1I(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_1I_t1(t, theta, l, a, r))
func internalBio1I(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_2I & internalBio2I ////////////////////
pred e_2I(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_2I(t, theta, l, a, r)
pure func get_e_2I_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_2I(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_2I_t1(t, theta, l, a, r))
func internalBio2I(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_3I & internalBio3I ////////////////////
pred e_3I(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_3I(t, theta, l, a, r)
pure func get_e_3I_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_3I(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_3I_t1(t, theta, l, a, r))
func internalBio3I(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_4I & internalBio4I ////////////////////
pred e_4I(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_4I(t, theta, l, a, r)
pure func get_e_4I_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_4I(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_4I_t1(t, theta, l, a, r))
func internalBio4I(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_5I & internalBio5I ////////////////////
pred e_5I(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_5I(t, theta, l, a, r)
pure func get_e_5I_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_5I(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_5I_t1(t, theta, l, a, r))
func internalBio5I(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_init0I ////////////////////
pred e_init0I(ghost t Place, ghost rid Term)

ghost
requires e_init0I(t, rid)
pure func get_e_init0I_m1(t Place, rid Term) (m1 Term)

ghost
requires e_init0I(t, rid)
pure func get_e_init0I_m2(t Place, rid Term) (m2 Term)

ghost
requires e_init0I(t, rid)
pure func get_e_init0I_m3(t Place, rid Term) (m3 Term)

ghost
requires e_init0I(t, rid)
pure func get_e_init0I_m4(t Place, rid Term) (m4 Term)

ghost
requires e_init0I(t, rid)
pure func get_e_init0I_t1(t Place, rid Term) (t1 Place)

