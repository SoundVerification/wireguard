// DO NOT edit this file - auto-generated from events.gobra.py using template events.gobra.jinja
package iospec

import . "wireguard-gobra/wireguard/verification/claim"
import . "wireguard-gobra/wireguard/verification/fact"
import . "wireguard-gobra/wireguard/verification/place"
import . "wireguard-gobra/wireguard/verification/term"
import . "wireguard-gobra/wireguard/verification/theta"

//////////////////// e_1R & internalBio1R ////////////////////
pred e_1R(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_1R(t, theta, l, a, r)
pure func get_e_1R_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_1R(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_1R_t1(t, theta, l, a, r))
func internalBio1R(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_2R & internalBio2R ////////////////////
pred e_2R(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_2R(t, theta, l, a, r)
pure func get_e_2R_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_2R(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_2R_t1(t, theta, l, a, r))
func internalBio2R(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_3R & internalBio3R ////////////////////
pred e_3R(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_3R(t, theta, l, a, r)
pure func get_e_3R_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_3R(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_3R_t1(t, theta, l, a, r))
func internalBio3R(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_4R & internalBio4R ////////////////////
pred e_4R(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_4R(t, theta, l, a, r)
pure func get_e_4R_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_4R(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_4R_t1(t, theta, l, a, r))
func internalBio4R(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_5R & internalBio5R ////////////////////
pred e_5R(ghost t Place, ghost theta Theta, ghost l mset[Fact], ghost a mset[Claim], ghost r mset[Fact])

ghost
requires e_5R(t, theta, l, a, r)
pure func get_e_5R_t1(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)

ghost
requires token(t) && e_5R(t, theta, l, a, r)
ensures token(t1) && t1 == old(get_e_5R_t1(t, theta, l, a, r))
func internalBio5R(t Place, theta Theta, l mset[Fact], a mset[Claim], r mset[Fact]) (t1 Place)


//////////////////// e_resp0R ////////////////////
pred e_resp0R(ghost t Place, ghost rid Term)

ghost
requires e_resp0R(t, rid)
pure func get_e_resp0R_m1(t Place, rid Term) (m1 Term)

ghost
requires e_resp0R(t, rid)
pure func get_e_resp0R_m2(t Place, rid Term) (m2 Term)

ghost
requires e_resp0R(t, rid)
pure func get_e_resp0R_m3(t Place, rid Term) (m3 Term)

ghost
requires e_resp0R(t, rid)
pure func get_e_resp0R_m4(t Place, rid Term) (m4 Term)

ghost
requires e_resp0R(t, rid)
pure func get_e_resp0R_m5(t Place, rid Term) (m5 Term)

ghost
requires e_resp0R(t, rid)
pure func get_e_resp0R_t1(t Place, rid Term) (t1 Place)

