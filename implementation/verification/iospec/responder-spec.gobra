package iospec

import . "wireguard-gobra/wireguard/verification/claim"
import . "wireguard-gobra/wireguard/verification/fact"
import . "wireguard-gobra/wireguard/verification/messages/responder"
import . "wireguard-gobra/wireguard/verification/place"
import . "wireguard-gobra/wireguard/verification/term"
import . "wireguard-gobra/wireguard/verification/theta"

pred P_r(t Place, rid Term, ghost s mset[Fact]) {
    P_r1(t, rid, s)  &&
    P_r2(t, rid, s)  &&
    P_r3(t, rid, s)  &&
    P_r4(t, rid, s)  &&
    P_r5(t, rid, s)  &&
    P_r6(t, rid, s)  && 
    P_r7(t, rid, s)  &&
    P_r8(t, rid, s)  &&
    P_r9(t, rid, s)  &&
    P_r10(t, rid, s) &&
    P_r11(t, rid, s) &&
    P_r12(t, rid, s) &&
    P_r13(t, rid, s) &&
    P_r14(t, rid, s) &&
    P_r15(t, rid, s) &&
    P_r16(t, rid, s)
}

pred P_r1(t Place, rid Term, ghost s mset[Fact]) {
    forall theta Theta, l mset[Fact], a mset[Claim], r mset[Fact] :: { e_1R(t, theta, l, a, r) } (
        G(l, s) &&
        l == mset[Fact]{ 
            resp0(rid, getPP(theta)),
            ltK(getSecond(getPP(theta)), getKR(theta)), 
            ltpK(getFirst(getPP(theta)), getPkI(theta)),
            psK(getFirst(getPP(theta)), getSecond(getPP(theta)), getPsk(theta)), 
            inFact(Term_M1(getSidI(theta), getKR(theta), getPkI(theta), getEpkI(theta), getTs(theta), getMac1I(theta), getMac2I(theta))),
        } &&
        a == mset[Claim]{ } &&
        r == mset[Fact]{ 
            resp1(rid, getPP(theta), getPkI(theta), getKR(theta), getEpkI(theta), getPsk(theta), Term_c3(getKR(theta), getPkI(theta), getEpkI(theta)), Term_h4(getKR(theta), getPkI(theta), getEpkI(theta), getTs(theta)), getSidI(theta)),
        }) ==>
        e_1R(t, theta, l, a, r) && P_r(get_e_1R_t1(t, theta, l, a, r), rid, U(l, r, s))
}

pred P_r2(t Place, rid Term, ghost s mset[Fact]) {
    forall theta Theta, l mset[Fact], a mset[Claim], r mset[Fact] :: { e_2R(t, theta, l, a, r) } (
        G(l, s) &&
        l == mset[Fact]{ 
            resp1(rid, getPP(theta), getPkI(theta), getKR(theta), getEpkI(theta), getPsk(theta), getC3(theta), getH4(theta), getSidI(theta)), 
            fr(getEkR(theta)),
            mac(getMac1R(theta)),
            mac(getMac2R(theta)),
        } &&
        a == mset[Claim]{ 
            runningInitResp(tuple4(getFirst(getPP(theta)), getSecond(getPP(theta)), Term_k_IR(getPkI(theta),getPsk(theta),getEpkI(theta),getC3(theta),getEkR(theta)), Term_k_RI(getPkI(theta),getPsk(theta),getEpkI(theta),getC3(theta),getEkR(theta)))),
        } &&
        r == mset[Fact]{ 
            resp2(rid, getPP(theta), Term_k_IR(getPkI(theta),getPsk(theta),getEpkI(theta),getC3(theta),getEkR(theta)), Term_k_RI(getPkI(theta),getPsk(theta),getEpkI(theta),getC3(theta),getEkR(theta)), zeroString(1), zeroString(1)),
            outFact(Term_M2(getSidI(theta),rid,getPkI(theta),getPsk(theta),getEpkI(theta),getC3(theta),getH4(theta),getEkR(theta),getMac1R(theta),getMac2R(theta))),
        }) ==>
        e_2R(t, theta, l, a, r) && P_r(get_e_2R_t1(t, theta, l, a, r), rid, U(l, r, s))
}

pred P_r3(t Place, rid Term, ghost s mset[Fact]) {
    forall theta Theta, l mset[Fact], a mset[Claim], r mset[Fact] :: { e_3R(t, theta, l, a, r) } (
        G(l, s) &&
        l == mset[Fact]{ 
            resp2(rid, getPP(theta), getKIR(theta), getKRI(theta), zeroString(1), zeroString(1)),
            inFact(tuple4(integer32(4), rid, getNIRTerm(theta), aead(getKIR(theta), getNIRTerm(theta), getP(theta), zeroString(0)))),
        } &&
        a == mset[Claim]{ 
            receivedFirstResp(rid, getFirst(getPP(theta)), getSecond(getPP(theta)), getKIR(theta), getKRI(theta), getP(theta)),
            commitRespInit(tuple5(getFirst(getPP(theta)), getSecond(getPP(theta)), getKIR(theta), getKRI(theta), getP(theta))),
            secret(getFirst(getPP(theta)), getSecond(getPP(theta)), tuple2(getKIR(theta), getKRI(theta))),
        } &&
        r == mset[Fact]{ 
            resp3(rid, getPP(theta), getKIR(theta), getKRI(theta)),
        }) ==>
        e_3R(t, theta, l, a, r) && P_r(get_e_3R_t1(t, theta, l, a, r), rid, U(l, r, s))
}

pred P_r4(t Place, rid Term, ghost s mset[Fact]) {
    forall theta Theta, l mset[Fact], a mset[Claim], r mset[Fact] :: { e_4R(t, theta, l, a, r) } (
        G(l, s) &&
        l == mset[Fact]{ 
            resp3(rid, getPP(theta), getKIR(theta), getKRI(theta)),
            counter(integer64(getNRI(theta))),
            message(getP(theta)),
        } &&
        a == mset[Claim]{ } &&
        r == mset[Fact]{ 
            resp3(rid, getPP(theta), getKIR(theta), getKRI(theta)), 
            outFact(tuple4(integer32(4), getSidI(theta), integer64(getNRI(theta)), aead(getKRI(theta), integer64(getNRI(theta)), getP(theta), zeroString(0)))),
        }) ==>
        e_4R(t, theta, l, a, r) && P_r(get_e_4R_t1(t, theta, l, a, r), rid, U(l, r, s))
}

pred P_r5(t Place, rid Term, ghost s mset[Fact]) {
    forall theta Theta, l mset[Fact], a mset[Claim], r mset[Fact] :: { e_5R(t, theta, l, a, r) } (
        G(l, s) &&
        l == mset[Fact]{ 
            resp3(rid, getPP(theta), getKIR(theta), getKRI(theta)),
            inFact(tuple4(integer32(4), rid, getNIRTerm(theta), aead(getKIR(theta), getNIRTerm(theta), getP(theta), zeroString(0)))),
        } &&
        a == mset[Claim]{ } &&
        r == mset[Fact]{
            resp3(rid, getPP(theta), getKIR(theta), getKRI(theta)),
        }) ==>
        e_5R(t, theta, l, a, r) && P_r(get_e_5R_t1(t, theta, l, a, r), rid, U(l, r, s))
}

pred P_r6(t Place, rid Term, ghost s mset[Fact]) {
    forall m Term :: {outFact(m)}{e_out(t, rid, m)} outFact(m) in s ==> 
        e_out(t, rid, m) && P_r(get_e_out_t1(t, rid, m), rid, s setminus mset[Fact]{ outFact(m) })
}

pred P_r7(t Place, rid Term, ghost s mset[Fact]) {
    e_in(t, rid) && P_r(get_e_in_t1(t, rid), rid, s union mset[Fact]{ inFact(get_e_in_m(t, rid)) })
}

pred P_r8(t Place, rid Term, ghost s mset[Fact]) {
    e_fr(t, rid) && P_r(get_e_fr_t1(t, rid), rid, s union mset[Fact]{ fr(get_e_fr_n(t, rid)) })
}

pred P_r9(t Place, rid Term, ghost s mset[Fact]) {
    e_LtK(t, rid) && P_r(get_e_LtK_t1(t, rid), rid, s union mset[Fact]{ ltK(get_e_LtK_m1(t, rid), get_e_LtK_m2(t, rid)) })
}

pred P_r10(t Place, rid Term, ghost s mset[Fact]) {
    e_LtpK(t, rid) && P_r(get_e_LtpK_t1(t, rid), rid, s union mset[Fact]{ ltpK(get_e_LtpK_m1(t, rid), get_e_LtpK_m2(t, rid)) })
}

pred P_r11(t Place, rid Term, ghost s mset[Fact]) {
    e_PsK(t, rid) && P_r(get_e_PsK_t1(t, rid), rid, s union mset[Fact]{ psK(get_e_PsK_m1(t, rid), get_e_PsK_m2(t, rid), get_e_PsK_m3(t, rid)) })
}

pred P_r12(t Place, rid Term, ghost s mset[Fact]) {
    e_Counter(t, rid) && P_r(get_e_Counter_t1(t, rid), rid, s union mset[Fact]{ counter(get_e_Counter_n(t, rid)) })
}

pred P_r13(t Place, rid Term, ghost s mset[Fact]) {
    e_Message(t, rid) && P_r(get_e_Message_t1(t, rid), rid, s union mset[Fact]{ message(get_e_Message_m(t, rid)) })
}

pred P_r14(t Place, rid Term, ghost s mset[Fact]) {
    e_Timestamp(t, rid) && P_r(get_e_Timestamp_t1(t, rid), rid, s union mset[Fact]{ timestamp(get_e_Timestamp_m(t, rid)) })
}

pred P_r15(t Place, rid Term, ghost s mset[Fact]) {
    e_MAC(t, rid) && P_r(get_e_MAC_t1(t, rid), rid, s union mset[Fact]{ mac(get_e_MAC_m(t, rid)) })
}

pred P_r16(t Place, rid Term, ghost s mset[Fact]) {
    e_resp0R(t, rid) && P_r(get_e_resp0R_t1(t, rid), rid, s union mset[Fact]{ resp0(rid, tuple4(get_e_resp0R_m1(t, rid), get_e_resp0R_m2(t, rid), get_e_resp0R_m3(t, rid), get_e_resp0R_m4(t, rid))) })
}
