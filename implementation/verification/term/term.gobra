package term

type Term domain {
    // Tamarin differentiates between the sorts of fresh values and public constants
    // Hence, `isFresh` and `isPublic` could be used to express that a certain term 
    // belongs to one of these sorts (and a corresponding axiom could express that no 
    // term can be fresh and public).
    // However as this additional information is currently not necessary for the 
    // verification, these functions do not exist yet.
    // A completely alternative approach would be to use an ADT with fresh and public
    // constructors and deconstructors for all terms.

    // func isFresh(Term): bool
    // func isPublic(Term): bool

    // constructors
    func tuple2(Term, Term) Term
    func tuple4(Term, Term, Term, Term) Term
    func tuple5(Term, Term, Term, Term, Term) Term
    func tuple7(Term, Term, Term, Term, Term, Term, Term) Term
    func hash(Term) Term
    func kdf1(Term) Term
    func kdf2(Term) Term
    func kdf3(Term) Term
    func ok() Term
    func aead(Term, Term, Term, Term) Term
    func const1() Term
    func exp(Term, Term) Term
    func mult(Term, Term) Term

    func msg(string) Term
    func zeroString(int) Term
    func integer64(uint64) Term
    func integer32(uint32) Term
    func infoTerm() Term
    func prologueTerm() Term
    func generator() Term
    func subsequent(Term) Term

    // deconstructors
    func getFirst(Term) Term
    func getSecond(Term) Term
    func getThird(Term) Term
    func getForth(Term) Term
    func getFifth(Term) Term
    func getSixth(Term) Term
    func getSeventh(Term) Term
    func decrypt(Term, Term, Term) Term
    func verify(Term, Term, Term, Term) Term
    func inv(Term) Term

    // (x^y)^z == x^(y*z)
    axiom {
        forall x, y, z Term :: { exp(exp(x, y), z) } { exp(x, mult(y, z)) } exp(exp(x, y), z) == exp(x, mult(y, z))
    }

    // // x^1 == x
    // axiom {
    //     forall x Term :: { exp(x, const1()) } exp(x, const1()) == x
    // }

    // mult is commutative
    axiom {
        forall x, y Term :: { mult(x, y) } mult(x, y) == mult(y, x)
    }

    // // mult is associative
    // axiom {
    //     forall x, y, z Term :: { mult(mult(x, y), z) } { mult(x, mult(y, z)) } mult(mult(x, y), z) == mult(x, mult(y, z))
    // }

    // // x*1 == x
    // axiom {
    //     forall x Term :: { mult(x, const1()) } mult(x, const1()) == x
    // }

    // // x * inv(x) == 1
    // axiom {
    //     forall x Term :: { mult(x, inv(x)) } mult(x, inv(x)) == const1()
    // }

    // tuple2 deconstructors
    axiom {
        forall t1, t2 Term :: { tuple2(t1, t2) } getFirst(tuple2(t1, t2)) == t1 && getSecond(tuple2(t1, t2)) == t2
    }

    // tuple4 deconstructors
    axiom {
        forall t1, t2, t3, t4 Term :: { tuple4(t1, t2, t3, t4) } getFirst(tuple4(t1, t2, t3, t4)) == t1 && getSecond(tuple4(t1, t2, t3, t4)) == t2 && getThird(tuple4(t1, t2, t3, t4)) == t3 && getForth(tuple4(t1, t2, t3, t4)) == t4
    }

    // tuple5 deconstructors
    axiom {
        forall t1, t2, t3, t4, t5 Term :: { tuple5(t1, t2, t3, t4, t5) } getFirst(tuple5(t1, t2, t3, t4, t5)) == t1 && getSecond(tuple5(t1, t2, t3, t4, t5)) == t2 && getThird(tuple5(t1, t2, t3, t4, t5)) == t3 && getForth(tuple5(t1, t2, t3, t4, t5)) == t4 && getFifth(tuple5(t1, t2, t3, t4, t5)) == t5
    }

    // tuple7 deconstructors
    axiom {
        forall t1, t2, t3, t4, t5, t6, t7 Term :: { tuple7(t1, t2, t3, t4, t5, t6, t7) } getFirst(tuple7(t1, t2, t3, t4, t5, t6, t7)) == t1 && getSecond(tuple7(t1, t2, t3, t4, t5, t6, t7)) == t2 && getThird(tuple7(t1, t2, t3, t4, t5, t6, t7)) == t3 && getForth(tuple7(t1, t2, t3, t4, t5, t6, t7)) == t4 && getFifth(tuple7(t1, t2, t3, t4, t5, t6, t7)) == t5 && getSixth(tuple7(t1, t2, t3, t4, t5, t6, t7)) == t6 && getSeventh(tuple7(t1, t2, t3, t4, t5, t6, t7)) == t7
    }

    // decrypt aead with same key and nonce
    axiom {
        forall key, nonce, plaintext, additionalData Term :: { decrypt(key, nonce, aead(key, nonce, plaintext, additionalData)) } decrypt(key, nonce, aead(key, nonce, plaintext, additionalData)) == plaintext
    }

    // verify aead with same key and nonce
    axiom {
        forall key, nonce, plaintext, additionalData Term :: { verify(key, nonce, additionalData, aead(key, nonce, plaintext, additionalData)) } verify(key, nonce, additionalData, aead(key, nonce, plaintext, additionalData)) == ok()
    }
}

ghost
func termDomainCheck(key, nonce, plaintext, additionalData Term) {
    ciphertext := aead(key, nonce, plaintext, additionalData)
    success := verify(key, nonce, additionalData, ciphertext)
    assert success == ok()
    // ad := getAd(ciphertext)
    // assert ad == additionalData
}
