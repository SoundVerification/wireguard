package fact

import . "wireguard-gobra/wireguard/verification/term"

type Fact domain {

    // type 0; second term represents tuple4 of program params
    func init0(Term, Term) Fact
    func getInit0Rid(Fact) Term
    func getInit0Params(Fact) Term

    // type 1; second term represents tuple4 of program params
    func init1(Term, Term, Term, Term, Term, Term, Term, Term) Fact
    func getInit1Terms(Fact) seq[Term]

    // type 2; second term represents tuple4 of program params
    func init2(Term, Term, Term, Term, Term, Term) Fact
    func getInit2Terms(Fact) seq[Term]

    // type 3; second term represents tuple4 of program params
    func init3(Term, Term, Term, Term) Fact
    func getInit3Terms(Fact) seq[Term]

    // type 4; second term represents tuple4 of program params
    func resp0(Term, Term) Fact
    func getResp0Rid(Fact) Term
    func getResp0Params(Fact) Term

    // type 5; second term represents tuple4 of program params
    func resp1(Term, Term, Term, Term, Term, Term, Term, Term, Term) Fact
    func getResp1Terms(Fact) seq[Term]

    // type 6; second term represents tuple4 of program params
    func resp2(Term, Term, Term, Term, Term, Term) Fact
    func getResp2Terms(Fact) seq[Term]

    // type 7; second term represents tuple4 of program params
    func resp3(Term, Term, Term, Term) Fact
    func getResp3Terms(Fact) seq[Term]

    // type 8
    func ltK(Term, Term) Fact
    func getLtKAgent(Fact) Term
    func getLtKSk(Fact) Term

    // type 9
    func ltpK(Term, Term) Fact
    func getLtpKAgent(Fact) Term
    func getLtpKPk(Fact) Term

    // type 10
    func psK(Term, Term, Term) Fact
    func getPsKAgent1(Fact) Term
    func getPsKAgent2(Fact) Term
    func getPsKPsk(Fact) Term

    // type 11
    func fr(Term) Fact
    func getFr(Fact) Term

    // type 12
    func timestamp(Term) Fact
    func getTimestamp(Fact) Term

    // type 13
    func mac(Term) Fact
    func getMac(Fact) Term

    // type 14
    func outFact(Term) Fact
    func getOut(Fact) Term

    // type 15
    func inFact(Term) Fact
    func getIn(Fact) Term

    // type 16
    func message(Term) Fact
    func getMessage(Fact) Term

    // type 17
    func counter(Term) Fact
    func getCounter(Fact) Term

    // each fact has a unique 'type':
    func getType(Fact) int

    func persistent(Fact) bool

    // init0 injective
    axiom {
        forall rid, pp Term :: { init0(rid, pp) } getInit0Rid(init0(rid, pp)) == rid && getInit0Params(init0(rid, pp)) == pp && getType(init0(rid, pp)) == 0
    }

    // init1 injective
    axiom {
        forall rid, pp, t1, t2, t3, t4, t5, t6 Term :: { init1(rid, pp, t1, t2, t3, t4, t5, t6) } getInit1Terms(init1(rid, pp, t1, t2, t3, t4, t5, t6)) == seq[Term] {rid, pp, t1, t2, t3, t4, t5, t6} && getType(init1(rid, pp, t1, t2, t3, t4, t5, t6)) == 1
    }

    // init2 injective
    axiom {
        forall rid, pp, t1, t2, t3, t4 Term :: { init2(rid, pp, t1, t2, t3, t4) } getInit2Terms(init2(rid, pp, t1, t2, t3, t4)) == seq[Term] {rid, pp, t1, t2, t3, t4} && getType(init2(rid, pp, t1, t2, t3, t4)) == 2
    }

    // init3 injective
    axiom {
        forall rid, pp, t1, t2 Term :: { init3(rid, pp, t1, t2) } getInit3Terms(init3(rid, pp, t1, t2)) == seq[Term] {rid, pp, t1, t2} && getType(init3(rid, pp, t1, t2)) == 3
    }

    // resp0 injective
    axiom {
        forall rid, pp Term :: { resp0(rid, pp) } getResp0Rid(resp0(rid, pp)) == rid && getResp0Params(resp0(rid, pp)) == pp && getType(resp0(rid, pp)) == 4
    }

    // resp1 injective
    axiom {
        forall rid, pp, t1, t2, t3, t4, t5, t6, t7 Term :: { resp1(rid, pp, t1, t2, t3, t4, t5, t6, t7) } getResp1Terms(resp1(rid, pp, t1, t2, t3, t4, t5, t6, t7)) == seq[Term] {rid, pp, t1, t2, t3, t4, t5, t6, t7} && getType(resp1(rid, pp, t1, t2, t3, t4, t5, t6, t7)) == 5
    }

    // resp2 injective
    axiom {
        forall rid, pp, t1, t2, t3, t4 Term :: { resp2(rid, pp, t1, t2, t3, t4) } getResp2Terms(resp2(rid, pp, t1, t2, t3, t4)) == seq[Term] {rid, pp, t1, t2, t3, t4} && getType(resp2(rid, pp, t1, t2, t3, t4)) == 6
    }

    // resp3 injective
    axiom {
        forall rid, pp, t1, t2 Term :: { resp3(rid, pp, t1, t2) } getResp3Terms(resp3(rid, pp, t1, t2)) == seq[Term] {rid, pp, t1, t2} && getType(resp3(rid, pp, t1, t2)) == 7
    }

    // ltK injective
    axiom {
        forall t1, t2 Term :: { ltK(t1, t2) } getLtKAgent(ltK(t1, t2)) == t1 && getLtKSk(ltK(t1, t2)) == t2 && getType(ltK(t1, t2)) == 8
    }

    // ltpK injective
    axiom {
        forall t1, t2 Term :: { ltpK(t1, t2) } getLtpKAgent(ltpK(t1, t2)) == t1 && getLtpKPk(ltpK(t1, t2)) == t2 && getType(ltpK(t1, t2)) == 9
    }

    // psK injective
    axiom {
        forall t1, t2, t3 Term :: { psK(t1, t2, t3) } getPsKAgent1(psK(t1, t2, t3)) == t1 && getPsKAgent2(psK(t1, t2, t3)) == t2 && getPsKPsk(psK(t1, t2, t3)) == t3 && getType(psK(t1, t2, t3)) == 10
    }

    // fr injective
    axiom {
        forall t Term :: { fr(t) } getFr(fr(t)) == t && getType(fr(t)) == 11
    }

    // timestamp injective
    axiom {
        forall t Term :: { timestamp(t) } getTimestamp(timestamp(t)) == t && getType(timestamp(t)) == 12
    }

    // mac injective
    axiom {
        forall t Term :: { mac(t) } getMac(mac(t)) == t && getType(mac(t)) == 13
    }

    // outFact injective
    axiom {
        forall t Term :: { outFact(t) } getOut(outFact(t)) == t && getType(outFact(t)) == 14
    }

    // inFact injective
    axiom {
        forall t Term :: { inFact(t) } getIn(inFact(t)) == t && getType(inFact(t)) == 15
    }

    // message injective
    axiom {
        forall t Term :: { message(t) } getMessage(message(t)) == t && getType(message(t)) == 16
    }

    // counter injective
    axiom {
        forall t Term :: { counter(t) } getCounter(counter(t)) == t && getType(counter(t)) == 17
    }

    // persistency of ltK, ltpK, and psK
    axiom {
        forall f Fact :: { persistent(f) } persistent(f) == (getType(f) == 8 || getType(f) == 9 || getType(f) == 10)
    }
}

ghost
ensures res == (filterPersistentFacts(l) subset s && filterNonPersistentFacts(l) subset s)
pure func G(l, s mset[Fact]) (res bool) {
    // non-persistent facts
    return filterPersistentFacts(l) subset s &&
        // persistent facts
        filterNonPersistentFacts(l) subset s
}

// returns a multiset containing just the non-persistent facts of l while retaining their multiplicity
ghost
ensures forall f Fact :: { f # result } (f # result) == (persistent(f) ? 0 : (f # l))
pure func filterPersistentFacts(l mset[Fact]) (result mset[Fact])

// returns a multiset containing just the persistent facts of l all with multiplicity 1
ghost
ensures forall f Fact :: { f # result } (f # result) == (persistent(f) && (f # l) > 0 ? 1 : 0)
pure func filterNonPersistentFacts(l mset[Fact]) (result mset[Fact])

ghost
ensures result == s setminus filterPersistentFacts(l) union r
pure func U(l, r, s mset[Fact]) (result mset[Fact])

ghost
func factDomainCheck() {
    assert forall fr1, fr2 Term :: { fr(fr1), fr(fr2) } fr1 != fr2 ==> fr(fr1) != fr(fr2)
    assert forall f, a, sk Term :: { fr(f), ltK(a, sk) } fr(f) != ltK(a, sk)
    assert forall f Term :: { fr(f) } !persistent(fr(f))
    assert forall a, sk Term :: { ltK(a, sk) } persistent(ltK(a, sk))
    assert forall a, pk Term :: { ltpK(a, pk) } persistent(ltpK(a, pk))
    assert forall a, b, psk Term :: { psK(a, b, psk) } persistent(psK(a, b, psk))
}

ghost
func persistentFactCheck(f, agent, sk Term) {
    s := mset[Fact] {fr(f), ltK(agent, sk)}
    l1 := mset[Fact] {fr(f), fr(f)}
    l2 := mset[Fact] {ltK(agent, sk), ltK(agent, sk)}

    assert !persistent(fr(f))
    assert fr(f) # s == 1
    assert !G(l1, s) // i.e. multiplicity of fr facts matter
    assert G(l2, s) // i.e. multiplicity of ltK facts do not matter
}
